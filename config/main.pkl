/// The OpenAPI Spec for the Pritt Server
amends "@openapi/Document.pkl"

import "@openapi-contrib/SchemaGenerator.pkl"

import* "./src/*/schema.pkl" as s
import* "./src/*/200.pkl" as o
import* "./src/*/404.pkl" as n
import* "./src/*/401.pkl" as u

local function typeRegex(name: String): Regex = Regex("./src/([A-Za-z]+)/" + name + ".pkl")

local function transform(mapping: Mapping, regex: Regex): Mapping =
    mapping.toMap()
        .mapKeys((key, value) -> regex.findMatchesIn(key).map((it) -> it.groups[1].value).first)
        .toMapping()

local function transformSchema(mapping: Mapping, regex: Regex): Mapping =
    mapping.toMap()
        .mapKeys((key, value) -> regex.findMatchesIn(key).map((it) -> it.groups[1].value).first)
        .mapValues((key, value) -> SchemaGenerator.generate(value))
        .toMapping()

local function schemaRef(name: String): Reference = new Reference {
    `$ref` = "#/components/schemas/\(name)"
}

local schemaRegex = Regex("./src/([A-Za-z]+)/schema.pkl")

local schemaMaps = transformSchema(s, schemaRegex)
local oks = transform(o, typeRegex("200"))
local notFounds = transform(n, typeRegex("404"))
local unauthorizeds = transform(u, typeRegex("401"))

info {
    title = "Pritt OpenAPI Specification"
    description = """
    The Pritt OpenAPI specification used for integrating Pritt with its internal tools (i.e generating schemas for endpoints on the Rust Server and Frontends (CLI and Web)), 
    as well as integrating with other tools.
    """
    version = "0.1.0"
}

security {
    new {
        ["bearerAuth"] {}
    }
}

paths {
    ["/api/packages"] {
        parameters {
            new {
                name = "index"
                `in` = "query"
                required = false
                description = "The index of the paginated result"
                schema {
                    type = "string"
                }
            }
            new {
                name = "user"
                `in` = "query"
                required = false
                description = "Pass a user id to show"
                schema {
                    type = "string"
                }
            }
        }
        get {
            summary = "Get all packages from the Pritt Server"
            operationId = "getPackages"
            description = "This GET Request retrieves metadata about all the packages in the registry. To get more information on a specific package use /api/package/{name}"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("GetPackagesResponse")
                            example = oks["GetPackagesResponse"]
                        }
                    }
                }
            }
        }
    }
    ["/api/package/{name}"] {
        parameters {
            new {
                name = "name"
                `in` = "path"
                required = true
                description = "The name of the package"
                schema {
                    type = "string"
                }
            }
        }
        get {
            operationId = "getPackageByName"
            summary = "Get a package from the Pritt Server with the given name"
            parameters {
                new {
                    name = "lang"
                    `in` = "query"
                    required = false
                    description = "The language associated with the package"
                    schema {
                        type = "string"
                    }
                }
                new {
                    name = "all"
                    `in` = "query"
                    required = false
                    description = "Whether to get all the versions of the package, including yanked and deprecated versions"
                    schema {
                        type = "boolean"
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("GetPackageResponse")
                            example = oks["GetPackageResponse"]
                        }
                    }
                }
                ["404"] {
                    description = "Not Found Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("NotFoundError")
                        }
                    }
                }

            }
        }
        post {
            summary = "Publish a package to the Pritt Server"
            operationId = "publishPackage"
            description = "This endpoint is used for publishing packages to Pritt, usually done via the Pritt CLI. Publishing is permanent and cannot be removed"
            requestBody {
                required = true
                content {
                    ["application/json"] {
                        schema = schemaRef("PublishPackageRequest")
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("PublishPackageResponse")
                        }
                    }
                }
                ["400"] {
                    description = "Bad Request"
                    content {
                        ["application/json"] {
                            schema = schemaRef("Error")
                        }
                    }
                }
                ["401"] {
                    description = "Unauthorized Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("UnauthorizedError")
                            example = unauthorizeds["PublishPackageResponse"]
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
        `delete` {
            summary = "Yank or Deprecate (remove) a package"
            operationId = "removePackageByName"
            description = """
            This endpoint is for yanking or deprecating packages from the pritt registry. You can specify a reason for yanking/deprecating a package, as well as an alternative to use instead.
            In order to yank a package, all its versions must be empty, otherwise it will return a 402 error.
            In order to deprecate a package, its latest (stable) version must be deprecated, otherwise it will return a 402 error.

            NOTE: Only empty packages can be yanked, deprecating a package will remove it from search results, but it will still be available for download.
            """
            requestBody {
                required = false
                content {
                    ["application/json"] {
                        schema = schemaRef("RemovePackageRequest")
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("RemovePackageResponse")
                        }
                    }
                }
                ["401"] {
                    description = "Unauthorized Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("UnauthorizedError")
                        }
                    }
                }
                ["402"] {
                    description = "Invalid Request. Package Cannot Be Removed/Deprecated"
                    content {
                        ["application/json"] {
                            schema = schemaRef("InvalidError")
                        }
                    }
                }
                ["404"] {
                    description = "Not Found Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("NotFoundError")
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/package/@{scope}/{name}"] {
        parameters {
            new {
                name = "scope"
                `in` = "path"
                required = true
                description = "The scope for the given package"
                schema {
                    type = "string"
                }
            }
            new {
                name = "name"
                `in` = "path"
                required = true
                description = "The name of the package"
                schema {
                    type = "string"
                }
            }
        }
        get {
            operationId = "getPackageByNameWithScope"
            summary = "Get a package from the Pritt Server with the given name"
            parameters {
                new {
                    name = "lang"
                    `in` = "query"
                    required = false
                    description = "The language associated with the package"
                    schema {
                        type = "string"
                    }
                }
                new {
                    name = "all"
                    `in` = "query"
                    required = false
                    description = "Whether to get all the versions of the package, including yanked and deprecated versions"
                    schema {
                        type = "boolean"
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("GetPackageResponse")
                            example = oks["GetPackageResponse"]
                        }
                    }
                }
                ["404"] {
                    description = "Not Found Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("NotFoundError")
                        }
                    }
                }

            }
        }
        post {
            summary = "Publish a package to the Pritt Server"
            operationId = "publishPackageWithScope"
            description = "This endpoint is used for publishing packages to Pritt, usually done via the Pritt CLI. Publishing is permanent and cannot be removed"
            requestBody {
                required = true
                content {
                    ["application/json"] {
                        schema = schemaRef("PublishPackageRequest")
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("PublishPackageResponse")
                        }
                    }
                }
                ["401"] {
                    description = "Unauthorized Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("UnauthorizedError")
                            example = unauthorizeds["PublishPackageResponse"]
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
        `delete` {
            summary = "Yank or Deprecate (Remove) a package"
            operationId = "removePackageByNameWithScope"
            description = """
            This endpoint is for yanking or deprecating packages from the pritt registry. You can specify a reason for yanking/deprecating a package, as well as an alternative to use instead.
            In order to yank a package, all its versions must be empty, otherwise it will return a 402 error.
            In order to deprecate a package, its latest (stable) version must be deprecated, otherwise it will return a 402 error.

            NOTE: Only empty packages can be yanked, deprecating a package will remove it from search results, but it will still be available for download.
            """
            requestBody {
                required = false
                content {
                    ["application/json"] {
                        schema = schemaRef("RemovePackageRequest")
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("RemovePackageResponse")
                        }
                    }
                }
                ["401"] {
                    description = "Unauthorized Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("UnauthorizedError")
                        }
                    }
                }
                ["402"] {
                    description = "Package Cannot Be Removed/Deprecated. Invalid Request"
                    content {
                        ["application/json"] {
                            schema = schemaRef("InvalidError")
                        }
                    }
                }
                ["404"] {
                    description = "Not Found Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("NotFoundError")
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/package/{name}/{version}"] {
        parameters {
            new {
                name = "name"
                `in` = "path"
                required = true
                description = "The name of the package"
                schema {
                    type = "string"
                }
            }
            new {
                name = "version"
                `in` = "path"
                required = true
                description = "The version of the package"
                schema {
                    type = "string"
                }
            }
        }
        get {
            operationId = "getPackageByNameWithVersion"
            summary = "Get a package from the Pritt Server with the given name"
            parameters {
                new {
                    name = "lang"
                    `in` = "query"
                    required = false
                    description = "The language associated with the package"
                    schema {
                        type = "string"
                    }
                }
                new {
                    name = "all"
                    `in` = "query"
                    required = false
                    description = "Whether to get all the versions of the package, including yanked and deprecated versions"
                    schema {
                        type = "boolean"
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("GetPackageByVersionResponse")
                            example = oks["GetPackageByVersionResponse"]
                        }
                    }
                }
                ["404"] {
                    description = "Not Found Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("NotFoundError")
                        }
                    }
                }

            }
        }
        post {
            summary = "Publish a package to the Pritt Server"
            operationId = "publishPackageVersion"
            description = "This endpoint is used for publishing packages to Pritt, usually done via the Pritt CLI. Publishing is permanent and cannot be removed"
            requestBody {
                required = true
                content {
                    ["application/json"] {
                        schema = schemaRef("PublishPackageByVersionRequest")
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("PublishPackageByVersionResponse")
                        }
                    }
                }
                ["401"] {
                    description = "Unauthorized Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("UnauthorizedError")
                            example = unauthorizeds["PublishPackageByVersionResponse"]
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
        `delete` {
            summary = "Yank or Deprecate (remove) a package"
            operationId = "removePackageVersionByName"
            description = """
            This endpoint is for yanking or deprecating packages from the pritt registry. You can specify a reason for yanking/deprecating a package, as well as an alternative to use instead.

            NOTE: Only empty packages can be yanked, deprecating a package will remove it from search results, but it will still be available for download.
            """
            requestBody {
                required = false
                content {
                    ["application/json"] {
                        schema = schemaRef("RemovePackageByVersionRequest")
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("RemovePackageByVersionResponse")
                        }
                    }
                }
                ["401"] {
                    description = "Unauthorized Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("UnauthorizedError")
                        }
                    }
                }
                ["404"] {
                    description = "Not Found Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("NotFoundError")
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/package/@{scope}/{name}/{version}"] {
        parameters {
            new {
                name = "scope"
                `in` = "path"
                required = true
                description = "The scope for the given package"
                schema {
                    type = "string"
                }
            }
            new {
                name = "name"
                `in` = "path"
                required = true
                description = "The name of the package"
                schema {
                    type = "string"
                }
            }
            new {
                name = "version"
                `in` = "path"
                required = true
                description = "The version of the package"
                schema {
                    type = "string"
                }
            }
        }
        get {
            operationId = "getPackageByNameWithScopeAndVersion"
            summary = "Get a package from the Pritt Server with the given name"
            parameters {
                new {
                    name = "lang"
                    `in` = "query"
                    required = false
                    description = "The language associated with the package"
                    schema {
                        type = "string"
                    }
                }
                new {
                    name = "all"
                    `in` = "query"
                    required = false
                    description = "Whether to get all the versions of the package, including yanked and deprecated versions"
                    schema {
                        type = "boolean"
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("GetPackageByVersionResponse")
                            example = oks["GetPackageByVersionResponse"]
                        }
                    }
                }
                ["404"] {
                    description = "Not Found Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("NotFoundError")
                        }
                    }
                }

            }
        }
        post {
            summary = "Publish a package to the Pritt Server"
            operationId = "publishPackageWithScopeAndVersion"
            description = "This endpoint is used for publishing packages to Pritt, usually done via the Pritt CLI. Publishing is permanent and cannot be removed"
            requestBody {
                required = true
                content {
                    ["application/json"] {
                        schema = schemaRef("PublishPackageByVersionRequest")
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("PublishPackageByVersionResponse")
                        }
                    }
                }
                ["401"] {
                    description = "Unauthorized Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("UnauthorizedError")
                            example = unauthorizeds["PublishPackageByVersionResponse"]
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
        `delete` {
            summary = "Yank or Deprecate (Remove) a package"
            operationId = "removePackageByNameWithScopeAndVersion"
            description = """
            This endpoint is for yanking or deprecating packages from the pritt registry. You can specify a reason for yanking/deprecating a package, as well as an alternative to use instead.

            NOTE: Only empty packages can be yanked, deprecating a package will remove it from search results, but it will still be available for download.
            """
            requestBody {
                required = false
                content {
                    ["application/json"] {
                        schema = schemaRef("RemovePackageByVersionRequest")
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("RemovePackageByVersionResponse")
                        }
                    }
                }
                ["401"] {
                    description = "Unauthorized Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("UnauthorizedError")
                        }
                    }
                }
                ["404"] {
                    description = "Not Found Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("NotFoundError")
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/package/upload"] {
        parameters {
          new {
            name = "id"
            `in` = "query"
            required = true
            description = "The token id of the package used to identify the package"
            schema {
              type = "string"
            }
          }
        }
        description = "Upload a package to the Pritt Server: This API Endpoint is called after a subsequent call to /api/package/{name}(/{version})"
        put {
            summary = "Upload a package to the Pritt Server"
            description = "This API Endpoint is used to upload the tarball for the package"
            operationId = "uploadPackageWithToken"
            requestBody {
              required = true
              content {
                ["application/gzip"] {
                    schema {
                      type = "string"
                      format = "binary"
                    }
                }
              }
            }
            responses {
              ["200"] {
                description = "OK Response"
                content {
                  ["application/json"] {
                    schema = schemaRef("UploadPackageResponse")
                  }
                }
              }
              ["401"] {
                description = "Unauthorized Response"
                content {
                  ["application/json"] {
                    schema = schemaRef("UnauthorizedError")
                    example = unauthorizeds["UploadPackageResponse"]
                  }
                }
              }
              ["402"] {
                description = "Token Expired"
                content {
                  ["application/json"] {
                    schema = schemaRef("UnauthorizedError")
                    example = transform(import*("./src/*/402.pkl"), typeRegex("402"))["UploadPackageResponse"]
                  }
                }
              }
                ["403"] {
                    description = "Invalid Tarball"
                    content {
                        ["application/json"] {
                            schema = schemaRef("InvalidTarballError")
                        }
                    }
                }
              ["404"] {
                description = "Not Found Response"
                content {
                  ["application/json"] {
                    schema = schemaRef("NotFoundError")
                    example = notFounds["UploadPackageResponse"]
                  }
                }
              }
            }
            security {
              new {
                ["bearerAuth"] {}
              }
            }
        }
    }
    ["/api/publish/status"] {
        parameters {
            new {
                name = "id"
                `in` = "query"
                required = true
                description = "The Package Publishing ID"
                schema {
                    type = "string"
                }
            }
        }
        get {
            summary = "Get the publishing status for a package"
            description = "Get the publishing status for a package being published, given the status id"
            operationId = "getPackagePubStatus"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("PublishPackageStatusResponse")
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/users"] {
        get {
            summary = "List users from the Pritt Server"
            operationId = "getUsers"
            responses {
              ["200"] {
                description = "Normal response"
                content {
                  ["application/json"] {
                    schema = schemaRef("GetUsersResponse")
                  }
                }
              }
            }
            security {
              new {
                ["bearerAuth"] {}
              }
            }
        }
    }
    ["/api/user/{id}"] {
        parameters {
            new {
                name = "id"
                `in` = "path"
                required = true
                description = "The id of the user"
                schema {
                    type = "string"
                }
            }
        }
        get {
            summary = "Get a user from Pritt"
            description = "Get user information from Pritt about a particular user given the user's id"
            operationId = "getUserById"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("GetUserResponse")
                        }
                    }
                }
                ["404"] {
                    description = "Not Found Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("NotFoundError")
                        }
                    }
                }
            }
        }
        put {
            summary = "Add a new user to Pritt"
            operationId = "addUserById"
            requestBody {
                required = true
                content {
                    ["application/json"] {
                        schema = schemaRef("AddUserRequest")
                    }
                }
            }
            responses {
              ["200"] {
                description = "OK Response"
                content {
                  ["application/json"] {
                    schema = schemaRef("AddUserResponse")
                  }
                }
              }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/user"] {
        get {
            summary = "Get the current user from Pritt"
            description = "Get user information from Pritt about a particular user via auth"
            operationId = "getCurrentUser"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("GetUserResponse")
                        }
                    }
                }
                ["404"] {
                    description = "Not Found Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("NotFoundError")
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/scope/@{scope}"] {
        parameters {
            new {
                name = "scope"
                `in` = "path"
                required = true
                description = "The scope name"
                schema {
                    type = "string"
                }
            }
        }
        get {
            summary = "Get information about a scope/organization"
            operationId = "getOrganization"
            description = "This GET Request retrieves information about a given scope/organization"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("GetScopeResponse")
                            example = oks["GetScopeResponse"]
                        }
                    }
                }
            }
        }
    }
    ["/api/scope/@{scope}/packages"] {
        parameters {
            new {
                name = "scope"
                `in` = "path"
                required = true
                description = "The scope name"
                schema {
                    type = "string"
                }
            }
        }
        get {
            summary = "Get all packages from the Pritt Server for a given scope"
            operationId = "getOrgPackages"
            description = "This GET Request retrieves metadata about all the packages in the registry for a given scope. To get more information on a specific package use /api/package/@{scope}/{name}"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("GetPackagesResponse")
                            example = oks["GetPackagesResponse"]
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/adapters"] {
        get {
            summary = "Get all custom adapters"
            description = "Get an adapter with the given id"
            operationId = "getAdapters"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("GetAdaptersResponse")
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/adapter/{id}"] {
        parameters {
            new {
                name = "id"
                `in` = "path"
                required = true
                description = "The id of the adapter"
                schema {
                    type = "string"
                }
            }
        }
        get {
            summary = "Get an adapter with the given id"
            description = "Get an adapter with the given id"
            operationId = "getAdapterById"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("GetAdapterResponse")
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
        post {
            summary = "Create or update an adapter with the given id"
            description = "Create or update an adapter with the given id"
            operationId = "addAdapterWithId"
            requestBody {
                required = true
                content {
                    ["application/json"] {
                        schema = schemaRef("AddAdapterRequest")
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("AddAdapterResponse")
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
        `delete` {
            summary = "Yank an adapter with the given id"
            description = "Yank an adapter with the given id"
            operationId = "yankAdapterWithId"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("YankAdapterResponse")
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/adapter/upload"] {
        parameters {
          new {
            name = "id"
            `in` = "query"
            required = true
            description = "The token id of the adapter used to identify the adapter"
            schema {
              type = "string"
            }
          }
        }
        put {
            summary = "Upload an adapter to the Pritt Server"
            description = "This API Endpoint is used to upload the tarball for the processed adapter"
            operationId = "uploadAdapterWithToken"
            requestBody {
              required = true
              content {
                ["application/gzip"] {
                    schema {
                      type = "string"
                      format = "binary"
                    }
                }
              }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("UploadAdapterResponse")
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/adapter/{lang}"] {
        get {
            summary = "Get adapters by language"
            operationId = "getAdaptersByLang"
            description = "Get the adapters for a particular language"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("GetAdaptersByLangResponse")
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/auth/new"] {
        parameters {
            new {
                name = "id"
                `in` = "query"
                required = false
                description = "The Device ID used to identify the CLI source"
                schema {
                    type = "string"
                }
            }
        }
        description = "Create a new token used for authenticating/creating a new user"
        post {
            summary = "Create token for a user"
            description = "Create a new token used for authenticating/creating a new user"
            operationId = "createNewAuthStatus"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("AuthResponse")
                        }
                    }
                }
                ["5XX"] {
                    description = "Server Error"
                    content {
                        ["application/json"] {
                            schema = schemaRef("ServerError")
                        }
                    }
                }
            }
        }
    }
    ["/api/auth/details/{id}"] {
        parameters {
            new {
                name = "id"
                `in` = "path"
                required = true
                description = "The Session ID"
                schema {
                    type = "string"
                }
            }
        }
        summary = "Get the details for an auth session"
        description = "Get the details for an authorization session given its session id"
        get {
            summary = "Get the details for an auth session"
            description = "Get the details for an auth session"
            operationId = "getAuthDetailsById"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("AuthDetailsResponse")
                        }
                    }
                }
                ["404"] {
                    description = "Not Found Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("NotFoundError")
                        }
                    }
                }
            }
        }
    }
    ["/api/auth/validate"] {
        description = "Validate or authenticate a user, creating a user if needed"
        parameters {
          new {
            name = "token"
            `in` = "query"
            required = true
            description = "The token created from the `/api/auth`"
            schema {
              type = "string"
            }
          }
        }
        // TODO: What if we authenticate the website itself?
        post {
            summary = "Validte Authentication Response"
            operationId = "validateAuthStatus"
            description = "Validate or authenticate a user"
            requestBody {
                description = "The request body containing all the information needed to validate a user's status"
                content {
                    ["application/json"] {
                        schema = schemaRef("AuthValidateRequest")
                    }
                }
            }
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("AuthValidateResponse")
                        }
                    }
                }
                ["402"] {
                    description = "Authorization did not complete or errored out"
                    content {
                        ["application/json"] {
                            schema = schemaRef("AuthError")
                        }
                    }
                }
                ["405"] {
                    description = "Expired Token Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("ExpiredError")
                        }
                    }
                }
            }
        }
    }
    ["/api/auth/status"] {
        description = "Get the status of authentication for a user, usually used by the command line to poll"
        post {
            parameters {
                new {
                    name = "id"
                    `in` = "query"
                    required = true
                    description = "The Session ID"
                    schema {
                        type = "string"
                    }
                }
            }
            summary = "Get Authentication Status"
            operationId = "getAuthStatus"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("AuthPollResponse")
                        }
                    }
                }
                ["405"] {
                    description = "Expired Token Response"
                    content {
                        ["application/json"] {
                            schema = schemaRef("ExpiredError")
                        }
                    }
                }
                ["404"] {
                    description = "Could not find the token specified"
                    content {
                        ["application/json"] {
                            schema = schemaRef("NotFoundError")
                        }
                    }
                }
            }
        }
    }
    ["/api/archive/package/{name}"] {
        parameters {
            new {
                name = "name"
                `in` = "path"
                required = true
                description = "The name of the adapter, or an identifier associated with it"
                schema {
                    type = "string"
                }
            }
            new {
                name = "version"
                `in` = "query"
                required = false
                description = "The version of the package to unpack"
                schema {
                    type = "string"
                }
            }
        }
        get {
            operationId = "getPackageArchiveWithName"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/gzip"] {
                            schema {
                                type = "string"
                                format = "binary"
                            }
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
    ["/api/archive/adapter/{name}"] {
        parameters {
            new {
                name = "name"
                `in` = "path"
                required = true
                description = "The name of the adapter, or an identifier associated with it"
                schema {
                    type = "string"
                }
            }
        }
        get {
            operationId = "getAdapterArchiveWithName"
            responses {
                ["200"] {
                    description = "OK Response"
                    content {
                        ["application/gzip"] {
                            schema {
                                type = "string"
                                format = "binary"
                            }
                        }
                    }
                }
            }
            security {
                new {
                    ["bearerAuth"] {}
                }
            }
        }
    }
}

components {
    schemas = schemaMaps
    securitySchemes {
        ["bearerAuth"] {
            name = "Authorization"
            `in` = "header"
            type = "apiKey"
            scheme = "Bearer"
            description = """
            The request sent is authorized by a bearer issued to the user. 
            The token is sent in a header in the following format: `Authorization: Bearer {token}`
            """
        }
    }
}