@go.Package { name = "github.com/pritt/cli/config" }
module ConfigSchema

import "@go/go.pkl"

class YamlField extends go.Field {
  structTags {
    ["yaml"] = "%{name},omitempty"
  }
}

/// The builtin lints for the given package
local lints: Listing<String> = new Listing {
    "todos"
    "multi_name"
}

local isLint = (i: String) -> lints.toList().contains(i)

class ConfigActionPublish {
    @YamlField
    pre: String?

    @YamlField
    post: String?
}

class ConfigActionInstall {
    @YamlField
    post: String?
}

class ConfigActions {
    /// Action run when `pritt publish` is called
    @YamlField
    publish: ConfigActionPublish?

    /// Action run when `pritt install` is called for the given package
    @YamlField
    install: ConfigActionPublish?
}

class ConfigLints {
    /// List of lints to ignore
    @YamlField
    ignore: Listing<String(isLint)>

    /// List of lints such that if encountered, cause an error
    @YamlField
    strict: Listing<String(isLint)>
}

/// The name of the given package
@YamlField
name: String?

/// The homepage of the package
@YamlField
homepage: Uri?

/// The URL for the source code of the project
@YamlField
url: Uri?

/// The username of the author
@YamlField
author: String?

/// Contributors to the given project
@YamlField
contributors: Listing<String>

/// User defined scripts
/// At the moment, only two levels of scripts are allowed
@YamlField
scripts: Mapping<String, String | Mapping<String, String>>

/// Actions to run before and after different actions
@YamlField
actions: ConfigActions?

/// HIDDEN: The users that have access to this project
hidden users: Listing<String> = if (author == null) contributors else contributors.toList().add(author).toListing()

