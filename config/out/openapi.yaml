openapi: 3.0.3
info:
  title: Pritt OpenAPI Specification
  version: 0.1.0
  description: |-
    The Pritt OpenAPI specification used for integrating Pritt with its internal tools (i.e generating schemas for endpoints on the Rust Server and Frontends (CLI and Web)), 
    as well as integrating with other tools.
paths:
  /api/packages:
    get:
      summary: Get all packages from the Pritt Server
      description: This GET Request retrieves metadata about all the packages in the registry. To get more information on a specific package use /api/package/{name}
      operationId: getPackages
      responses:
        '200':
          description: OK Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPackagesResponse'
              example:
                next_url: https://example.com/foo
                packages:
                - name: pritt
                  latest: 0.1.0
                  description: The Pritt Package itself!
  '/api/package/{name}':
    get:
      summary: Get a package from the Pritt Server with the given name
      operationId: getPackageByName
      responses:
        '200':
          description: OK Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPackageResponse'
              example: {}
        '404':
          description: Not Found Response
          content: {}
    post:
      summary: Publish a package to the Pritt Server
      description: This endpoint is used for publishing packages to Pritt, usually done via the Pritt CLI. Publishing is permanent and cannot be removed
      operationId: publishPackage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishPackageRequest'
        required: true
      responses:
        '200':
          description: OK Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishPackageResponse'
        '401':
          description: Unauthorized Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example: {}
      security:
      - bearerAuth: []
    parameters:
    - description: The name of the package
      name: name
      in: path
      required: true
      schema:
        type: string
  '/api/package/{name}/{version}':
    get:
      summary: Get a package from the Pritt Server with the given name and specified version
      operationId: getPackageByNameAndVersion
      responses:
        '200':
          description: OK Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPackageByVersionResponse'
              example: {}
    post:
      summary: Publish a package to the Pritt Server with a specified version
      description: This endpoint is used for publishing new versions of existing packages to Pritt, usually done via the Pritt CLI. Publishing is permanent and cannot be removed. To publish a new package, use the `/api/package/{name}` POST
      operationId: publishPackageWithVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishPackageByVersionRequest'
        required: true
      responses:
        '200':
          description: OK Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishPackageByVersionResponse'
        '401':
          description: Unauthorized Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example: {}
      security:
      - bearerAuth: []
    parameters:
    - description: The name of the package
      name: name
      in: path
      required: true
      schema:
        type: string
    - description: The version of the package
      name: version
      in: path
      required: true
      schema:
        type: string
  /api/package/upload:
    description: 'Upload a package to the Pritt Server: This API Endpoint is called after a subsequent call to /api/package/{name}(/{version})'
    post:
      summary: Upload a package to the Pritt Server
      description: This API Endpoint is used to upload the tarball for the package
      operationId: uploadPackageWithToken
      requestBody:
        content:
          application/gzip:
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          description: OK Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadPackageResponse'
        '401':
          description: Unauthorized Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example: {}
        '402':
          description: Token Expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example: {}
        '404':
          description: Not Found Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
              example: {}
      security:
      - bearerAuth: []
    parameters:
    - description: The token id of the package used to identify the package
      name: id
      in: query
      required: true
      schema:
        type: string
  /api/users:
    get:
      summary: List users from the Pritt Server
      operationId: getUsers
      responses:
        default:
          description: Normal response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResponse'
      security:
      - bearerAuth: []
  '/api/user/{id}':
    get:
      summary: Get a user from Pritt
      description: Get user information from Pritt about a particular user given the user's id
      operationId: getUserById
      responses:
        '200':
          description: OK Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '404':
          description: Not Found Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      summary: Add a new user to Pritt
      operationId: addUserById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserRequest'
        required: true
      responses:
        '200':
          description: OK Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddUserResponse'
      security:
      - bearerAuth: []
    parameters:
    - description: The id of the user
      name: id
      in: path
      required: true
      schema:
        type: string
components:
  schemas:
    AddUserRequest:
      type: object
      title: AddUserRequest
      description: |-
        The schema of the request object for the add user endpoint `api/user/{id}`

        The object gets important information such as necessary information for registering the user
      properties: {}
      additionalProperties: false
    AddUserResponse:
      type: object
      title: AddUserResponse
      properties: {}
      additionalProperties: false
    Error:
      type: object
      title: Error
      description: |-
        The generic error type returned from an invalid request

        Most of the time, this module may be used as is, but for special cases it is extended to provide more information or context in such applications
      properties: {}
      additionalProperties: false
    GetPackageByVersionResponse:
      type: object
      title: GetPackageByVersionResponse
      properties: {}
      additionalProperties: false
    GetPackageResponse:
      type: object
      title: GetPackageResponse
      properties:
        name:
          type: string
          description: The name of the package retrieved
        latest:
          type: string
          description: The latest version of the package retrieved
      additionalProperties: false
      required:
      - name
      - latest
    GetPackagesResponse:
      type: object
      title: GetPackagesResponse
      properties:
        next_url:
          type: string
          description: The next url for the next list of the packages
        packages:
          type: array
          description: The packages listed out
          items:
            type: object
            title: Package
            description: The major extension of this class
            properties:
              name:
                type: string
              latest:
                type: string
              description:
                type: string
            additionalProperties: false
            required:
            - name
            - latest
            - description
      additionalProperties: false
      required:
      - next_url
      - packages
    GetUserResponse:
      type: object
      title: GetUserResponse
      properties: {}
      additionalProperties: false
    GetUsersResponse:
      type: object
      title: GetUsersResponse
      properties: {}
      additionalProperties: false
    NotFoundError:
      type: object
      title: NotFoundError
      properties: {}
      additionalProperties: false
    PublishPackageByVersionRequest:
      type: object
      title: PublishPackageByVersionRequest
      properties: {}
      additionalProperties: false
    PublishPackageByVersionResponse:
      type: object
      title: PublishPackageByVersionResponse
      properties: {}
      additionalProperties: false
    PublishPackageRequest:
      type: object
      title: PublishPackageRequest
      description: A request object to publish a given package
      properties:
        name:
          type: string
          description: The name of the package to publish
        version:
          type: string
          title: Version
          description: The version of the package to publish
        config:
          type: object
          description: The configuration info about the package
          additionalProperties: {}
        configFile:
          type: string
          title: Uri
          description: The configuration file for the given project
      additionalProperties: false
      required:
      - name
      - version
      - config
      - configFile
    PublishPackageResponse:
      type: object
      title: PublishPackageResponse
      properties: {}
      additionalProperties: false
    ServerError:
      type: object
      title: ServerError
      description: |-
        A server error, returned in the case of a 500 Server Error

        Most of the time this is not what we want, but it is here for the sake of completeness
      properties: {}
      additionalProperties: false
    UnauthorizedError:
      type: object
      title: UnauthorizedError
      properties: {}
      additionalProperties: false
    UploadPackageResponse:
      type: object
      title: UploadPackageResponse
      properties: {}
      additionalProperties: false
  securitySchemes:
    bearerAuth:
      type: http
      description: |-
        The request sent is authorized by a bearer issued to the user. 
        The token is sent in a header in the following format: `Authorization: Bearer {token}`
      name: Authorization
      in: header
      scheme: Bearer
      bearerFormat: APIKey
security:
- bearerAuth: []
