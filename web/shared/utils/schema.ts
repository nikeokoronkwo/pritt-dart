/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/packages": {
        parameters: {
            query?: {
                /** @description The index of the paginated result */
                index?: string;
                /** @description Pass a user id to show */
                user?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all packages from the Pritt Server
         * @description This GET Request retrieves metadata about all the packages in the registry. To get more information on a specific package use /api/package/{name}
         */
        get: operations["getPackages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/package/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the package */
                name: string;
            };
            cookie?: never;
        };
        /** Get a package from the Pritt Server with the given name */
        get: operations["getPackageByName"];
        put?: never;
        /**
         * Publish a package to the Pritt Server
         * @description This endpoint is used for publishing packages to Pritt, usually done via the Pritt CLI. Publishing is permanent and cannot be removed
         */
        post: operations["publishPackage"];
        /**
         * Yank an empty package
         * @description This endpoint is for yanking packages from the pritt registry
         */
        delete: operations["yankPackageByName"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/package/@{scope}/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The scope for the given package */
                scope: string;
                /** @description The name of the package */
                name: string;
            };
            cookie?: never;
        };
        /** Get a package from the Pritt Server with the given name */
        get: operations["getPackageByNameWithScope"];
        put?: never;
        /**
         * Publish a package to the Pritt Server
         * @description This endpoint is used for publishing packages to Pritt, usually done via the Pritt CLI. Publishing is permanent and cannot be removed
         */
        post: operations["publishPackageWithScope"];
        /**
         * Yank an empty package
         * @description This endpoint is for yanking packages from the pritt registry
         */
        delete: operations["yankPackageByNameWithScope"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/package/{name}/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the package */
                name: string;
                /** @description The version of the package */
                version: string;
            };
            cookie?: never;
        };
        /** Get a package from the Pritt Server with the given name */
        get: operations["getPackageByNameWithVersion"];
        put?: never;
        /**
         * Publish a package to the Pritt Server
         * @description This endpoint is used for publishing packages to Pritt, usually done via the Pritt CLI. Publishing is permanent and cannot be removed
         */
        post: operations["publishPackageVersion"];
        /**
         * Yank an empty package
         * @description This endpoint is for yanking packages from the pritt registry
         */
        delete: operations["yankPackageVersionByName"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/package/@{scope}/{name}/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The scope for the given package */
                scope: string;
                /** @description The name of the package */
                name: string;
                /** @description The version of the package */
                version: string;
            };
            cookie?: never;
        };
        /** Get a package from the Pritt Server with the given name */
        get: operations["getPackageByNameWithScopeAndVersion"];
        put?: never;
        /**
         * Publish a package to the Pritt Server
         * @description This endpoint is used for publishing packages to Pritt, usually done via the Pritt CLI. Publishing is permanent and cannot be removed
         */
        post: operations["publishPackageWithScopeAndVersion"];
        /**
         * Yank an empty package
         * @description This endpoint is for yanking packages from the pritt registry
         */
        delete: operations["yankPackageByNameWithScopeAndVersion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/package/upload": {
        parameters: {
            query: {
                /** @description The token id of the package used to identify the package */
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Upload a package to the Pritt Server
         * @description This API Endpoint is used to upload the tarball for the package
         */
        put: operations["uploadPackageWithToken"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/package/status": {
        parameters: {
            query: {
                /** @description The Package Publishing ID */
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the publishing status for a package
         * @description Get the publishing status for a package being published, given the status id
         */
        get: operations["getPackagePubStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users from the Pritt Server */
        get: operations["getUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the user */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get a user from Pritt
         * @description Get user information from Pritt about a particular user given the user's id
         */
        get: operations["getUserById"];
        /** Add a new user to Pritt */
        put: operations["addUserById"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current user from Pritt
         * @description Get user information from Pritt about a particular user via auth
         */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/scope/@{scope}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The scope name */
                scope: string;
            };
            cookie?: never;
        };
        /**
         * Get information about a scope/organization
         * @description This GET Request retrieves information about a given scope/organization
         */
        get: operations["getOrganization"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/scope/@{scope}/packages": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The scope name */
                scope: string;
            };
            cookie?: never;
        };
        /**
         * Get all packages from the Pritt Server for a given scope
         * @description This GET Request retrieves metadata about all the packages in the registry for a given scope. To get more information on a specific package use /api/package/@{scope}/{name}
         */
        get: operations["getOrgPackages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/adapters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all custom adapters
         * @description Get an adapter with the given id
         */
        get: operations["getAdapters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/adapter/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the adapter */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get an adapter with the given id
         * @description Get an adapter with the given id
         */
        get: operations["getAdapterById"];
        put?: never;
        /**
         * Create or update an adapter with the given id
         * @description Create or update an adapter with the given id
         */
        post: operations["addAdapterWithId"];
        /**
         * Yank an adapter with the given id
         * @description Yank an adapter with the given id
         */
        delete: operations["yankAdapterWithId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/adapter/upload": {
        parameters: {
            query: {
                /** @description The token id of the adapter used to identify the adapter */
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Upload an adapter to the Pritt Server
         * @description This API Endpoint is used to upload the tarball for the processed adapter
         */
        put: operations["uploadAdapterWithToken"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/adapter/{lang}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get adapters by language
         * @description Get the adapters for a particular language
         */
        get: operations["getAdaptersByLang"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/new": {
        parameters: {
            query?: {
                /** @description The Device ID used to identify the CLI source */
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create token for a user
         * @description Create a new token used for authenticating/creating a new user
         */
        post: operations["createNewAuthStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/details/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The Session ID */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get the details for an auth session
         * @description Get the details for an auth session
         */
        get: operations["getAuthDetailsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/validate": {
        parameters: {
            query: {
                /** @description The token created from the `/api/auth` */
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validte Authentication Response
         * @description Validate or authenticate a user
         */
        post: operations["validateAuthStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Authentication Status */
        post: operations["getAuthStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/archive/package/{name}": {
        parameters: {
            query?: {
                /** @description The version of the package to unpack */
                version?: string;
            };
            header?: never;
            path: {
                /** @description The name of the adapter, or an identifier associated with it */
                name: string;
            };
            cookie?: never;
        };
        get: operations["getPackageArchiveWithName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/archive/adapter/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the adapter, or an identifier associated with it */
                name: string;
            };
            cookie?: never;
        };
        get: operations["getAdapterArchiveWithName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AddAdapterRequest */
        AddAdapterRequest: Record<string, never>;
        /** AddAdapterResponse */
        AddAdapterResponse: Record<string, never>;
        /**
         * AddUserRequest
         * @description The schema of the request object for the add user endpoint `api/user/{id}`
         *
         *     The object gets important information such as necessary information for registering the user
         */
        AddUserRequest: Record<string, never>;
        /** AddUserResponse */
        AddUserResponse: Record<string, never>;
        /** AuthDetailsResponse */
        AuthDetailsResponse: {
            /** @description The token used for authentication on the client (CLI) side */
            token: string;
            /** @description Time to represent the number of seconds from when the request was made before the request becomes expired
             *
             *     Expect some  */
            token_expires: string;
            /** @description A unique id used to identify the person requesting for an ID
             *
             *     The Device ID */
            device: string;
            /** @description The unique 8-character code */
            code: string;
            /** PollStatus */
            status: ("success" | "fail" | "error") | "expired" | "pending";
            user_id?: string | null;
        };
        /** AuthError */
        AuthError: {
            error?: string | null;
            /** PollStatus */
            status: ("success" | "fail" | "error") | "expired" | "pending";
        };
        /** AuthPollResponse */
        AuthPollResponse: {
            /** PollStatus */
            status: ("success" | "fail" | "error") | "expired" | "pending";
            response?: {
                [key: string]: unknown;
            } | null;
        };
        /** AuthResponse */
        AuthResponse: {
            /** @description The token used for authentication on the client (CLI) side */
            token: string;
            /** @description Time to represent the number of seconds from when the request was made before the request becomes expired
             *
             *     Expect some  */
            token_expires: string;
            /** @description A unique id used to identify the person requesting for an ID
             *
             *     The Device ID */
            device: string;
            /** @description The unique 8-character code */
            code: string;
        };
        /** AuthValidateRequest */
        AuthValidateRequest: {
            /** @description The user's id */
            user_id: string;
            /** @description The session id */
            session_id: string;
            /** @description The time at which this was validated */
            time: string;
            /**
             * ValidatedPollStatus
             * @description Status
             * @enum {string}
             */
            status: "success" | "fail" | "error";
            /** @description Error description, if any? */
            error?: string | null;
        };
        /** AuthValidateResponse */
        AuthValidateResponse: {
            validated: boolean;
        };
        /**
         * Error
         * @description The generic error type returned from an invalid request
         *
         *     Most of the time, this module may be used as is, but for special cases it is extended to provide more information or context in such applications
         */
        Error: {
            error?: string | null;
        };
        /** ExistsError */
        ExistsError: {
            error?: string | null;
            name: string;
        };
        /** ExpiredError */
        ExpiredError: {
            error?: string | null;
            /** @description The time that the resource expired */
            expired_time: string;
        };
        /** GetAdapterResponse */
        GetAdapterResponse: {
            /** @description The name of the adapter */
            name: string;
            /**
             * Version
             * @description The current version of the adapter in system
             */
            version: string;
            /** @description The description of the adapter */
            description?: string | null;
            /** @description The language the adapter is associated with */
            language?: string | null;
            /** @description The date the adapter was uploaded */
            uploaded_at: string;
            /** @description The url link to the source code of the adapter, if any */
            source_url?: string | null;
        };
        /** GetAdaptersByLangResponse */
        GetAdaptersByLangResponse: Record<string, never>;
        /** GetAdaptersResponse */
        GetAdaptersResponse: {
            /** @description The adapters */
            adapters: {
                name: string;
                /** Version */
                version: string;
                /** @description The description of the adapter */
                description?: string | null;
                /** @description The language the adapter is associated with */
                language?: string | null;
                /** @description The date the adapter was uploaded */
                uploaded_at: string;
                /** @description The url link to the source code of the adapter, if any */
                source_url?: string | null;
            }[];
        };
        /** GetCurrentUserResponse */
        GetCurrentUserResponse: {
            name: string;
            email: string;
            /** @description The time the user was created */
            created_at: string;
            /** @description The last time the user was updated */
            updated_at: string;
            /** @description Packages the user has worked on */
            packages: {
                name: string;
                /**
                 * UserPackageRelationship
                 * @enum {string}
                 */
                type: "author" | "contributor";
                privileges?: ("read" | "write" | "publish" | "ultimate")[] | null;
            }[];
            /** @description The ID of the user */
            id: string;
        };
        /** GetPackageByVersionResponse */
        GetPackageByVersionResponse: {
            name: string;
            scope?: string | null;
            description?: string | null;
            /** Version */
            version: string;
            /** Author */
            author: {
                name: string;
                email: string;
                avatar?: string | null;
            };
            contributors: {
                name: string;
                email: string;
                avatar?: string | null;
                /** @description The role of the contributor */
                privileges?: ("read" | "write" | "publish" | "ultimate")[] | null;
            }[];
            language?: string | null;
            created_at: string;
            /** @description info  */
            info: {
                [key: string]: unknown;
            };
            /** @description env */
            env: {
                [key: string]: unknown;
            };
            /** @description metadata */
            metadata: {
                [key: string]: unknown;
            };
            /** @description signatures */
            signatures: {
                /** @description public key id */
                public_key_id: string;
                /** @description The signature itself */
                signature: string;
                /** @description The time the date was created */
                created: string;
            }[];
            /** @description whether the package is deprecated */
            deprecated?: boolean | null;
            /** @description deprecation message */
            deprecationMessage?: string | null;
            /** @description whether the package is yanked */
            yanked?: boolean | null;
            /** @description The readme info */
            readme?: string | null;
            /**
             * ConfigFile
             * @description The configuration file information
             */
            config?: {
                /** @description The name of the config file */
                name: string;
                /** @description The data in the file */
                data: string;
            } | null;
            /** @description The file hash */
            hash?: string | null;
            /** @description The integrity hash */
            integrity?: string | null;
        };
        /** GetPackageResponse */
        GetPackageResponse: {
            /** @description The name of the package retrieved */
            name: string;
            /**
             * Version
             * @description The latest version of the package retrieved
             */
            latest_version: string;
            /**
             * Author
             * @description The author of the package
             */
            author: {
                name: string;
                email: string;
                avatar?: string | null;
            };
            /** @description The description of the package */
            description?: string | null;
            /** @description Contributors to the package */
            contributors: {
                name: string;
                email: string;
                avatar?: string | null;
                /** @description The role of the contributor */
                privileges?: ("read" | "write" | "publish" | "ultimate")[] | null;
            }[];
            /** @description The language of the package */
            language?: string | null;
            /** @description The license for the package */
            license: string;
            /**
             * VCS
             * @description The version control system used
             * @enum {string}
             */
            vcs: "git" | "svn" | "fossil" | "mercurial" | "other";
            /** @description The URL to the VCS used */
            vcs_url?: string | null;
            /** @description The date the package was created */
            created_at: string;
            /** @description The date the package was updated */
            updated_at: string;
            /**
             * VerbosePackage
             * @description The latest package
             */
            latest: {
                name: string;
                scope?: string | null;
                description?: string | null;
                /** Version */
                version: string;
                /** Author */
                author: {
                    name: string;
                    email: string;
                    avatar?: string | null;
                };
                language?: string | null;
                created_at: string;
                updated_at?: string | null;
                /** @description readme info */
                readme?: string | null;
                /** @description info  */
                info: {
                    [key: string]: unknown;
                };
                /** @description env */
                env: {
                    [key: string]: unknown;
                };
                /** @description metadata */
                metadata: {
                    [key: string]: unknown;
                };
                /** @description signatures */
                signatures: {
                    /** @description public key id */
                    public_key_id: string;
                    /** @description The signature itself */
                    signature: string;
                    /** @description The time the date was created */
                    created: string;
                }[];
                /** @description whether the package is deprecated */
                deprecated?: boolean | null;
                /** @description whether the package is yanked */
                yanked?: boolean | null;
            };
            /** @description A map of all the versions of the package */
            versions: {
                [key: string]: {
                    name: string;
                    scope?: string | null;
                    description?: string | null;
                    /** Version */
                    version: string;
                    /** Author */
                    author: {
                        name: string;
                        email: string;
                        avatar?: string | null;
                    };
                    language?: string | null;
                    created_at: string;
                    updated_at?: string | null;
                    /** @description readme info */
                    readme?: string | null;
                    /** @description info  */
                    info: {
                        [key: string]: unknown;
                    };
                    /** @description env */
                    env: {
                        [key: string]: unknown;
                    };
                    /** @description metadata */
                    metadata: {
                        [key: string]: unknown;
                    };
                    /** @description signatures */
                    signatures: {
                        /** @description public key id */
                        public_key_id: string;
                        /** @description The signature itself */
                        signature: string;
                        /** @description The time the date was created */
                        created: string;
                    }[];
                    /** @description whether the package is deprecated */
                    deprecated?: boolean | null;
                    /** @description whether the package is yanked */
                    yanked?: boolean | null;
                };
            };
        };
        /** GetPackagesResponse */
        GetPackagesResponse: {
            /** @description The next url for the next list of the packages */
            next_url?: string | null;
            /** @description The packages listed out */
            packages: {
                name: string;
                scope?: string | null;
                description?: string | null;
                /** Version */
                version: string;
                /** Author */
                author: {
                    name: string;
                    email: string;
                    avatar?: string | null;
                };
                language?: string | null;
                created_at: string;
                updated_at?: string | null;
            }[];
        };
        /** GetScopeResponse */
        GetScopeResponse: {
            /** @description The name of the organization */
            name: string;
            /** @description Whether the person requesting is a member */
            is_member: boolean;
        };
        /** GetUserResponse */
        GetUserResponse: {
            name: string;
            email: string;
            /** @description The time the user was created */
            created_at: string;
            /** @description The last time the user was updated */
            updated_at: string;
            /** @description Packages the user has worked on */
            packages: {
                name: string;
                /**
                 * UserPackageRelationship
                 * @enum {string}
                 */
                type: "author" | "contributor";
                privileges?: ("read" | "write" | "publish" | "ultimate")[] | null;
            }[];
        };
        /** GetUsersResponse */
        GetUsersResponse: Record<string, never>;
        /** InvalidError */
        InvalidError: {
            error?: string | null;
            description?: string | null;
            redirect?: string | null;
        };
        /** InvalidTarballError */
        InvalidTarballError: {
            error?: string | null;
            description: string;
            sanction: boolean;
            violations_remaining?: number | null;
        };
        /** NotFoundError */
        NotFoundError: {
            error?: string | null;
            message?: string | null;
        };
        /**
         * PublishPackageByVersionRequest
         * @description A request object to publish a given package
         */
        PublishPackageByVersionRequest: {
            /** @description The name of the package to publish */
            name: string;
            /** @description The scope of the package, if any */
            scope?: string | null;
            /**
             * Version
             * @description The version of the package to publish
             */
            version: string;
            /** @description The language of the package */
            language: string;
            /**
             * Configuration
             * @description The configuration info about the package
             */
            config: {
                /** @description The configuration file for the given project */
                path: string;
                /** @description The configuration values for the package */
                config?: {
                    [key: string]: unknown;
                } | null;
            };
            info?: {
                [key: string]: unknown;
            } | null;
            env?: {
                [key: string]: unknown;
            } | null;
            /**
             * VersionControlSystem
             * @description The version control system
             */
            vcs?: {
                /**
                 * VCS
                 * @enum {string}
                 */
                name: "git" | "svn" | "fossil" | "mercurial" | "other";
                /** Uri */
                url?: string | null;
            } | null;
        };
        /** PublishPackageByVersionResponse */
        PublishPackageByVersionResponse: {
            /** @description The URL to upload the API to, if any */
            url?: string | null;
            /**
             * Queue
             * @description The details
             */
            queue: {
                id: string;
                /**
                 * PublishingStatus
                 * @enum {string}
                 */
                status: "pending" | "error" | "success" | "idle" | "queue";
            };
        };
        /**
         * PublishPackageRequest
         * @description A request object to publish a given package
         */
        PublishPackageRequest: {
            /** @description The name of the package to publish */
            name: string;
            /** @description The scope of the package, if any */
            scope?: string | null;
            /**
             * Version
             * @description The version of the package to publish
             */
            version: string;
            /** @description The language of the package */
            language: string;
            /**
             * Configuration
             * @description The configuration info about the package
             */
            config: {
                /** @description The configuration file for the given project */
                path: string;
                /** @description The configuration values for the package */
                config?: {
                    [key: string]: unknown;
                } | null;
            };
            info?: {
                [key: string]: unknown;
            } | null;
            env?: {
                [key: string]: unknown;
            } | null;
            /**
             * VersionControlSystem
             * @description The version control system
             */
            vcs?: {
                /**
                 * VCS
                 * @enum {string}
                 */
                name: "git" | "svn" | "fossil" | "mercurial" | "other";
                /** Uri */
                url?: string | null;
            } | null;
        };
        /** PublishPackageResponse */
        PublishPackageResponse: {
            /** @description The URL to upload the API to, if any */
            url?: string | null;
            /**
             * Queue
             * @description The details
             */
            queue: {
                id: string;
                /**
                 * PublishingStatus
                 * @enum {string}
                 */
                status: "pending" | "error" | "success" | "idle" | "queue";
            };
        };
        /** PublishPackageStatusResponse */
        PublishPackageStatusResponse: {
            /**
             * PublishingStatus
             * @enum {string}
             */
            status: "pending" | "error" | "success" | "idle" | "queue";
            error?: string | null;
            description?: string | null;
            name: string;
            scope?: string | null;
            /** Version */
            version: string;
        };
        /**
         * ServerError
         * @description A server error, returned in the case of a 500 Server Error
         *
         *     Most of the time this is not what we want, but it is here for the sake of completeness
         */
        ServerError: {
            error?: string | null;
        };
        /** UnauthorizedError */
        UnauthorizedError: {
            error?: string | null;
            /**
             * UnauthorizedReason
             * @description The reason for not being authorized
             * @enum {string|null}
             */
            reason?: "protected" | "org" | "package_access" | "other" | null;
            /** @description a description */
            description?: string | null;
        };
        /** UploadAdapterResponse */
        UploadAdapterResponse: Record<string, never>;
        /** UploadPackageResponse */
        UploadPackageResponse: Record<string, never>;
        /** YankAdapterResponse */
        YankAdapterResponse: Record<string, never>;
        /** YankPackageByVersionResponse */
        YankPackageByVersionRequest: Record<string, never>;
        /** YankPackageByVersionRequest */
        YankPackageByVersionResponse: Record<string, never>;
        /**
         * YankPackageRequest
         * @description The schema of the request object for the add user endpoint `api/user/{id}`
         *
         *     The object gets important information such as necessary information for registering the user
         */
        YankPackageRequest: {
            /** @description The version of the package */
            version: string;
        };
        /**
         * YankPackageResponse
         * @description The schema of the request object for the add user endpoint ``
         *
         *     Returns the info about the yanked package
         */
        YankPackageResponse: Record<string, never>;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getPackages: {
        parameters: {
            query?: {
                /** @description The index of the paginated result */
                index?: string;
                /** @description Pass a user id to show */
                user?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "next_url": "https://example.com/foo",
                     *       "packages": [
                     *         {
                     *           "name": "pritt",
                     *           "description": "The Pritt Package itself!",
                     *           "version": "0.1.0",
                     *           "author": {
                     *             "name": "Pritt",
                     *             "email": "pritt@pritt.com"
                     *           },
                     *           "created_at": "2023-10-01T00:00:00Z"
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["GetPackagesResponse"];
                };
            };
        };
    };
    getPackageByName: {
        parameters: {
            query?: {
                /** @description The language associated with the package */
                lang?: string;
                /** @description Whether to get all the versions of the package, including yanked and deprecated versions */
                all?: boolean;
            };
            header?: never;
            path: {
                /** @description The name of the package */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {} */
                    "application/json": components["schemas"]["GetPackageResponse"];
                };
            };
            /** @description Not Found Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    publishPackage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the package */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PublishPackageRequest"];
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublishPackageResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized Response */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {} */
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
        };
    };
    yankPackageByName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the package */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["YankPackageRequest"];
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["YankPackageResponse"];
                };
            };
            /** @description Unauthorized Response */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
            /** @description Package Already Exists */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExistsError"];
                };
            };
            /** @description Not Found Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    getPackageByNameWithScope: {
        parameters: {
            query?: {
                /** @description The language associated with the package */
                lang?: string;
                /** @description Whether to get all the versions of the package, including yanked and deprecated versions */
                all?: boolean;
            };
            header?: never;
            path: {
                /** @description The scope for the given package */
                scope: string;
                /** @description The name of the package */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {} */
                    "application/json": components["schemas"]["GetPackageResponse"];
                };
            };
            /** @description Not Found Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    publishPackageWithScope: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The scope for the given package */
                scope: string;
                /** @description The name of the package */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PublishPackageRequest"];
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublishPackageResponse"];
                };
            };
            /** @description Unauthorized Response */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {} */
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
        };
    };
    yankPackageByNameWithScope: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The scope for the given package */
                scope: string;
                /** @description The name of the package */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["YankPackageRequest"];
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["YankPackageResponse"];
                };
            };
            /** @description Unauthorized Response */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
            /** @description Not Found Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    getPackageByNameWithVersion: {
        parameters: {
            query?: {
                /** @description The language associated with the package */
                lang?: string;
                /** @description Whether to get all the versions of the package, including yanked and deprecated versions */
                all?: boolean;
            };
            header?: never;
            path: {
                /** @description The name of the package */
                name: string;
                /** @description The version of the package */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "name": "pkg",
                     *       "description": "A starter package",
                     *       "version": "0.1.0",
                     *       "author": {
                     *         "name": "pritt",
                     *         "email": "pritt@pritt.com"
                     *       },
                     *       "contributors": [],
                     *       "language": "cplusplus",
                     *       "created_at": "",
                     *       "info": {},
                     *       "env": {},
                     *       "metadata": {},
                     *       "signatures": [],
                     *       "readme": "# pkg\nA great starting point for packages"
                     *     } */
                    "application/json": components["schemas"]["GetPackageByVersionResponse"];
                };
            };
            /** @description Not Found Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    publishPackageVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the package */
                name: string;
                /** @description The version of the package */
                version: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PublishPackageByVersionRequest"];
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublishPackageByVersionResponse"];
                };
            };
            /** @description Unauthorized Response */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {} */
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
        };
    };
    yankPackageVersionByName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the package */
                name: string;
                /** @description The version of the package */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["YankPackageByVersionRequest"];
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["YankPackageByVersionResponse"];
                };
            };
            /** @description Unauthorized Response */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
            /** @description Not Found Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    getPackageByNameWithScopeAndVersion: {
        parameters: {
            query?: {
                /** @description The language associated with the package */
                lang?: string;
                /** @description Whether to get all the versions of the package, including yanked and deprecated versions */
                all?: boolean;
            };
            header?: never;
            path: {
                /** @description The scope for the given package */
                scope: string;
                /** @description The name of the package */
                name: string;
                /** @description The version of the package */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "name": "pkg",
                     *       "description": "A starter package",
                     *       "version": "0.1.0",
                     *       "author": {
                     *         "name": "pritt",
                     *         "email": "pritt@pritt.com"
                     *       },
                     *       "contributors": [],
                     *       "language": "cplusplus",
                     *       "created_at": "",
                     *       "info": {},
                     *       "env": {},
                     *       "metadata": {},
                     *       "signatures": [],
                     *       "readme": "# pkg\nA great starting point for packages"
                     *     } */
                    "application/json": components["schemas"]["GetPackageByVersionResponse"];
                };
            };
            /** @description Not Found Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    publishPackageWithScopeAndVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The scope for the given package */
                scope: string;
                /** @description The name of the package */
                name: string;
                /** @description The version of the package */
                version: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PublishPackageByVersionRequest"];
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublishPackageByVersionResponse"];
                };
            };
            /** @description Unauthorized Response */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {} */
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
        };
    };
    yankPackageByNameWithScopeAndVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The scope for the given package */
                scope: string;
                /** @description The name of the package */
                name: string;
                /** @description The version of the package */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["YankPackageByVersionRequest"];
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["YankPackageByVersionResponse"];
                };
            };
            /** @description Unauthorized Response */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
            /** @description Not Found Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    uploadPackageWithToken: {
        parameters: {
            query: {
                /** @description The token id of the package used to identify the package */
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/gzip": string;
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadPackageResponse"];
                };
            };
            /** @description Unauthorized Response */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {} */
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
            /** @description Token Expired */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {} */
                    "application/json": components["schemas"]["UnauthorizedError"];
                };
            };
            /** @description Invalid Tarball */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidTarballError"];
                };
            };
            /** @description Not Found Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {} */
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    getPackagePubStatus: {
        parameters: {
            query: {
                /** @description The Package Publishing ID */
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublishPackageStatusResponse"];
                };
            };
        };
    };
    getUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Normal response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUsersResponse"];
                };
            };
        };
    };
    getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the user */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserResponse"];
                };
            };
            /** @description Not Found Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    addUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the user */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddUserRequest"];
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddUserResponse"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserResponse"];
                };
            };
            /** @description Not Found Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    getOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The scope name */
                scope: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "name": "ramen",
                     *       "is_member": true
                     *     } */
                    "application/json": components["schemas"]["GetScopeResponse"];
                };
            };
        };
    };
    getOrgPackages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The scope name */
                scope: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "next_url": "https://example.com/foo",
                     *       "packages": [
                     *         {
                     *           "name": "pritt",
                     *           "description": "The Pritt Package itself!",
                     *           "version": "0.1.0",
                     *           "author": {
                     *             "name": "Pritt",
                     *             "email": "pritt@pritt.com"
                     *           },
                     *           "created_at": "2023-10-01T00:00:00Z"
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["GetPackagesResponse"];
                };
            };
        };
    };
    getAdapters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAdaptersResponse"];
                };
            };
        };
    };
    getAdapterById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the adapter */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAdapterResponse"];
                };
            };
        };
    };
    addAdapterWithId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the adapter */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddAdapterRequest"];
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddAdapterResponse"];
                };
            };
        };
    };
    yankAdapterWithId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the adapter */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["YankAdapterResponse"];
                };
            };
        };
    };
    uploadAdapterWithToken: {
        parameters: {
            query: {
                /** @description The token id of the adapter used to identify the adapter */
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/gzip": string;
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadAdapterResponse"];
                };
            };
        };
    };
    getAdaptersByLang: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAdaptersByLangResponse"];
                };
            };
        };
    };
    createNewAuthStatus: {
        parameters: {
            query?: {
                /** @description The Device ID used to identify the CLI source */
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerError"];
                };
            };
        };
    };
    getAuthDetailsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The Session ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthDetailsResponse"];
                };
            };
            /** @description Not Found Response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
        };
    };
    validateAuthStatus: {
        parameters: {
            query: {
                /** @description The token created from the `/api/auth` */
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The request body containing all the information needed to validate a user's status */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AuthValidateRequest"];
            };
        };
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthValidateResponse"];
                };
            };
            /** @description Authorization did not complete or errored out */
            402: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthError"];
                };
            };
            /** @description Expired Token Response */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpiredError"];
                };
            };
        };
    };
    getAuthStatus: {
        parameters: {
            query: {
                /** @description The Session ID */
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthPollResponse"];
                };
            };
            /** @description Could not find the token specified */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundError"];
                };
            };
            /** @description Expired Token Response */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpiredError"];
                };
            };
        };
    };
    getPackageArchiveWithName: {
        parameters: {
            query?: {
                /** @description The version of the package to unpack */
                version?: string;
            };
            header?: never;
            path: {
                /** @description The name of the adapter, or an identifier associated with it */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/gzip": string;
                };
            };
        };
    };
    getAdapterArchiveWithName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the adapter, or an identifier associated with it */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/gzip": string;
                };
            };
        };
    };
}
