// ignore_for_file: unused_element, unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to OpenSSL for ECDSA Signing/Verifying
class OpenSSL {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OpenSSL(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OpenSSL.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get stdinp => _stdinp.value;

  set stdinp(ffi.Pointer<FILE> value) => _stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get stdoutp => _stdoutp.value;

  set stdoutp(ffi.Pointer<FILE> value) => _stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get stderrp => _stderrp.value;

  set stderrp(ffi.Pointer<FILE> value) => _stderrp.value = value;

  /// perror(3) external variables
  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  late final ffi.Pointer<ffi.Int> _mb_cur_max = _lookup<ffi.Int>(
    '__mb_cur_max',
  );

  int get mb_cur_max => _mb_cur_max.value;

  set mb_cur_max(int value) => _mb_cur_max.value = value;

  /// getsubopt(3) external variable
  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int> _getdate_err = _lookup<ffi.Int>(
    'getdate_err',
  );

  int get getdate_err => _getdate_err.value;

  set getdate_err(int value) => _getdate_err.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  int ERR_load_ASN1_strings() {
    return _ERR_load_ASN1_strings();
  }

  late final _ERR_load_ASN1_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_ASN1_strings');
  late final _ERR_load_ASN1_strings =
      _ERR_load_ASN1_stringsPtr.asFunction<int Function()>();

  int ERR_load_ASYNC_strings() {
    return _ERR_load_ASYNC_strings();
  }

  late final _ERR_load_ASYNC_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_ASYNC_strings');
  late final _ERR_load_ASYNC_strings =
      _ERR_load_ASYNC_stringsPtr.asFunction<int Function()>();

  int ERR_load_BIO_strings() {
    return _ERR_load_BIO_strings();
  }

  late final _ERR_load_BIO_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_BIO_strings');
  late final _ERR_load_BIO_strings =
      _ERR_load_BIO_stringsPtr.asFunction<int Function()>();

  int ERR_load_BN_strings() {
    return _ERR_load_BN_strings();
  }

  late final _ERR_load_BN_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_BN_strings');
  late final _ERR_load_BN_strings =
      _ERR_load_BN_stringsPtr.asFunction<int Function()>();

  int ERR_load_BUF_strings() {
    return _ERR_load_BUF_strings();
  }

  late final _ERR_load_BUF_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_BUF_strings');
  late final _ERR_load_BUF_strings =
      _ERR_load_BUF_stringsPtr.asFunction<int Function()>();

  int ERR_load_CMS_strings() {
    return _ERR_load_CMS_strings();
  }

  late final _ERR_load_CMS_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_CMS_strings');
  late final _ERR_load_CMS_strings =
      _ERR_load_CMS_stringsPtr.asFunction<int Function()>();

  int ERR_load_COMP_strings() {
    return _ERR_load_COMP_strings();
  }

  late final _ERR_load_COMP_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_COMP_strings');
  late final _ERR_load_COMP_strings =
      _ERR_load_COMP_stringsPtr.asFunction<int Function()>();

  int ERR_load_CONF_strings() {
    return _ERR_load_CONF_strings();
  }

  late final _ERR_load_CONF_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_CONF_strings');
  late final _ERR_load_CONF_strings =
      _ERR_load_CONF_stringsPtr.asFunction<int Function()>();

  int ERR_load_CRYPTO_strings() {
    return _ERR_load_CRYPTO_strings();
  }

  late final _ERR_load_CRYPTO_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
        'ERR_load_CRYPTO_strings',
      );
  late final _ERR_load_CRYPTO_strings =
      _ERR_load_CRYPTO_stringsPtr.asFunction<int Function()>();

  int ERR_load_CT_strings() {
    return _ERR_load_CT_strings();
  }

  late final _ERR_load_CT_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_CT_strings');
  late final _ERR_load_CT_strings =
      _ERR_load_CT_stringsPtr.asFunction<int Function()>();

  int ERR_load_DH_strings() {
    return _ERR_load_DH_strings();
  }

  late final _ERR_load_DH_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_DH_strings');
  late final _ERR_load_DH_strings =
      _ERR_load_DH_stringsPtr.asFunction<int Function()>();

  int ERR_load_DSA_strings() {
    return _ERR_load_DSA_strings();
  }

  late final _ERR_load_DSA_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_DSA_strings');
  late final _ERR_load_DSA_strings =
      _ERR_load_DSA_stringsPtr.asFunction<int Function()>();

  int ERR_load_EC_strings() {
    return _ERR_load_EC_strings();
  }

  late final _ERR_load_EC_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_EC_strings');
  late final _ERR_load_EC_strings =
      _ERR_load_EC_stringsPtr.asFunction<int Function()>();

  int ERR_load_ENGINE_strings() {
    return _ERR_load_ENGINE_strings();
  }

  late final _ERR_load_ENGINE_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
        'ERR_load_ENGINE_strings',
      );
  late final _ERR_load_ENGINE_strings =
      _ERR_load_ENGINE_stringsPtr.asFunction<int Function()>();

  int ERR_load_ERR_strings() {
    return _ERR_load_ERR_strings();
  }

  late final _ERR_load_ERR_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_ERR_strings');
  late final _ERR_load_ERR_strings =
      _ERR_load_ERR_stringsPtr.asFunction<int Function()>();

  int ERR_load_EVP_strings() {
    return _ERR_load_EVP_strings();
  }

  late final _ERR_load_EVP_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_EVP_strings');
  late final _ERR_load_EVP_strings =
      _ERR_load_EVP_stringsPtr.asFunction<int Function()>();

  int ERR_load_KDF_strings() {
    return _ERR_load_KDF_strings();
  }

  late final _ERR_load_KDF_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_KDF_strings');
  late final _ERR_load_KDF_strings =
      _ERR_load_KDF_stringsPtr.asFunction<int Function()>();

  int ERR_load_OBJ_strings() {
    return _ERR_load_OBJ_strings();
  }

  late final _ERR_load_OBJ_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_OBJ_strings');
  late final _ERR_load_OBJ_strings =
      _ERR_load_OBJ_stringsPtr.asFunction<int Function()>();

  int ERR_load_OCSP_strings() {
    return _ERR_load_OCSP_strings();
  }

  late final _ERR_load_OCSP_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_OCSP_strings');
  late final _ERR_load_OCSP_strings =
      _ERR_load_OCSP_stringsPtr.asFunction<int Function()>();

  int ERR_load_PEM_strings() {
    return _ERR_load_PEM_strings();
  }

  late final _ERR_load_PEM_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_PEM_strings');
  late final _ERR_load_PEM_strings =
      _ERR_load_PEM_stringsPtr.asFunction<int Function()>();

  int ERR_load_PKCS12_strings() {
    return _ERR_load_PKCS12_strings();
  }

  late final _ERR_load_PKCS12_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
        'ERR_load_PKCS12_strings',
      );
  late final _ERR_load_PKCS12_strings =
      _ERR_load_PKCS12_stringsPtr.asFunction<int Function()>();

  int ERR_load_PKCS7_strings() {
    return _ERR_load_PKCS7_strings();
  }

  late final _ERR_load_PKCS7_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_PKCS7_strings');
  late final _ERR_load_PKCS7_strings =
      _ERR_load_PKCS7_stringsPtr.asFunction<int Function()>();

  int ERR_load_RAND_strings() {
    return _ERR_load_RAND_strings();
  }

  late final _ERR_load_RAND_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_RAND_strings');
  late final _ERR_load_RAND_strings =
      _ERR_load_RAND_stringsPtr.asFunction<int Function()>();

  int ERR_load_RSA_strings() {
    return _ERR_load_RSA_strings();
  }

  late final _ERR_load_RSA_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_RSA_strings');
  late final _ERR_load_RSA_strings =
      _ERR_load_RSA_stringsPtr.asFunction<int Function()>();

  int ERR_load_OSSL_STORE_strings() {
    return _ERR_load_OSSL_STORE_strings();
  }

  late final _ERR_load_OSSL_STORE_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
        'ERR_load_OSSL_STORE_strings',
      );
  late final _ERR_load_OSSL_STORE_strings =
      _ERR_load_OSSL_STORE_stringsPtr.asFunction<int Function()>();

  int ERR_load_TS_strings() {
    return _ERR_load_TS_strings();
  }

  late final _ERR_load_TS_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_TS_strings');
  late final _ERR_load_TS_strings =
      _ERR_load_TS_stringsPtr.asFunction<int Function()>();

  int ERR_load_UI_strings() {
    return _ERR_load_UI_strings();
  }

  late final _ERR_load_UI_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_UI_strings');
  late final _ERR_load_UI_strings =
      _ERR_load_UI_stringsPtr.asFunction<int Function()>();

  int ERR_load_X509_strings() {
    return _ERR_load_X509_strings();
  }

  late final _ERR_load_X509_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_X509_strings');
  late final _ERR_load_X509_strings =
      _ERR_load_X509_stringsPtr.asFunction<int Function()>();

  int ERR_load_X509V3_strings() {
    return _ERR_load_X509V3_strings();
  }

  late final _ERR_load_X509V3_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
        'ERR_load_X509V3_strings',
      );
  late final _ERR_load_X509V3_strings =
      _ERR_load_X509V3_stringsPtr.asFunction<int Function()>();

  int OPENSSL_init_crypto(
    int opts,
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
  ) {
    return _OPENSSL_init_crypto(opts, settings);
  }

  late final _OPENSSL_init_cryptoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Uint64, ffi.Pointer<OPENSSL_INIT_SETTINGS>)
        >
      >('OPENSSL_init_crypto');
  late final _OPENSSL_init_crypto =
      _OPENSSL_init_cryptoPtr.asFunction<
        int Function(int, ffi.Pointer<OPENSSL_INIT_SETTINGS>)
      >();

  /// Building blocks
  void ERR_new() {
    return _ERR_new();
  }

  late final _ERR_newPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>(
    'ERR_new',
  );
  late final _ERR_new = _ERR_newPtr.asFunction<void Function()>();

  void ERR_set_debug(
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
  ) {
    return _ERR_set_debug(file, line, func);
  }

  late final _ERR_set_debugPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('ERR_set_debug');
  late final _ERR_set_debug =
      _ERR_set_debugPtr.asFunction<
        void Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)
      >();

  void ERR_set_error(int lib, int reason, ffi.Pointer<ffi.Char> fmt) {
    return _ERR_set_error(lib, reason, fmt);
  }

  late final _ERR_set_errorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)
        >
      >('ERR_set_error');
  late final _ERR_set_error =
      _ERR_set_errorPtr.asFunction<
        void Function(int, int, ffi.Pointer<ffi.Char>)
      >();

  void ERR_vset_error(
    int lib,
    int reason,
    ffi.Pointer<ffi.Char> fmt,
    va_list args,
  ) {
    return _ERR_vset_error(lib, reason, fmt, args);
  }

  late final _ERR_vset_errorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>, va_list)
        >
      >('ERR_vset_error');
  late final _ERR_vset_error =
      _ERR_vset_errorPtr.asFunction<
        void Function(int, int, ffi.Pointer<ffi.Char>, va_list)
      >();

  void ERR_set_error_data(ffi.Pointer<ffi.Char> data, int flags) {
    return _ERR_set_error_data(data, flags);
  }

  late final _ERR_set_error_dataPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>
      >('ERR_set_error_data');
  late final _ERR_set_error_data =
      _ERR_set_error_dataPtr.asFunction<
        void Function(ffi.Pointer<ffi.Char>, int)
      >();

  int ERR_get_error() {
    return _ERR_get_error();
  }

  late final _ERR_get_errorPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>('ERR_get_error');
  late final _ERR_get_error = _ERR_get_errorPtr.asFunction<int Function()>();

  int ERR_get_error_all(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> func,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_get_error_all(file, line, func, data, flags);
  }

  late final _ERR_get_error_allPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_get_error_all');
  late final _ERR_get_error_all =
      _ERR_get_error_allPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int ERR_get_error_line(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
  ) {
    return _ERR_get_error_line(file, line);
  }

  late final _ERR_get_error_linePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_get_error_line');
  late final _ERR_get_error_line =
      _ERR_get_error_linePtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)
      >();

  int ERR_get_error_line_data(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_get_error_line_data(file, line, data, flags);
  }

  late final _ERR_get_error_line_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_get_error_line_data');
  late final _ERR_get_error_line_data =
      _ERR_get_error_line_dataPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int ERR_peek_error() {
    return _ERR_peek_error();
  }

  late final _ERR_peek_errorPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
        'ERR_peek_error',
      );
  late final _ERR_peek_error = _ERR_peek_errorPtr.asFunction<int Function()>();

  int ERR_peek_error_line(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
  ) {
    return _ERR_peek_error_line(file, line);
  }

  late final _ERR_peek_error_linePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_peek_error_line');
  late final _ERR_peek_error_line =
      _ERR_peek_error_linePtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)
      >();

  int ERR_peek_error_func(ffi.Pointer<ffi.Pointer<ffi.Char>> func) {
    return _ERR_peek_error_func(func);
  }

  late final _ERR_peek_error_funcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)
        >
      >('ERR_peek_error_func');
  late final _ERR_peek_error_func =
      _ERR_peek_error_funcPtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)
      >();

  int ERR_peek_error_data(
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_peek_error_data(data, flags);
  }

  late final _ERR_peek_error_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_peek_error_data');
  late final _ERR_peek_error_data =
      _ERR_peek_error_dataPtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)
      >();

  int ERR_peek_error_all(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> func,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_peek_error_all(file, line, func, data, flags);
  }

  late final _ERR_peek_error_allPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_peek_error_all');
  late final _ERR_peek_error_all =
      _ERR_peek_error_allPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int ERR_peek_error_line_data(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_peek_error_line_data(file, line, data, flags);
  }

  late final _ERR_peek_error_line_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_peek_error_line_data');
  late final _ERR_peek_error_line_data =
      _ERR_peek_error_line_dataPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int ERR_peek_last_error() {
    return _ERR_peek_last_error();
  }

  late final _ERR_peek_last_errorPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
        'ERR_peek_last_error',
      );
  late final _ERR_peek_last_error =
      _ERR_peek_last_errorPtr.asFunction<int Function()>();

  int ERR_peek_last_error_line(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
  ) {
    return _ERR_peek_last_error_line(file, line);
  }

  late final _ERR_peek_last_error_linePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_peek_last_error_line');
  late final _ERR_peek_last_error_line =
      _ERR_peek_last_error_linePtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)
      >();

  int ERR_peek_last_error_func(ffi.Pointer<ffi.Pointer<ffi.Char>> func) {
    return _ERR_peek_last_error_func(func);
  }

  late final _ERR_peek_last_error_funcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)
        >
      >('ERR_peek_last_error_func');
  late final _ERR_peek_last_error_func =
      _ERR_peek_last_error_funcPtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)
      >();

  int ERR_peek_last_error_data(
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_peek_last_error_data(data, flags);
  }

  late final _ERR_peek_last_error_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_peek_last_error_data');
  late final _ERR_peek_last_error_data =
      _ERR_peek_last_error_dataPtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)
      >();

  int ERR_peek_last_error_all(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> func,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_peek_last_error_all(file, line, func, data, flags);
  }

  late final _ERR_peek_last_error_allPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_peek_last_error_all');
  late final _ERR_peek_last_error_all =
      _ERR_peek_last_error_allPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int ERR_peek_last_error_line_data(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_peek_last_error_line_data(file, line, data, flags);
  }

  late final _ERR_peek_last_error_line_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_peek_last_error_line_data');
  late final _ERR_peek_last_error_line_data =
      _ERR_peek_last_error_line_dataPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  void ERR_clear_error() {
    return _ERR_clear_error();
  }

  late final _ERR_clear_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ERR_clear_error');
  late final _ERR_clear_error =
      _ERR_clear_errorPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> ERR_error_string(int e, ffi.Pointer<ffi.Char> buf) {
    return _ERR_error_string(e, buf);
  }

  late final _ERR_error_stringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.UnsignedLong,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('ERR_error_string');
  late final _ERR_error_string =
      _ERR_error_stringPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)
      >();

  void ERR_error_string_n(int e, ffi.Pointer<ffi.Char> buf, int len) {
    return _ERR_error_string_n(e, buf, len);
  }

  late final _ERR_error_string_nPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Size)
        >
      >('ERR_error_string_n');
  late final _ERR_error_string_n =
      _ERR_error_string_nPtr.asFunction<
        void Function(int, ffi.Pointer<ffi.Char>, int)
      >();

  ffi.Pointer<ffi.Char> ERR_lib_error_string(int e) {
    return _ERR_lib_error_string(e);
  }

  late final _ERR_lib_error_stringPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedLong)>
      >('ERR_lib_error_string');
  late final _ERR_lib_error_string =
      _ERR_lib_error_stringPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(int)
      >();

  ffi.Pointer<ffi.Char> ERR_func_error_string(int e) {
    return _ERR_func_error_string(e);
  }

  late final _ERR_func_error_stringPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedLong)>
      >('ERR_func_error_string');
  late final _ERR_func_error_string =
      _ERR_func_error_stringPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(int)
      >();

  ffi.Pointer<ffi.Char> ERR_reason_error_string(int e) {
    return _ERR_reason_error_string(e);
  }

  late final _ERR_reason_error_stringPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedLong)>
      >('ERR_reason_error_string');
  late final _ERR_reason_error_string =
      _ERR_reason_error_stringPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(int)
      >();

  void ERR_print_errors_cb(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(
          ffi.Pointer<ffi.Char> str,
          ffi.Size len,
          ffi.Pointer<ffi.Void> u,
        )
      >
    >
    cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _ERR_print_errors_cb(cb, u);
  }

  late final _ERR_print_errors_cbPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<ffi.Char> str,
                  ffi.Size len,
                  ffi.Pointer<ffi.Void> u,
                )
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('ERR_print_errors_cb');
  late final _ERR_print_errors_cb =
      _ERR_print_errors_cbPtr.asFunction<
        void Function(
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(
                ffi.Pointer<ffi.Char> str,
                ffi.Size len,
                ffi.Pointer<ffi.Void> u,
              )
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void ERR_print_errors_fp(ffi.Pointer<FILE> fp) {
    return _ERR_print_errors_fp(fp);
  }

  late final _ERR_print_errors_fpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
        'ERR_print_errors_fp',
      );
  late final _ERR_print_errors_fp =
      _ERR_print_errors_fpPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void ERR_print_errors(ffi.Pointer<BIO> bp) {
    return _ERR_print_errors(bp);
  }

  late final _ERR_print_errorsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
        'ERR_print_errors',
      );
  late final _ERR_print_errors =
      _ERR_print_errorsPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  void ERR_add_error_data(int num) {
    return _ERR_add_error_data(num);
  }

  late final _ERR_add_error_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
        'ERR_add_error_data',
      );
  late final _ERR_add_error_data =
      _ERR_add_error_dataPtr.asFunction<void Function(int)>();

  void ERR_add_error_vdata(int num, va_list args) {
    return _ERR_add_error_vdata(num, args);
  }

  late final _ERR_add_error_vdataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, va_list)>>(
        'ERR_add_error_vdata',
      );
  late final _ERR_add_error_vdata =
      _ERR_add_error_vdataPtr.asFunction<void Function(int, va_list)>();

  void ERR_add_error_txt(
    ffi.Pointer<ffi.Char> sepr,
    ffi.Pointer<ffi.Char> txt,
  ) {
    return _ERR_add_error_txt(sepr, txt);
  }

  late final _ERR_add_error_txtPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
        >
      >('ERR_add_error_txt');
  late final _ERR_add_error_txt =
      _ERR_add_error_txtPtr.asFunction<
        void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
      >();

  void ERR_add_error_mem_bio(ffi.Pointer<ffi.Char> sep, ffi.Pointer<BIO> bio) {
    return _ERR_add_error_mem_bio(sep, bio);
  }

  late final _ERR_add_error_mem_bioPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<BIO>)
        >
      >('ERR_add_error_mem_bio');
  late final _ERR_add_error_mem_bio =
      _ERR_add_error_mem_bioPtr.asFunction<
        void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<BIO>)
      >();

  int ERR_load_strings(int lib, ffi.Pointer<ERR_STRING_DATA> str) {
    return _ERR_load_strings(lib, str);
  }

  late final _ERR_load_stringsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ERR_STRING_DATA>)
        >
      >('ERR_load_strings');
  late final _ERR_load_strings =
      _ERR_load_stringsPtr.asFunction<
        int Function(int, ffi.Pointer<ERR_STRING_DATA>)
      >();

  int ERR_load_strings_const(ffi.Pointer<ERR_STRING_DATA> str) {
    return _ERR_load_strings_const(str);
  }

  late final _ERR_load_strings_constPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ERR_STRING_DATA>)>
      >('ERR_load_strings_const');
  late final _ERR_load_strings_const =
      _ERR_load_strings_constPtr.asFunction<
        int Function(ffi.Pointer<ERR_STRING_DATA>)
      >();

  int ERR_unload_strings(int lib, ffi.Pointer<ERR_STRING_DATA> str) {
    return _ERR_unload_strings(lib, str);
  }

  late final _ERR_unload_stringsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ERR_STRING_DATA>)
        >
      >('ERR_unload_strings');
  late final _ERR_unload_strings =
      _ERR_unload_stringsPtr.asFunction<
        int Function(int, ffi.Pointer<ERR_STRING_DATA>)
      >();

  void ERR_remove_thread_state(ffi.Pointer<ffi.Void> arg0) {
    return _ERR_remove_thread_state(arg0);
  }

  late final _ERR_remove_thread_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
        'ERR_remove_thread_state',
      );
  late final _ERR_remove_thread_state =
      _ERR_remove_thread_statePtr.asFunction<
        void Function(ffi.Pointer<ffi.Void>)
      >();

  void ERR_remove_state(int pid) {
    return _ERR_remove_state(pid);
  }

  late final _ERR_remove_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
        'ERR_remove_state',
      );
  late final _ERR_remove_state =
      _ERR_remove_statePtr.asFunction<void Function(int)>();

  ffi.Pointer<ERR_STATE> ERR_get_state() {
    return _ERR_get_state();
  }

  late final _ERR_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ERR_STATE> Function()>>(
        'ERR_get_state',
      );
  late final _ERR_get_state =
      _ERR_get_statePtr.asFunction<ffi.Pointer<ERR_STATE> Function()>();

  int ERR_get_next_error_library() {
    return _ERR_get_next_error_library();
  }

  late final _ERR_get_next_error_libraryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
        'ERR_get_next_error_library',
      );
  late final _ERR_get_next_error_library =
      _ERR_get_next_error_libraryPtr.asFunction<int Function()>();

  int ERR_set_mark() {
    return _ERR_set_mark();
  }

  late final _ERR_set_markPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'ERR_set_mark',
  );
  late final _ERR_set_mark = _ERR_set_markPtr.asFunction<int Function()>();

  int ERR_pop_to_mark() {
    return _ERR_pop_to_mark();
  }

  late final _ERR_pop_to_markPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_pop_to_mark');
  late final _ERR_pop_to_mark =
      _ERR_pop_to_markPtr.asFunction<int Function()>();

  int ERR_clear_last_mark() {
    return _ERR_clear_last_mark();
  }

  late final _ERR_clear_last_markPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_clear_last_mark');
  late final _ERR_clear_last_mark =
      _ERR_clear_last_markPtr.asFunction<int Function()>();

  void BN_set_flags(ffi.Pointer<BIGNUM> b, int n) {
    return _BN_set_flags(b, n);
  }

  late final _BN_set_flagsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Int)>
      >('BN_set_flags');
  late final _BN_set_flags =
      _BN_set_flagsPtr.asFunction<void Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_get_flags(ffi.Pointer<BIGNUM> b, int n) {
    return _BN_get_flags(b, n);
  }

  late final _BN_get_flagsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>
      >('BN_get_flags');
  late final _BN_get_flags =
      _BN_get_flagsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  /// get a clone of a BIGNUM with changed flags, for *temporary* use only (the
  /// two BIGNUMs cannot be used in parallel!). Also only for *read only* use. The
  /// value |dest| should be a newly allocated BIGNUM obtained via BN_new() that
  /// has not been otherwise initialised or used.
  void BN_with_flags(
    ffi.Pointer<BIGNUM> dest,
    ffi.Pointer<BIGNUM> b,
    int flags,
  ) {
    return _BN_with_flags(dest, b, flags);
  }

  late final _BN_with_flagsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int)
        >
      >('BN_with_flags');
  late final _BN_with_flags =
      _BN_with_flagsPtr.asFunction<
        void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)
      >();

  /// Wrapper function to make using BN_GENCB easier
  int BN_GENCB_call(ffi.Pointer<BN_GENCB> cb, int a, int b) {
    return _BN_GENCB_call(cb, a, b);
  }

  late final _BN_GENCB_callPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BN_GENCB>, ffi.Int, ffi.Int)
        >
      >('BN_GENCB_call');
  late final _BN_GENCB_call =
      _BN_GENCB_callPtr.asFunction<
        int Function(ffi.Pointer<BN_GENCB>, int, int)
      >();

  ffi.Pointer<BN_GENCB> BN_GENCB_new() {
    return _BN_GENCB_new();
  }

  late final _BN_GENCB_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_GENCB> Function()>>(
        'BN_GENCB_new',
      );
  late final _BN_GENCB_new =
      _BN_GENCB_newPtr.asFunction<ffi.Pointer<BN_GENCB> Function()>();

  void BN_GENCB_free(ffi.Pointer<BN_GENCB> cb) {
    return _BN_GENCB_free(cb);
  }

  late final _BN_GENCB_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_GENCB>)>>(
        'BN_GENCB_free',
      );
  late final _BN_GENCB_free =
      _BN_GENCB_freePtr.asFunction<void Function(ffi.Pointer<BN_GENCB>)>();

  /// Populate a BN_GENCB structure with an "old"-style callback
  void BN_GENCB_set_old(
    ffi.Pointer<BN_GENCB> gencb,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
      >
    >
    callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_GENCB_set_old(gencb, callback, cb_arg);
  }

  late final _BN_GENCB_set_oldPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<BN_GENCB>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('BN_GENCB_set_old');
  late final _BN_GENCB_set_old =
      _BN_GENCB_set_oldPtr.asFunction<
        void Function(
          ffi.Pointer<BN_GENCB>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  /// Populate a BN_GENCB structure with a "new"-style callback
  void BN_GENCB_set(
    ffi.Pointer<BN_GENCB> gencb,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)
      >
    >
    callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_GENCB_set(gencb, callback, cb_arg);
  }

  late final _BN_GENCB_setPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<BN_GENCB>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('BN_GENCB_set');
  late final _BN_GENCB_set =
      _BN_GENCB_setPtr.asFunction<
        void Function(
          ffi.Pointer<BN_GENCB>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  ffi.Pointer<ffi.Void> BN_GENCB_get_arg(ffi.Pointer<BN_GENCB> cb) {
    return _BN_GENCB_get_arg(cb);
  }

  late final _BN_GENCB_get_argPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<BN_GENCB>)
        >
      >('BN_GENCB_get_arg');
  late final _BN_GENCB_get_arg =
      _BN_GENCB_get_argPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<BN_GENCB>)
      >();

  int BN_abs_is_word(ffi.Pointer<BIGNUM> a, int w) {
    return _BN_abs_is_word(a, w);
  }

  late final _BN_abs_is_wordPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.UnsignedLong)
        >
      >('BN_abs_is_word');
  late final _BN_abs_is_word =
      _BN_abs_is_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_zero(ffi.Pointer<BIGNUM> a) {
    return _BN_is_zero(a);
  }

  late final _BN_is_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
        'BN_is_zero',
      );
  late final _BN_is_zero =
      _BN_is_zeroPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_one(ffi.Pointer<BIGNUM> a) {
    return _BN_is_one(a);
  }

  late final _BN_is_onePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
        'BN_is_one',
      );
  late final _BN_is_one =
      _BN_is_onePtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_word(ffi.Pointer<BIGNUM> a, int w) {
    return _BN_is_word(a, w);
  }

  late final _BN_is_wordPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.UnsignedLong)
        >
      >('BN_is_word');
  late final _BN_is_word =
      _BN_is_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_odd(ffi.Pointer<BIGNUM> a) {
    return _BN_is_odd(a);
  }

  late final _BN_is_oddPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
        'BN_is_odd',
      );
  late final _BN_is_odd =
      _BN_is_oddPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  void BN_zero_ex(ffi.Pointer<BIGNUM> a) {
    return _BN_zero_ex(a);
  }

  late final _BN_zero_exPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
        'BN_zero_ex',
      );
  late final _BN_zero_ex =
      _BN_zero_exPtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_value_one() {
    return _BN_value_one();
  }

  late final _BN_value_onePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
        'BN_value_one',
      );
  late final _BN_value_one =
      _BN_value_onePtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<ffi.Char> BN_options() {
    return _BN_options();
  }

  late final _BN_optionsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
        'BN_options',
      );
  late final _BN_options =
      _BN_optionsPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<BN_CTX> BN_CTX_new_ex(ffi.Pointer<OSSL_LIB_CTX> ctx) {
    return _BN_CTX_new_ex(ctx);
  }

  late final _BN_CTX_new_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BN_CTX> Function(ffi.Pointer<OSSL_LIB_CTX>)
        >
      >('BN_CTX_new_ex');
  late final _BN_CTX_new_ex =
      _BN_CTX_new_exPtr.asFunction<
        ffi.Pointer<BN_CTX> Function(ffi.Pointer<OSSL_LIB_CTX>)
      >();

  ffi.Pointer<BN_CTX> BN_CTX_new() {
    return _BN_CTX_new();
  }

  late final _BN_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_CTX> Function()>>('BN_CTX_new');
  late final _BN_CTX_new =
      _BN_CTX_newPtr.asFunction<ffi.Pointer<BN_CTX> Function()>();

  ffi.Pointer<BN_CTX> BN_CTX_secure_new_ex(ffi.Pointer<OSSL_LIB_CTX> ctx) {
    return _BN_CTX_secure_new_ex(ctx);
  }

  late final _BN_CTX_secure_new_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BN_CTX> Function(ffi.Pointer<OSSL_LIB_CTX>)
        >
      >('BN_CTX_secure_new_ex');
  late final _BN_CTX_secure_new_ex =
      _BN_CTX_secure_new_exPtr.asFunction<
        ffi.Pointer<BN_CTX> Function(ffi.Pointer<OSSL_LIB_CTX>)
      >();

  ffi.Pointer<BN_CTX> BN_CTX_secure_new() {
    return _BN_CTX_secure_new();
  }

  late final _BN_CTX_secure_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_CTX> Function()>>(
        'BN_CTX_secure_new',
      );
  late final _BN_CTX_secure_new =
      _BN_CTX_secure_newPtr.asFunction<ffi.Pointer<BN_CTX> Function()>();

  void BN_CTX_free(ffi.Pointer<BN_CTX> c) {
    return _BN_CTX_free(c);
  }

  late final _BN_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
        'BN_CTX_free',
      );
  late final _BN_CTX_free =
      _BN_CTX_freePtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  void BN_CTX_start(ffi.Pointer<BN_CTX> ctx) {
    return _BN_CTX_start(ctx);
  }

  late final _BN_CTX_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
        'BN_CTX_start',
      );
  late final _BN_CTX_start =
      _BN_CTX_startPtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_CTX_get(ffi.Pointer<BN_CTX> ctx) {
    return _BN_CTX_get(ctx);
  }

  late final _BN_CTX_getPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BN_CTX>)>
      >('BN_CTX_get');
  late final _BN_CTX_get =
      _BN_CTX_getPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BN_CTX>)
      >();

  void BN_CTX_end(ffi.Pointer<BN_CTX> ctx) {
    return _BN_CTX_end(ctx);
  }

  late final _BN_CTX_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
        'BN_CTX_end',
      );
  late final _BN_CTX_end =
      _BN_CTX_endPtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  int BN_rand_ex(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
    int strength,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_rand_ex(rnd, bits, top, bottom, strength, ctx);
  }

  late final _BN_rand_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.UnsignedInt,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_rand_ex');
  late final _BN_rand_ex =
      _BN_rand_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          int,
          int,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_rand(ffi.Pointer<BIGNUM> rnd, int bits, int top, int bottom) {
    return _BN_rand(rnd, bits, top, bottom);
  }

  late final _BN_randPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int)
        >
      >('BN_rand');
  late final _BN_rand =
      _BN_randPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, int, int, int)
      >();

  int BN_priv_rand_ex(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
    int strength,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_priv_rand_ex(rnd, bits, top, bottom, strength, ctx);
  }

  late final _BN_priv_rand_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.UnsignedInt,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_priv_rand_ex');
  late final _BN_priv_rand_ex =
      _BN_priv_rand_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          int,
          int,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_priv_rand(ffi.Pointer<BIGNUM> rnd, int bits, int top, int bottom) {
    return _BN_priv_rand(rnd, bits, top, bottom);
  }

  late final _BN_priv_randPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int)
        >
      >('BN_priv_rand');
  late final _BN_priv_rand =
      _BN_priv_randPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, int, int, int)
      >();

  int BN_rand_range_ex(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> range,
    int strength,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_rand_range_ex(r, range, strength, ctx);
  }

  late final _BN_rand_range_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.UnsignedInt,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_rand_range_ex');
  late final _BN_rand_range_ex =
      _BN_rand_range_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_rand_range(ffi.Pointer<BIGNUM> rnd, ffi.Pointer<BIGNUM> range) {
    return _BN_rand_range(rnd, range);
  }

  late final _BN_rand_rangePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_rand_range');
  late final _BN_rand_range =
      _BN_rand_rangePtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int BN_priv_rand_range_ex(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> range,
    int strength,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_priv_rand_range_ex(r, range, strength, ctx);
  }

  late final _BN_priv_rand_range_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.UnsignedInt,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_priv_rand_range_ex');
  late final _BN_priv_rand_range_ex =
      _BN_priv_rand_range_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_priv_rand_range(ffi.Pointer<BIGNUM> rnd, ffi.Pointer<BIGNUM> range) {
    return _BN_priv_rand_range(rnd, range);
  }

  late final _BN_priv_rand_rangePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_priv_rand_range');
  late final _BN_priv_rand_range =
      _BN_priv_rand_rangePtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int BN_pseudo_rand(ffi.Pointer<BIGNUM> rnd, int bits, int top, int bottom) {
    return _BN_pseudo_rand(rnd, bits, top, bottom);
  }

  late final _BN_pseudo_randPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int)
        >
      >('BN_pseudo_rand');
  late final _BN_pseudo_rand =
      _BN_pseudo_randPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, int, int, int)
      >();

  int BN_pseudo_rand_range(ffi.Pointer<BIGNUM> rnd, ffi.Pointer<BIGNUM> range) {
    return _BN_pseudo_rand_range(rnd, range);
  }

  late final _BN_pseudo_rand_rangePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_pseudo_rand_range');
  late final _BN_pseudo_rand_range =
      _BN_pseudo_rand_rangePtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int BN_num_bits(ffi.Pointer<BIGNUM> a) {
    return _BN_num_bits(a);
  }

  late final _BN_num_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
        'BN_num_bits',
      );
  late final _BN_num_bits =
      _BN_num_bitsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_num_bits_word(int l) {
    return _BN_num_bits_word(l);
  }

  late final _BN_num_bits_wordPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedLong)>>(
        'BN_num_bits_word',
      );
  late final _BN_num_bits_word =
      _BN_num_bits_wordPtr.asFunction<int Function(int)>();

  int BN_security_bits(int L, int N) {
    return _BN_security_bits(L, N);
  }

  late final _BN_security_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
        'BN_security_bits',
      );
  late final _BN_security_bits =
      _BN_security_bitsPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<BIGNUM> BN_new() {
    return _BN_new();
  }

  late final _BN_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>('BN_new');
  late final _BN_new = _BN_newPtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_secure_new() {
    return _BN_secure_new();
  }

  late final _BN_secure_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
        'BN_secure_new',
      );
  late final _BN_secure_new =
      _BN_secure_newPtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  void BN_clear_free(ffi.Pointer<BIGNUM> a) {
    return _BN_clear_free(a);
  }

  late final _BN_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
        'BN_clear_free',
      );
  late final _BN_clear_free =
      _BN_clear_freePtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_copy(ffi.Pointer<BIGNUM> a, ffi.Pointer<BIGNUM> b) {
    return _BN_copy(a, b);
  }

  late final _BN_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_copy');
  late final _BN_copy =
      _BN_copyPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  void BN_swap(ffi.Pointer<BIGNUM> a, ffi.Pointer<BIGNUM> b) {
    return _BN_swap(a, b);
  }

  late final _BN_swapPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_swap');
  late final _BN_swap =
      _BN_swapPtr.asFunction<
        void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_bin2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_bin2bn(s, len, ret);
  }

  late final _BN_bin2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_bin2bn');
  late final _BN_bin2bn =
      _BN_bin2bnPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  ffi.Pointer<BIGNUM> BN_signed_bin2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_signed_bin2bn(s, len, ret);
  }

  late final _BN_signed_bin2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_signed_bin2bn');
  late final _BN_signed_bin2bn =
      _BN_signed_bin2bnPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_bn2bin(ffi.Pointer<BIGNUM> a, ffi.Pointer<ffi.UnsignedChar> to) {
    return _BN_bn2bin(a, to);
  }

  late final _BN_bn2binPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>)
        >
      >('BN_bn2bin');
  late final _BN_bn2bin =
      _BN_bn2binPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>)
      >();

  int BN_bn2binpad(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_bn2binpad(a, to, tolen);
  }

  late final _BN_bn2binpadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
          )
        >
      >('BN_bn2binpad');
  late final _BN_bn2binpad =
      _BN_bn2binpadPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)
      >();

  int BN_signed_bn2bin(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_signed_bn2bin(a, to, tolen);
  }

  late final _BN_signed_bn2binPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
          )
        >
      >('BN_signed_bn2bin');
  late final _BN_signed_bn2bin =
      _BN_signed_bn2binPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)
      >();

  ffi.Pointer<BIGNUM> BN_lebin2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_lebin2bn(s, len, ret);
  }

  late final _BN_lebin2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_lebin2bn');
  late final _BN_lebin2bn =
      _BN_lebin2bnPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  ffi.Pointer<BIGNUM> BN_signed_lebin2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_signed_lebin2bn(s, len, ret);
  }

  late final _BN_signed_lebin2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_signed_lebin2bn');
  late final _BN_signed_lebin2bn =
      _BN_signed_lebin2bnPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_bn2lebinpad(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_bn2lebinpad(a, to, tolen);
  }

  late final _BN_bn2lebinpadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
          )
        >
      >('BN_bn2lebinpad');
  late final _BN_bn2lebinpad =
      _BN_bn2lebinpadPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)
      >();

  int BN_signed_bn2lebin(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_signed_bn2lebin(a, to, tolen);
  }

  late final _BN_signed_bn2lebinPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
          )
        >
      >('BN_signed_bn2lebin');
  late final _BN_signed_bn2lebin =
      _BN_signed_bn2lebinPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)
      >();

  ffi.Pointer<BIGNUM> BN_native2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_native2bn(s, len, ret);
  }

  late final _BN_native2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_native2bn');
  late final _BN_native2bn =
      _BN_native2bnPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  ffi.Pointer<BIGNUM> BN_signed_native2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_signed_native2bn(s, len, ret);
  }

  late final _BN_signed_native2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_signed_native2bn');
  late final _BN_signed_native2bn =
      _BN_signed_native2bnPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_bn2nativepad(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_bn2nativepad(a, to, tolen);
  }

  late final _BN_bn2nativepadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
          )
        >
      >('BN_bn2nativepad');
  late final _BN_bn2nativepad =
      _BN_bn2nativepadPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)
      >();

  int BN_signed_bn2native(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_signed_bn2native(a, to, tolen);
  }

  late final _BN_signed_bn2nativePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
          )
        >
      >('BN_signed_bn2native');
  late final _BN_signed_bn2native =
      _BN_signed_bn2nativePtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)
      >();

  ffi.Pointer<BIGNUM> BN_mpi2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_mpi2bn(s, len, ret);
  }

  late final _BN_mpi2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_mpi2bn');
  late final _BN_mpi2bn =
      _BN_mpi2bnPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_bn2mpi(ffi.Pointer<BIGNUM> a, ffi.Pointer<ffi.UnsignedChar> to) {
    return _BN_bn2mpi(a, to);
  }

  late final _BN_bn2mpiPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>)
        >
      >('BN_bn2mpi');
  late final _BN_bn2mpi =
      _BN_bn2mpiPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>)
      >();

  int BN_sub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_sub(r, a, b);
  }

  late final _BN_subPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_sub');
  late final _BN_sub =
      _BN_subPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_usub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_usub(r, a, b);
  }

  late final _BN_usubPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_usub');
  late final _BN_usub =
      _BN_usubPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_uadd(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_uadd(r, a, b);
  }

  late final _BN_uaddPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_uadd');
  late final _BN_uadd =
      _BN_uaddPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_add(r, a, b);
  }

  late final _BN_addPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_add');
  late final _BN_add =
      _BN_addPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mul(r, a, b, ctx);
  }

  late final _BN_mulPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mul');
  late final _BN_mul =
      _BN_mulPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_sqr(r, a, ctx);
  }

  late final _BN_sqrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_sqr');
  late final _BN_sqr =
      _BN_sqrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// BN_set_negative sets sign of a BIGNUM
  /// \param  b  pointer to the BIGNUM object
  /// \param  n  0 if the BIGNUM b should be positive and a value != 0 otherwise
  void BN_set_negative(ffi.Pointer<BIGNUM> b, int n) {
    return _BN_set_negative(b, n);
  }

  late final _BN_set_negativePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Int)>
      >('BN_set_negative');
  late final _BN_set_negative =
      _BN_set_negativePtr.asFunction<void Function(ffi.Pointer<BIGNUM>, int)>();

  /// BN_is_negative returns 1 if the BIGNUM is negative
  /// \param  b  pointer to the BIGNUM object
  /// \return 1 if a < 0 and 0 otherwise
  int BN_is_negative(ffi.Pointer<BIGNUM> b) {
    return _BN_is_negative(b);
  }

  late final _BN_is_negativePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
        'BN_is_negative',
      );
  late final _BN_is_negative =
      _BN_is_negativePtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_div(
    ffi.Pointer<BIGNUM> dv,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BIGNUM> d,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_div(dv, rem, m, d, ctx);
  }

  late final _BN_divPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_div');
  late final _BN_div =
      _BN_divPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_nnmod(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BIGNUM> d,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nnmod(r, m, d, ctx);
  }

  late final _BN_nnmodPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_nnmod');
  late final _BN_nnmod =
      _BN_nnmodPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_add(r, a, b, m, ctx);
  }

  late final _BN_mod_addPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_add');
  late final _BN_mod_add =
      _BN_mod_addPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_add_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_add_quick(r, a, b, m);
  }

  late final _BN_mod_add_quickPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_mod_add_quick');
  late final _BN_mod_add_quick =
      _BN_mod_add_quickPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_mod_sub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sub(r, a, b, m, ctx);
  }

  late final _BN_mod_subPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_sub');
  late final _BN_mod_sub =
      _BN_mod_subPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_sub_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_sub_quick(r, a, b, m);
  }

  late final _BN_mod_sub_quickPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_mod_sub_quick');
  late final _BN_mod_sub_quick =
      _BN_mod_sub_quickPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_mod_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul(r, a, b, m, ctx);
  }

  late final _BN_mod_mulPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_mul');
  late final _BN_mod_mul =
      _BN_mod_mulPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sqr(r, a, m, ctx);
  }

  late final _BN_mod_sqrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_sqr');
  late final _BN_mod_sqr =
      _BN_mod_sqrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_lshift1(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_lshift1(r, a, m, ctx);
  }

  late final _BN_mod_lshift1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_lshift1');
  late final _BN_mod_lshift1 =
      _BN_mod_lshift1Ptr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_lshift1_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_lshift1_quick(r, a, m);
  }

  late final _BN_mod_lshift1_quickPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_mod_lshift1_quick');
  late final _BN_mod_lshift1_quick =
      _BN_mod_lshift1_quickPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_mod_lshift(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_lshift(r, a, n, m, ctx);
  }

  late final _BN_mod_lshiftPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_lshift');
  late final _BN_mod_lshift =
      _BN_mod_lshiftPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_lshift_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_lshift_quick(r, a, n, m);
  }

  late final _BN_mod_lshift_quickPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_mod_lshift_quick');
  late final _BN_mod_lshift_quick =
      _BN_mod_lshift_quickPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_mod_word(ffi.Pointer<BIGNUM> a, int w) {
    return _BN_mod_word(a, w);
  }

  late final _BN_mod_wordPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<BIGNUM>, ffi.UnsignedLong)
        >
      >('BN_mod_word');
  late final _BN_mod_word =
      _BN_mod_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_div_word(ffi.Pointer<BIGNUM> a, int w) {
    return _BN_div_word(a, w);
  }

  late final _BN_div_wordPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<BIGNUM>, ffi.UnsignedLong)
        >
      >('BN_div_word');
  late final _BN_div_word =
      _BN_div_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_mul_word(ffi.Pointer<BIGNUM> a, int w) {
    return _BN_mul_word(a, w);
  }

  late final _BN_mul_wordPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.UnsignedLong)
        >
      >('BN_mul_word');
  late final _BN_mul_word =
      _BN_mul_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_add_word(ffi.Pointer<BIGNUM> a, int w) {
    return _BN_add_word(a, w);
  }

  late final _BN_add_wordPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.UnsignedLong)
        >
      >('BN_add_word');
  late final _BN_add_word =
      _BN_add_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_sub_word(ffi.Pointer<BIGNUM> a, int w) {
    return _BN_sub_word(a, w);
  }

  late final _BN_sub_wordPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.UnsignedLong)
        >
      >('BN_sub_word');
  late final _BN_sub_word =
      _BN_sub_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_set_word(ffi.Pointer<BIGNUM> a, int w) {
    return _BN_set_word(a, w);
  }

  late final _BN_set_wordPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.UnsignedLong)
        >
      >('BN_set_word');
  late final _BN_set_word =
      _BN_set_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_get_word(ffi.Pointer<BIGNUM> a) {
    return _BN_get_word(a);
  }

  late final _BN_get_wordPtr =
      _lookup<
        ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_word');
  late final _BN_get_word =
      _BN_get_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_cmp(ffi.Pointer<BIGNUM> a, ffi.Pointer<BIGNUM> b) {
    return _BN_cmp(a, b);
  }

  late final _BN_cmpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_cmp');
  late final _BN_cmp =
      _BN_cmpPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  void BN_free(ffi.Pointer<BIGNUM> a) {
    return _BN_free(a);
  }

  late final _BN_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
        'BN_free',
      );
  late final _BN_free =
      _BN_freePtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_bit_set(ffi.Pointer<BIGNUM> a, int n) {
    return _BN_is_bit_set(a, n);
  }

  late final _BN_is_bit_setPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>
      >('BN_is_bit_set');
  late final _BN_is_bit_set =
      _BN_is_bit_setPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_lshift(ffi.Pointer<BIGNUM> r, ffi.Pointer<BIGNUM> a, int n) {
    return _BN_lshift(r, a, n);
  }

  late final _BN_lshiftPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int)
        >
      >('BN_lshift');
  late final _BN_lshift =
      _BN_lshiftPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)
      >();

  int BN_lshift1(ffi.Pointer<BIGNUM> r, ffi.Pointer<BIGNUM> a) {
    return _BN_lshift1(r, a);
  }

  late final _BN_lshift1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_lshift1');
  late final _BN_lshift1 =
      _BN_lshift1Ptr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int BN_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_exp(r, a, p, ctx);
  }

  late final _BN_expPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_exp');
  late final _BN_exp =
      _BN_expPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp(r, a, p, m, ctx);
  }

  late final _BN_mod_expPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_exp');
  late final _BN_mod_exp =
      _BN_mod_expPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_exp_mont(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_mod_exp_mont(r, a, p, m, ctx, m_ctx);
  }

  late final _BN_mod_exp_montPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_MONT_CTX>,
          )
        >
      >('BN_mod_exp_mont');
  late final _BN_mod_exp_mont =
      _BN_mod_exp_montPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>,
        )
      >();

  int BN_mod_exp_mont_consttime(
    ffi.Pointer<BIGNUM> rr,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> in_mont,
  ) {
    return _BN_mod_exp_mont_consttime(rr, a, p, m, ctx, in_mont);
  }

  late final _BN_mod_exp_mont_consttimePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_MONT_CTX>,
          )
        >
      >('BN_mod_exp_mont_consttime');
  late final _BN_mod_exp_mont_consttime =
      _BN_mod_exp_mont_consttimePtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>,
        )
      >();

  int BN_mod_exp_mont_word(
    ffi.Pointer<BIGNUM> r,
    int a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_mod_exp_mont_word(r, a, p, m, ctx, m_ctx);
  }

  late final _BN_mod_exp_mont_wordPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.UnsignedLong,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_MONT_CTX>,
          )
        >
      >('BN_mod_exp_mont_word');
  late final _BN_mod_exp_mont_word =
      _BN_mod_exp_mont_wordPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>,
        )
      >();

  int BN_mod_exp2_mont(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a1,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> a2,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_mod_exp2_mont(r, a1, p1, a2, p2, m, ctx, m_ctx);
  }

  late final _BN_mod_exp2_montPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_MONT_CTX>,
          )
        >
      >('BN_mod_exp2_mont');
  late final _BN_mod_exp2_mont =
      _BN_mod_exp2_montPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>,
        )
      >();

  int BN_mod_exp_simple(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp_simple(r, a, p, m, ctx);
  }

  late final _BN_mod_exp_simplePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_exp_simple');
  late final _BN_mod_exp_simple =
      _BN_mod_exp_simplePtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_exp_mont_consttime_x2(
    ffi.Pointer<BIGNUM> rr1,
    ffi.Pointer<BIGNUM> a1,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> m1,
    ffi.Pointer<BN_MONT_CTX> in_mont1,
    ffi.Pointer<BIGNUM> rr2,
    ffi.Pointer<BIGNUM> a2,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> m2,
    ffi.Pointer<BN_MONT_CTX> in_mont2,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp_mont_consttime_x2(
      rr1,
      a1,
      p1,
      m1,
      in_mont1,
      rr2,
      a2,
      p2,
      m2,
      in_mont2,
      ctx,
    );
  }

  late final _BN_mod_exp_mont_consttime_x2Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_exp_mont_consttime_x2');
  late final _BN_mod_exp_mont_consttime_x2 =
      _BN_mod_exp_mont_consttime_x2Ptr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mask_bits(ffi.Pointer<BIGNUM> a, int n) {
    return _BN_mask_bits(a, n);
  }

  late final _BN_mask_bitsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>
      >('BN_mask_bits');
  late final _BN_mask_bits =
      _BN_mask_bitsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_print_fp(ffi.Pointer<FILE> fp, ffi.Pointer<BIGNUM> a) {
    return _BN_print_fp(fp, a);
  }

  late final _BN_print_fpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<BIGNUM>)
        >
      >('BN_print_fp');
  late final _BN_print_fp =
      _BN_print_fpPtr.asFunction<
        int Function(ffi.Pointer<FILE>, ffi.Pointer<BIGNUM>)
      >();

  int BN_print(ffi.Pointer<BIO> bio, ffi.Pointer<BIGNUM> a) {
    return _BN_print(bio, a);
  }

  late final _BN_printPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIGNUM>)
        >
      >('BN_print');
  late final _BN_print =
      _BN_printPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<BIGNUM>)
      >();

  int BN_reciprocal(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> m,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_reciprocal(r, m, len, ctx);
  }

  late final _BN_reciprocalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_reciprocal');
  late final _BN_reciprocal =
      _BN_reciprocalPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_rshift(ffi.Pointer<BIGNUM> r, ffi.Pointer<BIGNUM> a, int n) {
    return _BN_rshift(r, a, n);
  }

  late final _BN_rshiftPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int)
        >
      >('BN_rshift');
  late final _BN_rshift =
      _BN_rshiftPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)
      >();

  int BN_rshift1(ffi.Pointer<BIGNUM> r, ffi.Pointer<BIGNUM> a) {
    return _BN_rshift1(r, a);
  }

  late final _BN_rshift1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_rshift1');
  late final _BN_rshift1 =
      _BN_rshift1Ptr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  void BN_clear(ffi.Pointer<BIGNUM> a) {
    return _BN_clear(a);
  }

  late final _BN_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
        'BN_clear',
      );
  late final _BN_clear =
      _BN_clearPtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_dup(ffi.Pointer<BIGNUM> a) {
    return _BN_dup(a);
  }

  late final _BN_dupPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_dup');
  late final _BN_dup =
      _BN_dupPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  int BN_ucmp(ffi.Pointer<BIGNUM> a, ffi.Pointer<BIGNUM> b) {
    return _BN_ucmp(a, b);
  }

  late final _BN_ucmpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_ucmp');
  late final _BN_ucmp =
      _BN_ucmpPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int BN_set_bit(ffi.Pointer<BIGNUM> a, int n) {
    return _BN_set_bit(a, n);
  }

  late final _BN_set_bitPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>
      >('BN_set_bit');
  late final _BN_set_bit =
      _BN_set_bitPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_clear_bit(ffi.Pointer<BIGNUM> a, int n) {
    return _BN_clear_bit(a, n);
  }

  late final _BN_clear_bitPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>
      >('BN_clear_bit');
  late final _BN_clear_bit =
      _BN_clear_bitPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  ffi.Pointer<ffi.Char> BN_bn2hex(ffi.Pointer<BIGNUM> a) {
    return _BN_bn2hex(a);
  }

  late final _BN_bn2hexPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>
      >('BN_bn2hex');
  late final _BN_bn2hex =
      _BN_bn2hexPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<ffi.Char> BN_bn2dec(ffi.Pointer<BIGNUM> a) {
    return _BN_bn2dec(a);
  }

  late final _BN_bn2decPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>
      >('BN_bn2dec');
  late final _BN_bn2dec =
      _BN_bn2decPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)
      >();

  int BN_hex2bn(ffi.Pointer<ffi.Pointer<BIGNUM>> a, ffi.Pointer<ffi.Char> str) {
    return _BN_hex2bn(a, str);
  }

  late final _BN_hex2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('BN_hex2bn');
  late final _BN_hex2bn =
      _BN_hex2bnPtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)
      >();

  int BN_dec2bn(ffi.Pointer<ffi.Pointer<BIGNUM>> a, ffi.Pointer<ffi.Char> str) {
    return _BN_dec2bn(a, str);
  }

  late final _BN_dec2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('BN_dec2bn');
  late final _BN_dec2bn =
      _BN_dec2bnPtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)
      >();

  int BN_asc2bn(ffi.Pointer<ffi.Pointer<BIGNUM>> a, ffi.Pointer<ffi.Char> str) {
    return _BN_asc2bn(a, str);
  }

  late final _BN_asc2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('BN_asc2bn');
  late final _BN_asc2bn =
      _BN_asc2bnPtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)
      >();

  int BN_gcd(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_gcd(r, a, b, ctx);
  }

  late final _BN_gcdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_gcd');
  late final _BN_gcd =
      _BN_gcdPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_kronecker(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_kronecker(a, b, ctx);
  }

  late final _BN_kroneckerPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_kronecker');
  late final _BN_kronecker =
      _BN_kroneckerPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_are_coprime(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_are_coprime(a, b, ctx);
  }

  late final _BN_are_coprimePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_are_coprime');
  late final _BN_are_coprime =
      _BN_are_coprimePtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  ffi.Pointer<BIGNUM> BN_mod_inverse(
    ffi.Pointer<BIGNUM> ret,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_inverse(ret, a, n, ctx);
  }

  late final _BN_mod_inversePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_inverse');
  late final _BN_mod_inverse =
      _BN_mod_inversePtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  ffi.Pointer<BIGNUM> BN_mod_sqrt(
    ffi.Pointer<BIGNUM> ret,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sqrt(ret, a, n, ctx);
  }

  late final _BN_mod_sqrtPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_sqrt');
  late final _BN_mod_sqrt =
      _BN_mod_sqrtPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  void BN_consttime_swap(
    int swap,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    int nwords,
  ) {
    return _BN_consttime_swap(swap, a, b, nwords);
  }

  late final _BN_consttime_swapPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.UnsignedLong,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Int,
          )
        >
      >('BN_consttime_swap');
  late final _BN_consttime_swap =
      _BN_consttime_swapPtr.asFunction<
        void Function(int, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)
      >();

  ffi.Pointer<BIGNUM> BN_generate_prime(
    ffi.Pointer<BIGNUM> ret,
    int bits,
    int safe,
    ffi.Pointer<BIGNUM> add,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
      >
    >
    callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_generate_prime(ret, bits, safe, add, rem, callback, cb_arg);
  }

  late final _BN_generate_primePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('BN_generate_prime');
  late final _BN_generate_prime =
      _BN_generate_primePtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<BIGNUM>,
          int,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  int BN_is_prime(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
      >
    >
    callback,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_is_prime(p, nchecks, callback, ctx, cb_arg);
  }

  late final _BN_is_primePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
              >
            >,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('BN_is_prime');
  late final _BN_is_prime =
      _BN_is_primePtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
            >
          >,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<ffi.Void>,
        )
      >();

  int BN_is_prime_fasttest(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
      >
    >
    callback,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<ffi.Void> cb_arg,
    int do_trial_division,
  ) {
    return _BN_is_prime_fasttest(
      p,
      nchecks,
      callback,
      ctx,
      cb_arg,
      do_trial_division,
    );
  }

  late final _BN_is_prime_fasttestPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
              >
            >,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Int,
          )
        >
      >('BN_is_prime_fasttest');
  late final _BN_is_prime_fasttest =
      _BN_is_prime_fasttestPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
            >
          >,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<ffi.Void>,
          int,
        )
      >();

  int BN_is_prime_ex(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_is_prime_ex(p, nchecks, ctx, cb);
  }

  late final _BN_is_prime_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_GENCB>,
          )
        >
      >('BN_is_prime_ex');
  late final _BN_is_prime_ex =
      _BN_is_prime_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_GENCB>,
        )
      >();

  int BN_is_prime_fasttest_ex(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<BN_CTX> ctx,
    int do_trial_division,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_is_prime_fasttest_ex(p, nchecks, ctx, do_trial_division, cb);
  }

  late final _BN_is_prime_fasttest_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BN_CTX>,
            ffi.Int,
            ffi.Pointer<BN_GENCB>,
          )
        >
      >('BN_is_prime_fasttest_ex');
  late final _BN_is_prime_fasttest_ex =
      _BN_is_prime_fasttest_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BN_CTX>,
          int,
          ffi.Pointer<BN_GENCB>,
        )
      >();

  /// Newer versions
  int BN_generate_prime_ex2(
    ffi.Pointer<BIGNUM> ret,
    int bits,
    int safe,
    ffi.Pointer<BIGNUM> add,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BN_GENCB> cb,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_generate_prime_ex2(ret, bits, safe, add, rem, cb, ctx);
  }

  late final _BN_generate_prime_ex2Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_GENCB>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_generate_prime_ex2');
  late final _BN_generate_prime_ex2 =
      _BN_generate_prime_ex2Ptr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_GENCB>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_generate_prime_ex(
    ffi.Pointer<BIGNUM> ret,
    int bits,
    int safe,
    ffi.Pointer<BIGNUM> add,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_generate_prime_ex(ret, bits, safe, add, rem, cb);
  }

  late final _BN_generate_prime_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_GENCB>,
          )
        >
      >('BN_generate_prime_ex');
  late final _BN_generate_prime_ex =
      _BN_generate_prime_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_GENCB>,
        )
      >();

  int BN_check_prime(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_check_prime(p, ctx, cb);
  }

  late final _BN_check_primePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_GENCB>,
          )
        >
      >('BN_check_prime');
  late final _BN_check_prime =
      _BN_check_primePtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_GENCB>,
        )
      >();

  int BN_X931_generate_Xpq(
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> Xq,
    int nbits,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_X931_generate_Xpq(Xp, Xq, nbits, ctx);
  }

  late final _BN_X931_generate_XpqPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_X931_generate_Xpq');
  late final _BN_X931_generate_Xpq =
      _BN_X931_generate_XpqPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_X931_derive_prime_ex(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> Xp1,
    ffi.Pointer<BIGNUM> Xp2,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_X931_derive_prime_ex(p, p1, p2, Xp, Xp1, Xp2, e, ctx, cb);
  }

  late final _BN_X931_derive_prime_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_GENCB>,
          )
        >
      >('BN_X931_derive_prime_ex');
  late final _BN_X931_derive_prime_ex =
      _BN_X931_derive_prime_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_GENCB>,
        )
      >();

  int BN_X931_generate_prime_ex(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> Xp1,
    ffi.Pointer<BIGNUM> Xp2,
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_X931_generate_prime_ex(p, p1, p2, Xp1, Xp2, Xp, e, ctx, cb);
  }

  late final _BN_X931_generate_prime_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_GENCB>,
          )
        >
      >('BN_X931_generate_prime_ex');
  late final _BN_X931_generate_prime_ex =
      _BN_X931_generate_prime_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_GENCB>,
        )
      >();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_new() {
    return _BN_MONT_CTX_new();
  }

  late final _BN_MONT_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_MONT_CTX> Function()>>(
        'BN_MONT_CTX_new',
      );
  late final _BN_MONT_CTX_new =
      _BN_MONT_CTX_newPtr.asFunction<ffi.Pointer<BN_MONT_CTX> Function()>();

  int BN_mod_mul_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul_montgomery(r, a, b, mont, ctx);
  }

  late final _BN_mod_mul_montgomeryPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_mul_montgomery');
  late final _BN_mod_mul_montgomery =
      _BN_mod_mul_montgomeryPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_to_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_to_montgomery(r, a, mont, ctx);
  }

  late final _BN_to_montgomeryPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_to_montgomery');
  late final _BN_to_montgomery =
      _BN_to_montgomeryPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_from_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_from_montgomery(r, a, mont, ctx);
  }

  late final _BN_from_montgomeryPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_from_montgomery');
  late final _BN_from_montgomery =
      _BN_from_montgomeryPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  void BN_MONT_CTX_free(ffi.Pointer<BN_MONT_CTX> mont) {
    return _BN_MONT_CTX_free(mont);
  }

  late final _BN_MONT_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_MONT_CTX>)>>(
        'BN_MONT_CTX_free',
      );
  late final _BN_MONT_CTX_free =
      _BN_MONT_CTX_freePtr.asFunction<
        void Function(ffi.Pointer<BN_MONT_CTX>)
      >();

  int BN_MONT_CTX_set(
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BIGNUM> mod,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_MONT_CTX_set(mont, mod, ctx);
  }

  late final _BN_MONT_CTX_setPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_MONT_CTX_set');
  late final _BN_MONT_CTX_set =
      _BN_MONT_CTX_setPtr.asFunction<
        int Function(
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_copy(
    ffi.Pointer<BN_MONT_CTX> to,
    ffi.Pointer<BN_MONT_CTX> from,
  ) {
    return _BN_MONT_CTX_copy(to, from);
  }

  late final _BN_MONT_CTX_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BN_MONT_CTX>,
          )
        >
      >('BN_MONT_CTX_copy');
  late final _BN_MONT_CTX_copy =
      _BN_MONT_CTX_copyPtr.asFunction<
        ffi.Pointer<BN_MONT_CTX> Function(
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_MONT_CTX>,
        )
      >();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_set_locked(
    ffi.Pointer<ffi.Pointer<BN_MONT_CTX>> pmont,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
    ffi.Pointer<BIGNUM> mod,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_MONT_CTX_set_locked(pmont, lock, mod, ctx);
  }

  late final _BN_MONT_CTX_set_lockedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(
            ffi.Pointer<ffi.Pointer<BN_MONT_CTX>>,
            ffi.Pointer<CRYPTO_RWLOCK>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_MONT_CTX_set_locked');
  late final _BN_MONT_CTX_set_locked =
      _BN_MONT_CTX_set_lockedPtr.asFunction<
        ffi.Pointer<BN_MONT_CTX> Function(
          ffi.Pointer<ffi.Pointer<BN_MONT_CTX>>,
          ffi.Pointer<CRYPTO_RWLOCK>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  ffi.Pointer<BN_BLINDING> BN_BLINDING_new(
    ffi.Pointer<BIGNUM> A,
    ffi.Pointer<BIGNUM> Ai,
    ffi.Pointer<BIGNUM> mod,
  ) {
    return _BN_BLINDING_new(A, Ai, mod);
  }

  late final _BN_BLINDING_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BN_BLINDING> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_BLINDING_new');
  late final _BN_BLINDING_new =
      _BN_BLINDING_newPtr.asFunction<
        ffi.Pointer<BN_BLINDING> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  void BN_BLINDING_free(ffi.Pointer<BN_BLINDING> b) {
    return _BN_BLINDING_free(b);
  }

  late final _BN_BLINDING_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_BLINDING>)>>(
        'BN_BLINDING_free',
      );
  late final _BN_BLINDING_free =
      _BN_BLINDING_freePtr.asFunction<
        void Function(ffi.Pointer<BN_BLINDING>)
      >();

  int BN_BLINDING_update(ffi.Pointer<BN_BLINDING> b, ffi.Pointer<BN_CTX> ctx) {
    return _BN_BLINDING_update(b, ctx);
  }

  late final _BN_BLINDING_updatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BN_BLINDING>, ffi.Pointer<BN_CTX>)
        >
      >('BN_BLINDING_update');
  late final _BN_BLINDING_update =
      _BN_BLINDING_updatePtr.asFunction<
        int Function(ffi.Pointer<BN_BLINDING>, ffi.Pointer<BN_CTX>)
      >();

  int BN_BLINDING_convert(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_BLINDING_convert(n, b, ctx);
  }

  late final _BN_BLINDING_convertPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_BLINDING>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_BLINDING_convert');
  late final _BN_BLINDING_convert =
      _BN_BLINDING_convertPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_BLINDING>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_BLINDING_invert(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_BLINDING_invert(n, b, ctx);
  }

  late final _BN_BLINDING_invertPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_BLINDING>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_BLINDING_invert');
  late final _BN_BLINDING_invert =
      _BN_BLINDING_invertPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_BLINDING>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_BLINDING_convert_ex(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _BN_BLINDING_convert_ex(n, r, b, arg3);
  }

  late final _BN_BLINDING_convert_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_BLINDING>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_BLINDING_convert_ex');
  late final _BN_BLINDING_convert_ex =
      _BN_BLINDING_convert_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_BLINDING>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_BLINDING_invert_ex(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _BN_BLINDING_invert_ex(n, r, b, arg3);
  }

  late final _BN_BLINDING_invert_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_BLINDING>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_BLINDING_invert_ex');
  late final _BN_BLINDING_invert_ex =
      _BN_BLINDING_invert_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_BLINDING>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_BLINDING_is_current_thread(ffi.Pointer<BN_BLINDING> b) {
    return _BN_BLINDING_is_current_thread(b);
  }

  late final _BN_BLINDING_is_current_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BN_BLINDING>)>>(
        'BN_BLINDING_is_current_thread',
      );
  late final _BN_BLINDING_is_current_thread =
      _BN_BLINDING_is_current_threadPtr.asFunction<
        int Function(ffi.Pointer<BN_BLINDING>)
      >();

  void BN_BLINDING_set_current_thread(ffi.Pointer<BN_BLINDING> b) {
    return _BN_BLINDING_set_current_thread(b);
  }

  late final _BN_BLINDING_set_current_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_BLINDING>)>>(
        'BN_BLINDING_set_current_thread',
      );
  late final _BN_BLINDING_set_current_thread =
      _BN_BLINDING_set_current_threadPtr.asFunction<
        void Function(ffi.Pointer<BN_BLINDING>)
      >();

  int BN_BLINDING_lock(ffi.Pointer<BN_BLINDING> b) {
    return _BN_BLINDING_lock(b);
  }

  late final _BN_BLINDING_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BN_BLINDING>)>>(
        'BN_BLINDING_lock',
      );
  late final _BN_BLINDING_lock =
      _BN_BLINDING_lockPtr.asFunction<int Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_unlock(ffi.Pointer<BN_BLINDING> b) {
    return _BN_BLINDING_unlock(b);
  }

  late final _BN_BLINDING_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BN_BLINDING>)>>(
        'BN_BLINDING_unlock',
      );
  late final _BN_BLINDING_unlock =
      _BN_BLINDING_unlockPtr.asFunction<
        int Function(ffi.Pointer<BN_BLINDING>)
      >();

  int BN_BLINDING_get_flags(ffi.Pointer<BN_BLINDING> arg0) {
    return _BN_BLINDING_get_flags(arg0);
  }

  late final _BN_BLINDING_get_flagsPtr =
      _lookup<
        ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<BN_BLINDING>)>
      >('BN_BLINDING_get_flags');
  late final _BN_BLINDING_get_flags =
      _BN_BLINDING_get_flagsPtr.asFunction<
        int Function(ffi.Pointer<BN_BLINDING>)
      >();

  void BN_BLINDING_set_flags(ffi.Pointer<BN_BLINDING> arg0, int arg1) {
    return _BN_BLINDING_set_flags(arg0, arg1);
  }

  late final _BN_BLINDING_set_flagsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BN_BLINDING>, ffi.UnsignedLong)
        >
      >('BN_BLINDING_set_flags');
  late final _BN_BLINDING_set_flags =
      _BN_BLINDING_set_flagsPtr.asFunction<
        void Function(ffi.Pointer<BN_BLINDING>, int)
      >();

  ffi.Pointer<BN_BLINDING> BN_BLINDING_create_param(
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(
          ffi.Pointer<BIGNUM> r,
          ffi.Pointer<BIGNUM> a,
          ffi.Pointer<BIGNUM> p,
          ffi.Pointer<BIGNUM> m,
          ffi.Pointer<BN_CTX> ctx,
          ffi.Pointer<BN_MONT_CTX> m_ctx,
        )
      >
    >
    bn_mod_exp,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_BLINDING_create_param(b, e, m, ctx, bn_mod_exp, m_ctx);
  }

  late final _BN_BLINDING_create_paramPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BN_BLINDING> Function(
            ffi.Pointer<BN_BLINDING>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<BIGNUM> r,
                  ffi.Pointer<BIGNUM> a,
                  ffi.Pointer<BIGNUM> p,
                  ffi.Pointer<BIGNUM> m,
                  ffi.Pointer<BN_CTX> ctx,
                  ffi.Pointer<BN_MONT_CTX> m_ctx,
                )
              >
            >,
            ffi.Pointer<BN_MONT_CTX>,
          )
        >
      >('BN_BLINDING_create_param');
  late final _BN_BLINDING_create_param =
      _BN_BLINDING_create_paramPtr.asFunction<
        ffi.Pointer<BN_BLINDING> Function(
          ffi.Pointer<BN_BLINDING>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(
                ffi.Pointer<BIGNUM> r,
                ffi.Pointer<BIGNUM> a,
                ffi.Pointer<BIGNUM> p,
                ffi.Pointer<BIGNUM> m,
                ffi.Pointer<BN_CTX> ctx,
                ffi.Pointer<BN_MONT_CTX> m_ctx,
              )
            >
          >,
          ffi.Pointer<BN_MONT_CTX>,
        )
      >();

  void BN_set_params(int mul, int high, int low, int mont) {
    return _BN_set_params(mul, high, low, mont);
  }

  late final _BN_set_paramsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int)
        >
      >('BN_set_params');
  late final _BN_set_params =
      _BN_set_paramsPtr.asFunction<void Function(int, int, int, int)>();

  int BN_get_params(int which) {
    return _BN_get_params(which);
  }

  late final _BN_get_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('BN_get_params');
  late final _BN_get_params = _BN_get_paramsPtr.asFunction<int Function(int)>();

  ffi.Pointer<BN_RECP_CTX> BN_RECP_CTX_new() {
    return _BN_RECP_CTX_new();
  }

  late final _BN_RECP_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_RECP_CTX> Function()>>(
        'BN_RECP_CTX_new',
      );
  late final _BN_RECP_CTX_new =
      _BN_RECP_CTX_newPtr.asFunction<ffi.Pointer<BN_RECP_CTX> Function()>();

  void BN_RECP_CTX_free(ffi.Pointer<BN_RECP_CTX> recp) {
    return _BN_RECP_CTX_free(recp);
  }

  late final _BN_RECP_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_RECP_CTX>)>>(
        'BN_RECP_CTX_free',
      );
  late final _BN_RECP_CTX_free =
      _BN_RECP_CTX_freePtr.asFunction<
        void Function(ffi.Pointer<BN_RECP_CTX>)
      >();

  int BN_RECP_CTX_set(
    ffi.Pointer<BN_RECP_CTX> recp,
    ffi.Pointer<BIGNUM> rdiv,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_RECP_CTX_set(recp, rdiv, ctx);
  }

  late final _BN_RECP_CTX_setPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BN_RECP_CTX>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_RECP_CTX_set');
  late final _BN_RECP_CTX_set =
      _BN_RECP_CTX_setPtr.asFunction<
        int Function(
          ffi.Pointer<BN_RECP_CTX>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_mul_reciprocal(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_RECP_CTX> recp,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul_reciprocal(r, x, y, recp, ctx);
  }

  late final _BN_mod_mul_reciprocalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_RECP_CTX>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_mul_reciprocal');
  late final _BN_mod_mul_reciprocal =
      _BN_mod_mul_reciprocalPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_RECP_CTX>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_exp_recp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp_recp(r, a, p, m, ctx);
  }

  late final _BN_mod_exp_recpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_exp_recp');
  late final _BN_mod_exp_recp =
      _BN_mod_exp_recpPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_div_recp(
    ffi.Pointer<BIGNUM> dv,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_RECP_CTX> recp,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_div_recp(dv, rem, m, recp, ctx);
  }

  late final _BN_div_recpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_RECP_CTX>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_div_recp');
  late final _BN_div_recp =
      _BN_div_recpPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_RECP_CTX>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r = a + b
  int BN_GF2m_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_GF2m_add(r, a, b);
  }

  late final _BN_GF2m_addPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_GF2m_add');
  late final _BN_GF2m_add =
      _BN_GF2m_addPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  /// r=a mod p
  int BN_GF2m_mod(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
  ) {
    return _BN_GF2m_mod(r, a, p);
  }

  late final _BN_GF2m_modPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_GF2m_mod');
  late final _BN_GF2m_mod =
      _BN_GF2m_modPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  /// r = (a * b) mod p
  int BN_GF2m_mod_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_mul(r, a, b, p, ctx);
  }

  late final _BN_GF2m_mod_mulPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_mul');
  late final _BN_GF2m_mod_mul =
      _BN_GF2m_mod_mulPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r = (a * a) mod p
  int BN_GF2m_mod_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqr(r, a, p, ctx);
  }

  late final _BN_GF2m_mod_sqrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_sqr');
  late final _BN_GF2m_mod_sqr =
      _BN_GF2m_mod_sqrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r = (1 / b) mod p
  int BN_GF2m_mod_inv(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_inv(r, b, p, ctx);
  }

  late final _BN_GF2m_mod_invPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_inv');
  late final _BN_GF2m_mod_inv =
      _BN_GF2m_mod_invPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r = (a / b) mod p
  int BN_GF2m_mod_div(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_div(r, a, b, p, ctx);
  }

  late final _BN_GF2m_mod_divPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_div');
  late final _BN_GF2m_mod_div =
      _BN_GF2m_mod_divPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r = (a ^ b) mod p
  int BN_GF2m_mod_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_exp(r, a, b, p, ctx);
  }

  late final _BN_GF2m_mod_expPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_exp');
  late final _BN_GF2m_mod_exp =
      _BN_GF2m_mod_expPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r = sqrt(a) mod p
  int BN_GF2m_mod_sqrt(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqrt(r, a, p, ctx);
  }

  late final _BN_GF2m_mod_sqrtPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_sqrt');
  late final _BN_GF2m_mod_sqrt =
      _BN_GF2m_mod_sqrtPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r^2 + r = a mod p
  int BN_GF2m_mod_solve_quad(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_solve_quad(r, a, p, ctx);
  }

  late final _BN_GF2m_mod_solve_quadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_solve_quad');
  late final _BN_GF2m_mod_solve_quad =
      _BN_GF2m_mod_solve_quadPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// -
  /// Some functions allow for representation of the irreducible polynomials
  /// as an unsigned int[], say p.  The irreducible f(t) is then of the form:
  /// t^p[0] + t^p[1] + ... + t^p[k]
  /// where m = p[0] > p[1] > ... > p[k] = 0.
  /// /
  /// /* r = a mod p
  int BN_GF2m_mod_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
  ) {
    return _BN_GF2m_mod_arr(r, a, p);
  }

  late final _BN_GF2m_mod_arrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('BN_GF2m_mod_arr');
  late final _BN_GF2m_mod_arr =
      _BN_GF2m_mod_arrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  /// r = (a * b) mod p
  int BN_GF2m_mod_mul_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_mul_arr(r, a, b, p, ctx);
  }

  late final _BN_GF2m_mod_mul_arrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_mul_arr');
  late final _BN_GF2m_mod_mul_arr =
      _BN_GF2m_mod_mul_arrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r = (a * a) mod p
  int BN_GF2m_mod_sqr_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqr_arr(r, a, p, ctx);
  }

  late final _BN_GF2m_mod_sqr_arrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_sqr_arr');
  late final _BN_GF2m_mod_sqr_arr =
      _BN_GF2m_mod_sqr_arrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r = (1 / b) mod p
  int BN_GF2m_mod_inv_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_inv_arr(r, b, p, ctx);
  }

  late final _BN_GF2m_mod_inv_arrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_inv_arr');
  late final _BN_GF2m_mod_inv_arr =
      _BN_GF2m_mod_inv_arrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r = (a / b) mod p
  int BN_GF2m_mod_div_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_div_arr(r, a, b, p, ctx);
  }

  late final _BN_GF2m_mod_div_arrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_div_arr');
  late final _BN_GF2m_mod_div_arr =
      _BN_GF2m_mod_div_arrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r = (a ^ b) mod p
  int BN_GF2m_mod_exp_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_exp_arr(r, a, b, p, ctx);
  }

  late final _BN_GF2m_mod_exp_arrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_exp_arr');
  late final _BN_GF2m_mod_exp_arr =
      _BN_GF2m_mod_exp_arrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r = sqrt(a) mod p
  int BN_GF2m_mod_sqrt_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqrt_arr(r, a, p, ctx);
  }

  late final _BN_GF2m_mod_sqrt_arrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_sqrt_arr');
  late final _BN_GF2m_mod_sqrt_arr =
      _BN_GF2m_mod_sqrt_arrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// r^2 + r = a mod p
  int BN_GF2m_mod_solve_quad_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_solve_quad_arr(r, a, p, ctx);
  }

  late final _BN_GF2m_mod_solve_quad_arrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_GF2m_mod_solve_quad_arr');
  late final _BN_GF2m_mod_solve_quad_arr =
      _BN_GF2m_mod_solve_quad_arrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_GF2m_poly2arr(ffi.Pointer<BIGNUM> a, ffi.Pointer<ffi.Int> p, int max) {
    return _BN_GF2m_poly2arr(a, p, max);
  }

  late final _BN_GF2m_poly2arrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, ffi.Int)
        >
      >('BN_GF2m_poly2arr');
  late final _BN_GF2m_poly2arr =
      _BN_GF2m_poly2arrPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, int)
      >();

  int BN_GF2m_arr2poly(ffi.Pointer<ffi.Int> p, ffi.Pointer<BIGNUM> a) {
    return _BN_GF2m_arr2poly(p, a);
  }

  late final _BN_GF2m_arr2polyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<BIGNUM>)
        >
      >('BN_GF2m_arr2poly');
  late final _BN_GF2m_arr2poly =
      _BN_GF2m_arr2polyPtr.asFunction<
        int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<BIGNUM>)
      >();

  /// faster mod functions for the 'NIST primes' 0 <= a < p^2
  int BN_nist_mod_192(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_192(r, a, p, ctx);
  }

  late final _BN_nist_mod_192Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_nist_mod_192');
  late final _BN_nist_mod_192 =
      _BN_nist_mod_192Ptr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_nist_mod_224(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_224(r, a, p, ctx);
  }

  late final _BN_nist_mod_224Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_nist_mod_224');
  late final _BN_nist_mod_224 =
      _BN_nist_mod_224Ptr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_nist_mod_256(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_256(r, a, p, ctx);
  }

  late final _BN_nist_mod_256Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_nist_mod_256');
  late final _BN_nist_mod_256 =
      _BN_nist_mod_256Ptr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_nist_mod_384(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_384(r, a, p, ctx);
  }

  late final _BN_nist_mod_384Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_nist_mod_384');
  late final _BN_nist_mod_384 =
      _BN_nist_mod_384Ptr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_nist_mod_521(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_521(r, a, p, ctx);
  }

  late final _BN_nist_mod_521Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_nist_mod_521');
  late final _BN_nist_mod_521 =
      _BN_nist_mod_521Ptr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_192() {
    return _BN_get0_nist_prime_192();
  }

  late final _BN_get0_nist_prime_192Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
        'BN_get0_nist_prime_192',
      );
  late final _BN_get0_nist_prime_192 =
      _BN_get0_nist_prime_192Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_224() {
    return _BN_get0_nist_prime_224();
  }

  late final _BN_get0_nist_prime_224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
        'BN_get0_nist_prime_224',
      );
  late final _BN_get0_nist_prime_224 =
      _BN_get0_nist_prime_224Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_256() {
    return _BN_get0_nist_prime_256();
  }

  late final _BN_get0_nist_prime_256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
        'BN_get0_nist_prime_256',
      );
  late final _BN_get0_nist_prime_256 =
      _BN_get0_nist_prime_256Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_384() {
    return _BN_get0_nist_prime_384();
  }

  late final _BN_get0_nist_prime_384Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
        'BN_get0_nist_prime_384',
      );
  late final _BN_get0_nist_prime_384 =
      _BN_get0_nist_prime_384Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_521() {
    return _BN_get0_nist_prime_521();
  }

  late final _BN_get0_nist_prime_521Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
        'BN_get0_nist_prime_521',
      );
  late final _BN_get0_nist_prime_521 =
      _BN_get0_nist_prime_521Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<BIGNUM>,
        ffi.Pointer<BIGNUM>,
        ffi.Pointer<BIGNUM>,
        ffi.Pointer<BN_CTX>,
      )
    >
  >
  BN_nist_mod_func(ffi.Pointer<BIGNUM> p) {
    return _BN_nist_mod_func(p);
  }

  late final _BN_nist_mod_funcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(
                ffi.Pointer<BIGNUM>,
                ffi.Pointer<BIGNUM>,
                ffi.Pointer<BIGNUM>,
                ffi.Pointer<BN_CTX>,
              )
            >
          >
          Function(ffi.Pointer<BIGNUM>)
        >
      >('BN_nist_mod_func');
  late final _BN_nist_mod_func =
      _BN_nist_mod_funcPtr.asFunction<
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
            )
          >
        >
        Function(ffi.Pointer<BIGNUM>)
      >();

  int BN_generate_dsa_nonce(
    ffi.Pointer<BIGNUM> out,
    ffi.Pointer<BIGNUM> range,
    ffi.Pointer<BIGNUM> priv,
    ffi.Pointer<ffi.UnsignedChar> message,
    int message_len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_generate_dsa_nonce(out, range, priv, message, message_len, ctx);
  }

  late final _BN_generate_dsa_noncePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Size,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_generate_dsa_nonce');
  late final _BN_generate_dsa_nonce =
      _BN_generate_dsa_noncePtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Primes from RFC 2409
  ffi.Pointer<BIGNUM> BN_get_rfc2409_prime_768(ffi.Pointer<BIGNUM> bn) {
    return _BN_get_rfc2409_prime_768(bn);
  }

  late final _BN_get_rfc2409_prime_768Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc2409_prime_768');
  late final _BN_get_rfc2409_prime_768 =
      _BN_get_rfc2409_prime_768Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_get_rfc2409_prime_1024(ffi.Pointer<BIGNUM> bn) {
    return _BN_get_rfc2409_prime_1024(bn);
  }

  late final _BN_get_rfc2409_prime_1024Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc2409_prime_1024');
  late final _BN_get_rfc2409_prime_1024 =
      _BN_get_rfc2409_prime_1024Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  /// Primes from RFC 3526
  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_1536(ffi.Pointer<BIGNUM> bn) {
    return _BN_get_rfc3526_prime_1536(bn);
  }

  late final _BN_get_rfc3526_prime_1536Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc3526_prime_1536');
  late final _BN_get_rfc3526_prime_1536 =
      _BN_get_rfc3526_prime_1536Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_2048(ffi.Pointer<BIGNUM> bn) {
    return _BN_get_rfc3526_prime_2048(bn);
  }

  late final _BN_get_rfc3526_prime_2048Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc3526_prime_2048');
  late final _BN_get_rfc3526_prime_2048 =
      _BN_get_rfc3526_prime_2048Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_3072(ffi.Pointer<BIGNUM> bn) {
    return _BN_get_rfc3526_prime_3072(bn);
  }

  late final _BN_get_rfc3526_prime_3072Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc3526_prime_3072');
  late final _BN_get_rfc3526_prime_3072 =
      _BN_get_rfc3526_prime_3072Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_4096(ffi.Pointer<BIGNUM> bn) {
    return _BN_get_rfc3526_prime_4096(bn);
  }

  late final _BN_get_rfc3526_prime_4096Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc3526_prime_4096');
  late final _BN_get_rfc3526_prime_4096 =
      _BN_get_rfc3526_prime_4096Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_6144(ffi.Pointer<BIGNUM> bn) {
    return _BN_get_rfc3526_prime_6144(bn);
  }

  late final _BN_get_rfc3526_prime_6144Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc3526_prime_6144');
  late final _BN_get_rfc3526_prime_6144 =
      _BN_get_rfc3526_prime_6144Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_8192(ffi.Pointer<BIGNUM> bn) {
    return _BN_get_rfc3526_prime_8192(bn);
  }

  late final _BN_get_rfc3526_prime_8192Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc3526_prime_8192');
  late final _BN_get_rfc3526_prime_8192 =
      _BN_get_rfc3526_prime_8192Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  int BN_bntest_rand(ffi.Pointer<BIGNUM> rnd, int bits, int top, int bottom) {
    return _BN_bntest_rand(rnd, bits, top, bottom);
  }

  late final _BN_bntest_randPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int)
        >
      >('BN_bntest_rand');
  late final _BN_bntest_rand =
      _BN_bntest_randPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, int, int, int)
      >();

  ffi.Pointer<ASN1_INTEGER> BN_to_ASN1_INTEGER(
    ffi.Pointer<BIGNUM> bn,
    ffi.Pointer<ASN1_INTEGER> ai,
  ) {
    return _BN_to_ASN1_INTEGER(bn, ai);
  }

  late final _BN_to_ASN1_INTEGERPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ASN1_INTEGER> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ASN1_INTEGER>,
          )
        >
      >('BN_to_ASN1_INTEGER');
  late final _BN_to_ASN1_INTEGER =
      _BN_to_ASN1_INTEGERPtr.asFunction<
        ffi.Pointer<ASN1_INTEGER> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ASN1_INTEGER>,
        )
      >();

  ffi.Pointer<ASN1_ENUMERATED> BN_to_ASN1_ENUMERATED(
    ffi.Pointer<BIGNUM> bn,
    ffi.Pointer<ASN1_ENUMERATED> ai,
  ) {
    return _BN_to_ASN1_ENUMERATED(bn, ai);
  }

  late final _BN_to_ASN1_ENUMERATEDPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ASN1_ENUMERATED> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ASN1_ENUMERATED>,
          )
        >
      >('BN_to_ASN1_ENUMERATED');
  late final _BN_to_ASN1_ENUMERATED =
      _BN_to_ASN1_ENUMERATEDPtr.asFunction<
        ffi.Pointer<ASN1_ENUMERATED> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ASN1_ENUMERATED>,
        )
      >();

  /// Returns the basic GFp ec methods which provides the basis for the
  /// optimized methods.
  /// \return  EC_METHOD object
  ffi.Pointer<EC_METHOD> EC_GFp_simple_method() {
    return _EC_GFp_simple_method();
  }

  late final _EC_GFp_simple_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
        'EC_GFp_simple_method',
      );
  late final _EC_GFp_simple_method =
      _EC_GFp_simple_methodPtr.asFunction<ffi.Pointer<EC_METHOD> Function()>();

  /// Returns GFp methods using montgomery multiplication.
  /// \return  EC_METHOD object
  ffi.Pointer<EC_METHOD> EC_GFp_mont_method() {
    return _EC_GFp_mont_method();
  }

  late final _EC_GFp_mont_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
        'EC_GFp_mont_method',
      );
  late final _EC_GFp_mont_method =
      _EC_GFp_mont_methodPtr.asFunction<ffi.Pointer<EC_METHOD> Function()>();

  /// Returns GFp methods using optimized methods for NIST recommended curves
  /// \return  EC_METHOD object
  ffi.Pointer<EC_METHOD> EC_GFp_nist_method() {
    return _EC_GFp_nist_method();
  }

  late final _EC_GFp_nist_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
        'EC_GFp_nist_method',
      );
  late final _EC_GFp_nist_method =
      _EC_GFp_nist_methodPtr.asFunction<ffi.Pointer<EC_METHOD> Function()>();

  /// Returns 64-bit optimized methods for nistp224
  /// \return  EC_METHOD object
  ffi.Pointer<EC_METHOD> EC_GFp_nistp224_method() {
    return _EC_GFp_nistp224_method();
  }

  late final _EC_GFp_nistp224_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
        'EC_GFp_nistp224_method',
      );
  late final _EC_GFp_nistp224_method =
      _EC_GFp_nistp224_methodPtr.asFunction<
        ffi.Pointer<EC_METHOD> Function()
      >();

  /// Returns 64-bit optimized methods for nistp256
  /// \return  EC_METHOD object
  ffi.Pointer<EC_METHOD> EC_GFp_nistp256_method() {
    return _EC_GFp_nistp256_method();
  }

  late final _EC_GFp_nistp256_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
        'EC_GFp_nistp256_method',
      );
  late final _EC_GFp_nistp256_method =
      _EC_GFp_nistp256_methodPtr.asFunction<
        ffi.Pointer<EC_METHOD> Function()
      >();

  /// Returns 64-bit optimized methods for nistp521
  /// \return  EC_METHOD object
  ffi.Pointer<EC_METHOD> EC_GFp_nistp521_method() {
    return _EC_GFp_nistp521_method();
  }

  late final _EC_GFp_nistp521_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
        'EC_GFp_nistp521_method',
      );
  late final _EC_GFp_nistp521_method =
      _EC_GFp_nistp521_methodPtr.asFunction<
        ffi.Pointer<EC_METHOD> Function()
      >();

  /// Returns the basic GF2m ec method
  /// \return  EC_METHOD object
  ffi.Pointer<EC_METHOD> EC_GF2m_simple_method() {
    return _EC_GF2m_simple_method();
  }

  late final _EC_GF2m_simple_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
        'EC_GF2m_simple_method',
      );
  late final _EC_GF2m_simple_method =
      _EC_GF2m_simple_methodPtr.asFunction<ffi.Pointer<EC_METHOD> Function()>();

  /// Creates a new EC_GROUP object
  /// \param   meth   EC_METHOD to use
  /// \return  newly created EC_GROUP object or NULL in case of an error.
  ffi.Pointer<EC_GROUP> EC_GROUP_new(ffi.Pointer<EC_METHOD> meth) {
    return _EC_GROUP_new(meth);
  }

  late final _EC_GROUP_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_METHOD>)
        >
      >('EC_GROUP_new');
  late final _EC_GROUP_new =
      _EC_GROUP_newPtr.asFunction<
        ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_METHOD>)
      >();

  /// Clears and frees a EC_GROUP object
  /// \param  group  EC_GROUP object to be cleared and freed.
  void EC_GROUP_clear_free(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_clear_free(group);
  }

  late final _EC_GROUP_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_GROUP>)>>(
        'EC_GROUP_clear_free',
      );
  late final _EC_GROUP_clear_free =
      _EC_GROUP_clear_freePtr.asFunction<
        void Function(ffi.Pointer<EC_GROUP>)
      >();

  /// Returns the EC_METHOD of the EC_GROUP object.
  /// \param  group  EC_GROUP object
  /// \return EC_METHOD used in this EC_GROUP object.
  ffi.Pointer<EC_METHOD> EC_GROUP_method_of(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_method_of(group);
  }

  late final _EC_GROUP_method_ofPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_METHOD> Function(ffi.Pointer<EC_GROUP>)
        >
      >('EC_GROUP_method_of');
  late final _EC_GROUP_method_of =
      _EC_GROUP_method_ofPtr.asFunction<
        ffi.Pointer<EC_METHOD> Function(ffi.Pointer<EC_GROUP>)
      >();

  /// Returns the field type of the EC_METHOD.
  /// \param  meth  EC_METHOD object
  /// \return NID of the underlying field type OID.
  int EC_METHOD_get_field_type(ffi.Pointer<EC_METHOD> meth) {
    return _EC_METHOD_get_field_type(meth);
  }

  late final _EC_METHOD_get_field_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_METHOD>)>>(
        'EC_METHOD_get_field_type',
      );
  late final _EC_METHOD_get_field_type =
      _EC_METHOD_get_field_typePtr.asFunction<
        int Function(ffi.Pointer<EC_METHOD>)
      >();

  /// Frees a EC_GROUP object
  /// \param  group  EC_GROUP object to be freed.
  void EC_GROUP_free(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_free(group);
  }

  late final _EC_GROUP_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_GROUP>)>>(
        'EC_GROUP_free',
      );
  late final _EC_GROUP_free =
      _EC_GROUP_freePtr.asFunction<void Function(ffi.Pointer<EC_GROUP>)>();

  /// Copies EC_GROUP objects. Note: both EC_GROUPs must use the same EC_METHOD.
  /// \param  dst  destination EC_GROUP object
  /// \param  src  source EC_GROUP object
  /// \return 1 on success and 0 if an error occurred.
  int EC_GROUP_copy(ffi.Pointer<EC_GROUP> dst, ffi.Pointer<EC_GROUP> src) {
    return _EC_GROUP_copy(dst, src);
  }

  late final _EC_GROUP_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_GROUP>)
        >
      >('EC_GROUP_copy');
  late final _EC_GROUP_copy =
      _EC_GROUP_copyPtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_GROUP>)
      >();

  /// Creates a new EC_GROUP object and copies the content
  /// form src to the newly created EC_KEY object
  /// \param  src  source EC_GROUP object
  /// \return newly created EC_GROUP object or NULL in case of an error.
  ffi.Pointer<EC_GROUP> EC_GROUP_dup(ffi.Pointer<EC_GROUP> src) {
    return _EC_GROUP_dup(src);
  }

  late final _EC_GROUP_dupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_GROUP>)
        >
      >('EC_GROUP_dup');
  late final _EC_GROUP_dup =
      _EC_GROUP_dupPtr.asFunction<
        ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_GROUP>)
      >();

  /// Sets the generator and its order/cofactor of a EC_GROUP object.
  /// \param  group      EC_GROUP object
  /// \param  generator  EC_POINT object with the generator.
  /// \param  order      the order of the group generated by the generator.
  /// \param  cofactor   the index of the sub-group generated by the generator
  /// in the group of all points on the elliptic curve.
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_set_generator(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> generator,
    ffi.Pointer<BIGNUM> order,
    ffi.Pointer<BIGNUM> cofactor,
  ) {
    return _EC_GROUP_set_generator(group, generator, order, cofactor);
  }

  late final _EC_GROUP_set_generatorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('EC_GROUP_set_generator');
  late final _EC_GROUP_set_generator =
      _EC_GROUP_set_generatorPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  /// Returns the generator of a EC_GROUP object.
  /// \param  group  EC_GROUP object
  /// \return the currently used generator (possibly NULL).
  ffi.Pointer<EC_POINT> EC_GROUP_get0_generator(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_get0_generator(group);
  }

  late final _EC_GROUP_get0_generatorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_GROUP>)
        >
      >('EC_GROUP_get0_generator');
  late final _EC_GROUP_get0_generator =
      _EC_GROUP_get0_generatorPtr.asFunction<
        ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_GROUP>)
      >();

  /// Returns the montgomery data for order(Generator)
  /// \param  group  EC_GROUP object
  /// \return the currently used montgomery data (possibly NULL).
  ffi.Pointer<BN_MONT_CTX> EC_GROUP_get_mont_data(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_get_mont_data(group);
  }

  late final _EC_GROUP_get_mont_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(ffi.Pointer<EC_GROUP>)
        >
      >('EC_GROUP_get_mont_data');
  late final _EC_GROUP_get_mont_data =
      _EC_GROUP_get_mont_dataPtr.asFunction<
        ffi.Pointer<BN_MONT_CTX> Function(ffi.Pointer<EC_GROUP>)
      >();

  /// Gets the order of a EC_GROUP
  /// \param  group  EC_GROUP object
  /// \param  order  BIGNUM to which the order is copied
  /// \param  ctx    unused
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_get_order(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> order,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_order(group, order, ctx);
  }

  late final _EC_GROUP_get_orderPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_GROUP_get_order');
  late final _EC_GROUP_get_order =
      _EC_GROUP_get_orderPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Gets the order of an EC_GROUP
  /// \param  group  EC_GROUP object
  /// \return the group order
  ffi.Pointer<BIGNUM> EC_GROUP_get0_order(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_get0_order(group);
  }

  late final _EC_GROUP_get0_orderPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)>
      >('EC_GROUP_get0_order');
  late final _EC_GROUP_get0_order =
      _EC_GROUP_get0_orderPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)
      >();

  /// Gets the number of bits of the order of an EC_GROUP
  /// \param  group  EC_GROUP object
  /// \return number of bits of group order.
  int EC_GROUP_order_bits(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_order_bits(group);
  }

  late final _EC_GROUP_order_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
        'EC_GROUP_order_bits',
      );
  late final _EC_GROUP_order_bits =
      _EC_GROUP_order_bitsPtr.asFunction<int Function(ffi.Pointer<EC_GROUP>)>();

  /// Gets the cofactor of a EC_GROUP
  /// \param  group     EC_GROUP object
  /// \param  cofactor  BIGNUM to which the cofactor is copied
  /// \param  ctx       unused
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_get_cofactor(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> cofactor,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_cofactor(group, cofactor, ctx);
  }

  late final _EC_GROUP_get_cofactorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_GROUP_get_cofactor');
  late final _EC_GROUP_get_cofactor =
      _EC_GROUP_get_cofactorPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Gets the cofactor of an EC_GROUP
  /// \param  group  EC_GROUP object
  /// \return the group cofactor
  ffi.Pointer<BIGNUM> EC_GROUP_get0_cofactor(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_get0_cofactor(group);
  }

  late final _EC_GROUP_get0_cofactorPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)>
      >('EC_GROUP_get0_cofactor');
  late final _EC_GROUP_get0_cofactor =
      _EC_GROUP_get0_cofactorPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)
      >();

  /// Sets the name of a EC_GROUP object
  /// \param  group  EC_GROUP object
  /// \param  nid    NID of the curve name OID
  void EC_GROUP_set_curve_name(ffi.Pointer<EC_GROUP> group, int nid) {
    return _EC_GROUP_set_curve_name(group, nid);
  }

  late final _EC_GROUP_set_curve_namePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_GROUP>, ffi.Int)>
      >('EC_GROUP_set_curve_name');
  late final _EC_GROUP_set_curve_name =
      _EC_GROUP_set_curve_namePtr.asFunction<
        void Function(ffi.Pointer<EC_GROUP>, int)
      >();

  /// Returns the curve name of a EC_GROUP object
  /// \param  group  EC_GROUP object
  /// \return NID of the curve name OID or 0 if not set.
  int EC_GROUP_get_curve_name(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_get_curve_name(group);
  }

  late final _EC_GROUP_get_curve_namePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
        'EC_GROUP_get_curve_name',
      );
  late final _EC_GROUP_get_curve_name =
      _EC_GROUP_get_curve_namePtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>)
      >();

  /// Gets the field of an EC_GROUP
  /// \param  group  EC_GROUP object
  /// \return the group field
  ffi.Pointer<BIGNUM> EC_GROUP_get0_field(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_get0_field(group);
  }

  late final _EC_GROUP_get0_fieldPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)>
      >('EC_GROUP_get0_field');
  late final _EC_GROUP_get0_field =
      _EC_GROUP_get0_fieldPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)
      >();

  /// Returns the field type of the EC_GROUP.
  /// \param  group  EC_GROUP object
  /// \return NID of the underlying field type OID.
  int EC_GROUP_get_field_type(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_get_field_type(group);
  }

  late final _EC_GROUP_get_field_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
        'EC_GROUP_get_field_type',
      );
  late final _EC_GROUP_get_field_type =
      _EC_GROUP_get_field_typePtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>)
      >();

  void EC_GROUP_set_asn1_flag(ffi.Pointer<EC_GROUP> group, int flag) {
    return _EC_GROUP_set_asn1_flag(group, flag);
  }

  late final _EC_GROUP_set_asn1_flagPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_GROUP>, ffi.Int)>
      >('EC_GROUP_set_asn1_flag');
  late final _EC_GROUP_set_asn1_flag =
      _EC_GROUP_set_asn1_flagPtr.asFunction<
        void Function(ffi.Pointer<EC_GROUP>, int)
      >();

  int EC_GROUP_get_asn1_flag(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_get_asn1_flag(group);
  }

  late final _EC_GROUP_get_asn1_flagPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
        'EC_GROUP_get_asn1_flag',
      );
  late final _EC_GROUP_get_asn1_flag =
      _EC_GROUP_get_asn1_flagPtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>)
      >();

  void EC_GROUP_set_point_conversion_form(
    ffi.Pointer<EC_GROUP> group,
    point_conversion_form_t form,
  ) {
    return _EC_GROUP_set_point_conversion_form(group, form.value);
  }

  late final _EC_GROUP_set_point_conversion_formPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EC_GROUP>, ffi.UnsignedInt)
        >
      >('EC_GROUP_set_point_conversion_form');
  late final _EC_GROUP_set_point_conversion_form =
      _EC_GROUP_set_point_conversion_formPtr.asFunction<
        void Function(ffi.Pointer<EC_GROUP>, int)
      >();

  point_conversion_form_t EC_GROUP_get_point_conversion_form(
    ffi.Pointer<EC_GROUP> arg0,
  ) {
    return point_conversion_form_t.fromValue(
      _EC_GROUP_get_point_conversion_form(arg0),
    );
  }

  late final _EC_GROUP_get_point_conversion_formPtr =
      _lookup<
        ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<EC_GROUP>)>
      >('EC_GROUP_get_point_conversion_form');
  late final _EC_GROUP_get_point_conversion_form =
      _EC_GROUP_get_point_conversion_formPtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>)
      >();

  ffi.Pointer<ffi.UnsignedChar> EC_GROUP_get0_seed(ffi.Pointer<EC_GROUP> x) {
    return _EC_GROUP_get0_seed(x);
  }

  late final _EC_GROUP_get0_seedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EC_GROUP>)
        >
      >('EC_GROUP_get0_seed');
  late final _EC_GROUP_get0_seed =
      _EC_GROUP_get0_seedPtr.asFunction<
        ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EC_GROUP>)
      >();

  int EC_GROUP_get_seed_len(ffi.Pointer<EC_GROUP> arg0) {
    return _EC_GROUP_get_seed_len(arg0);
  }

  late final _EC_GROUP_get_seed_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EC_GROUP>)>>(
        'EC_GROUP_get_seed_len',
      );
  late final _EC_GROUP_get_seed_len =
      _EC_GROUP_get_seed_lenPtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>)
      >();

  int EC_GROUP_set_seed(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
    int len,
  ) {
    return _EC_GROUP_set_seed(arg0, arg1, len);
  }

  late final _EC_GROUP_set_seedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Size,
          )
        >
      >('EC_GROUP_set_seed');
  late final _EC_GROUP_set_seed =
      _EC_GROUP_set_seedPtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<ffi.UnsignedChar>, int)
      >();

  /// Sets the parameters of an ec curve defined by y^2 = x^3 + a*x + b (for GFp)
  /// or y^2 + x*y = x^3 + a*x^2 + b (for GF2m)
  /// \param  group  EC_GROUP object
  /// \param  p      BIGNUM with the prime number (GFp) or the polynomial
  /// defining the underlying field (GF2m)
  /// \param  a      BIGNUM with parameter a of the equation
  /// \param  b      BIGNUM with parameter b of the equation
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_set_curve(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_set_curve(group, p, a, b, ctx);
  }

  late final _EC_GROUP_set_curvePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_GROUP_set_curve');
  late final _EC_GROUP_set_curve =
      _EC_GROUP_set_curvePtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Gets the parameters of the ec curve defined by y^2 = x^3 + a*x + b (for GFp)
  /// or y^2 + x*y = x^3 + a*x^2 + b (for GF2m)
  /// \param  group  EC_GROUP object
  /// \param  p      BIGNUM with the prime number (GFp) or the polynomial
  /// defining the underlying field (GF2m)
  /// \param  a      BIGNUM for parameter a of the equation
  /// \param  b      BIGNUM for parameter b of the equation
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_get_curve(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_curve(group, p, a, b, ctx);
  }

  late final _EC_GROUP_get_curvePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_GROUP_get_curve');
  late final _EC_GROUP_get_curve =
      _EC_GROUP_get_curvePtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Sets the parameters of an ec curve. Synonym for EC_GROUP_set_curve
  /// \param  group  EC_GROUP object
  /// \param  p      BIGNUM with the prime number (GFp) or the polynomial
  /// defining the underlying field (GF2m)
  /// \param  a      BIGNUM with parameter a of the equation
  /// \param  b      BIGNUM with parameter b of the equation
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_set_curve_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_set_curve_GFp(group, p, a, b, ctx);
  }

  late final _EC_GROUP_set_curve_GFpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_GROUP_set_curve_GFp');
  late final _EC_GROUP_set_curve_GFp =
      _EC_GROUP_set_curve_GFpPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Gets the parameters of an ec curve. Synonym for EC_GROUP_get_curve
  /// \param  group  EC_GROUP object
  /// \param  p      BIGNUM with the prime number (GFp) or the polynomial
  /// defining the underlying field (GF2m)
  /// \param  a      BIGNUM for parameter a of the equation
  /// \param  b      BIGNUM for parameter b of the equation
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_get_curve_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_curve_GFp(group, p, a, b, ctx);
  }

  late final _EC_GROUP_get_curve_GFpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_GROUP_get_curve_GFp');
  late final _EC_GROUP_get_curve_GFp =
      _EC_GROUP_get_curve_GFpPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Sets the parameter of an ec curve. Synonym for EC_GROUP_set_curve
  /// \param  group  EC_GROUP object
  /// \param  p      BIGNUM with the prime number (GFp) or the polynomial
  /// defining the underlying field (GF2m)
  /// \param  a      BIGNUM with parameter a of the equation
  /// \param  b      BIGNUM with parameter b of the equation
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_set_curve_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_set_curve_GF2m(group, p, a, b, ctx);
  }

  late final _EC_GROUP_set_curve_GF2mPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_GROUP_set_curve_GF2m');
  late final _EC_GROUP_set_curve_GF2m =
      _EC_GROUP_set_curve_GF2mPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Gets the parameters of an ec curve. Synonym for EC_GROUP_get_curve
  /// \param  group  EC_GROUP object
  /// \param  p      BIGNUM with the prime number (GFp) or the polynomial
  /// defining the underlying field (GF2m)
  /// \param  a      BIGNUM for parameter a of the equation
  /// \param  b      BIGNUM for parameter b of the equation
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_get_curve_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_curve_GF2m(group, p, a, b, ctx);
  }

  late final _EC_GROUP_get_curve_GF2mPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_GROUP_get_curve_GF2m');
  late final _EC_GROUP_get_curve_GF2m =
      _EC_GROUP_get_curve_GF2mPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Returns the number of bits needed to represent a field element
  /// \param  group  EC_GROUP object
  /// \return number of bits needed to represent a field element
  int EC_GROUP_get_degree(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_get_degree(group);
  }

  late final _EC_GROUP_get_degreePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
        'EC_GROUP_get_degree',
      );
  late final _EC_GROUP_get_degree =
      _EC_GROUP_get_degreePtr.asFunction<int Function(ffi.Pointer<EC_GROUP>)>();

  /// Checks whether the parameter in the EC_GROUP define a valid ec group
  /// \param  group  EC_GROUP object
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 if group is a valid ec group and 0 otherwise
  int EC_GROUP_check(ffi.Pointer<EC_GROUP> group, ffi.Pointer<BN_CTX> ctx) {
    return _EC_GROUP_check(group, ctx);
  }

  late final _EC_GROUP_checkPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)
        >
      >('EC_GROUP_check');
  late final _EC_GROUP_check =
      _EC_GROUP_checkPtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)
      >();

  /// Checks whether the discriminant of the elliptic curve is zero or not
  /// \param  group  EC_GROUP object
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 if the discriminant is not zero and 0 otherwise
  int EC_GROUP_check_discriminant(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_check_discriminant(group, ctx);
  }

  late final _EC_GROUP_check_discriminantPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)
        >
      >('EC_GROUP_check_discriminant');
  late final _EC_GROUP_check_discriminant =
      _EC_GROUP_check_discriminantPtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)
      >();

  /// Compares two EC_GROUP objects
  /// \param  a    first EC_GROUP object
  /// \param  b    second EC_GROUP object
  /// \param  ctx  BN_CTX object (optional)
  /// \return 0 if the groups are equal, 1 if not, or -1 on error
  int EC_GROUP_cmp(
    ffi.Pointer<EC_GROUP> a,
    ffi.Pointer<EC_GROUP> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_cmp(a, b, ctx);
  }

  late final _EC_GROUP_cmpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_GROUP_cmp');
  late final _EC_GROUP_cmp =
      _EC_GROUP_cmpPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Creates a new EC_GROUP object with the specified parameters defined
  /// over GFp (defined by the equation y^2 = x^3 + a*x + b)
  /// \param  p    BIGNUM with the prime number
  /// \param  a    BIGNUM with the parameter a of the equation
  /// \param  b    BIGNUM with the parameter b of the equation
  /// \param  ctx  BN_CTX object (optional)
  /// \return newly created EC_GROUP object with the specified parameters
  ffi.Pointer<EC_GROUP> EC_GROUP_new_curve_GFp(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_new_curve_GFp(p, a, b, ctx);
  }

  late final _EC_GROUP_new_curve_GFpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_GROUP_new_curve_GFp');
  late final _EC_GROUP_new_curve_GFp =
      _EC_GROUP_new_curve_GFpPtr.asFunction<
        ffi.Pointer<EC_GROUP> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Creates a new EC_GROUP object with the specified parameters defined
  /// over GF2m (defined by the equation y^2 + x*y = x^3 + a*x^2 + b)
  /// \param  p    BIGNUM with the polynomial defining the underlying field
  /// \param  a    BIGNUM with the parameter a of the equation
  /// \param  b    BIGNUM with the parameter b of the equation
  /// \param  ctx  BN_CTX object (optional)
  /// \return newly created EC_GROUP object with the specified parameters
  ffi.Pointer<EC_GROUP> EC_GROUP_new_curve_GF2m(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_new_curve_GF2m(p, a, b, ctx);
  }

  late final _EC_GROUP_new_curve_GF2mPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_GROUP_new_curve_GF2m');
  late final _EC_GROUP_new_curve_GF2m =
      _EC_GROUP_new_curve_GF2mPtr.asFunction<
        ffi.Pointer<EC_GROUP> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Creates a EC_GROUP object with a curve specified by parameters.
  /// The parameters may be explicit or a named curve,
  /// \param  params A list of parameters describing the group.
  /// \param  libctx The associated library context or NULL for the default
  /// context
  /// \param  propq  A property query string
  /// \return newly created EC_GROUP object with specified parameters or NULL
  /// if an error occurred
  ffi.Pointer<EC_GROUP> EC_GROUP_new_from_params(
    ffi.Pointer<OSSL_PARAM> params,
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _EC_GROUP_new_from_params(params, libctx, propq);
  }

  late final _EC_GROUP_new_from_paramsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
            ffi.Pointer<OSSL_PARAM>,
            ffi.Pointer<OSSL_LIB_CTX>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('EC_GROUP_new_from_params');
  late final _EC_GROUP_new_from_params =
      _EC_GROUP_new_from_paramsPtr.asFunction<
        ffi.Pointer<EC_GROUP> Function(
          ffi.Pointer<OSSL_PARAM>,
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  /// Creates a EC_GROUP object with a curve specified by a NID
  /// \param  libctx The associated library context or NULL for the default
  /// context
  /// \param  propq  A property query string
  /// \param  nid    NID of the OID of the curve name
  /// \return newly created EC_GROUP object with specified curve or NULL
  /// if an error occurred
  ffi.Pointer<EC_GROUP> EC_GROUP_new_by_curve_name_ex(
    ffi.Pointer<OSSL_LIB_CTX> libctx,
    ffi.Pointer<ffi.Char> propq,
    int nid,
  ) {
    return _EC_GROUP_new_by_curve_name_ex(libctx, propq, nid);
  }

  late final _EC_GROUP_new_by_curve_name_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
            ffi.Pointer<OSSL_LIB_CTX>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('EC_GROUP_new_by_curve_name_ex');
  late final _EC_GROUP_new_by_curve_name_ex =
      _EC_GROUP_new_by_curve_name_exPtr.asFunction<
        ffi.Pointer<EC_GROUP> Function(
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  /// Creates a EC_GROUP object with a curve specified by a NID. Same as
  /// EC_GROUP_new_by_curve_name_ex but the libctx and propq are always
  /// NULL.
  /// \param  nid    NID of the OID of the curve name
  /// \return newly created EC_GROUP object with specified curve or NULL
  /// if an error occurred
  ffi.Pointer<EC_GROUP> EC_GROUP_new_by_curve_name(int nid) {
    return _EC_GROUP_new_by_curve_name(nid);
  }

  late final _EC_GROUP_new_by_curve_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_GROUP> Function(ffi.Int)>>(
        'EC_GROUP_new_by_curve_name',
      );
  late final _EC_GROUP_new_by_curve_name =
      _EC_GROUP_new_by_curve_namePtr.asFunction<
        ffi.Pointer<EC_GROUP> Function(int)
      >();

  /// Creates a new EC_GROUP object from an ECPARAMETERS object
  /// \param  params  pointer to the ECPARAMETERS object
  /// \return newly created EC_GROUP object with specified curve or NULL
  /// if an error occurred
  ffi.Pointer<EC_GROUP> EC_GROUP_new_from_ecparameters(
    ffi.Pointer<ECPARAMETERS> params,
  ) {
    return _EC_GROUP_new_from_ecparameters(params);
  }

  late final _EC_GROUP_new_from_ecparametersPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(ffi.Pointer<ECPARAMETERS>)
        >
      >('EC_GROUP_new_from_ecparameters');
  late final _EC_GROUP_new_from_ecparameters =
      _EC_GROUP_new_from_ecparametersPtr.asFunction<
        ffi.Pointer<EC_GROUP> Function(ffi.Pointer<ECPARAMETERS>)
      >();

  /// Creates an ECPARAMETERS object for the given EC_GROUP object.
  /// \param  group   pointer to the EC_GROUP object
  /// \param  params  pointer to an existing ECPARAMETERS object or NULL
  /// \return pointer to the new ECPARAMETERS object or NULL
  /// if an error occurred.
  ffi.Pointer<ECPARAMETERS> EC_GROUP_get_ecparameters(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<ECPARAMETERS> params,
  ) {
    return _EC_GROUP_get_ecparameters(group, params);
  }

  late final _EC_GROUP_get_ecparametersPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ECPARAMETERS> Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<ECPARAMETERS>,
          )
        >
      >('EC_GROUP_get_ecparameters');
  late final _EC_GROUP_get_ecparameters =
      _EC_GROUP_get_ecparametersPtr.asFunction<
        ffi.Pointer<ECPARAMETERS> Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<ECPARAMETERS>,
        )
      >();

  /// Creates a new EC_GROUP object from an ECPKPARAMETERS object
  /// \param  params  pointer to an existing ECPKPARAMETERS object, or NULL
  /// \return newly created EC_GROUP object with specified curve, or NULL
  /// if an error occurred
  ffi.Pointer<EC_GROUP> EC_GROUP_new_from_ecpkparameters(
    ffi.Pointer<ECPKPARAMETERS> params,
  ) {
    return _EC_GROUP_new_from_ecpkparameters(params);
  }

  late final _EC_GROUP_new_from_ecpkparametersPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(ffi.Pointer<ECPKPARAMETERS>)
        >
      >('EC_GROUP_new_from_ecpkparameters');
  late final _EC_GROUP_new_from_ecpkparameters =
      _EC_GROUP_new_from_ecpkparametersPtr.asFunction<
        ffi.Pointer<EC_GROUP> Function(ffi.Pointer<ECPKPARAMETERS>)
      >();

  /// Creates an ECPKPARAMETERS object for the given EC_GROUP object.
  /// \param  group   pointer to the EC_GROUP object
  /// \param  params  pointer to an existing ECPKPARAMETERS object or NULL
  /// \return pointer to the new ECPKPARAMETERS object or NULL
  /// if an error occurred.
  ffi.Pointer<ECPKPARAMETERS> EC_GROUP_get_ecpkparameters(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<ECPKPARAMETERS> params,
  ) {
    return _EC_GROUP_get_ecpkparameters(group, params);
  }

  late final _EC_GROUP_get_ecpkparametersPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ECPKPARAMETERS> Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<ECPKPARAMETERS>,
          )
        >
      >('EC_GROUP_get_ecpkparameters');
  late final _EC_GROUP_get_ecpkparameters =
      _EC_GROUP_get_ecpkparametersPtr.asFunction<
        ffi.Pointer<ECPKPARAMETERS> Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<ECPKPARAMETERS>,
        )
      >();

  /// EC_builtin_curves(EC_builtin_curve *r, size_t size) returns number of all
  /// available curves or zero if a error occurred. In case r is not zero,
  /// nitems EC_builtin_curve structures are filled with the data of the first
  /// nitems internal groups
  int EC_get_builtin_curves(ffi.Pointer<EC_builtin_curve> r, int nitems) {
    return _EC_get_builtin_curves(r, nitems);
  }

  late final _EC_get_builtin_curvesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<EC_builtin_curve>, ffi.Size)
        >
      >('EC_get_builtin_curves');
  late final _EC_get_builtin_curves =
      _EC_get_builtin_curvesPtr.asFunction<
        int Function(ffi.Pointer<EC_builtin_curve>, int)
      >();

  ffi.Pointer<ffi.Char> EC_curve_nid2nist(int nid) {
    return _EC_curve_nid2nist(nid);
  }

  late final _EC_curve_nid2nistPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
        'EC_curve_nid2nist',
      );
  late final _EC_curve_nid2nist =
      _EC_curve_nid2nistPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int EC_curve_nist2nid(ffi.Pointer<ffi.Char> name) {
    return _EC_curve_nist2nid(name);
  }

  late final _EC_curve_nist2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'EC_curve_nist2nid',
      );
  late final _EC_curve_nist2nid =
      _EC_curve_nist2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int EC_GROUP_check_named_curve(
    ffi.Pointer<EC_GROUP> group,
    int nist_only,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_check_named_curve(group, nist_only, ctx);
  }

  late final _EC_GROUP_check_named_curvePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Int, ffi.Pointer<BN_CTX>)
        >
      >('EC_GROUP_check_named_curve');
  late final _EC_GROUP_check_named_curve =
      _EC_GROUP_check_named_curvePtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>, int, ffi.Pointer<BN_CTX>)
      >();

  /// Creates a new EC_POINT object for the specified EC_GROUP
  /// \param  group  EC_GROUP the underlying EC_GROUP object
  /// \return newly created EC_POINT object or NULL if an error occurred
  ffi.Pointer<EC_POINT> EC_POINT_new(ffi.Pointer<EC_GROUP> group) {
    return _EC_POINT_new(group);
  }

  late final _EC_POINT_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_GROUP>)
        >
      >('EC_POINT_new');
  late final _EC_POINT_new =
      _EC_POINT_newPtr.asFunction<
        ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_GROUP>)
      >();

  /// Frees a EC_POINT object
  /// \param  point  EC_POINT object to be freed
  void EC_POINT_free(ffi.Pointer<EC_POINT> point) {
    return _EC_POINT_free(point);
  }

  late final _EC_POINT_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_POINT>)>>(
        'EC_POINT_free',
      );
  late final _EC_POINT_free =
      _EC_POINT_freePtr.asFunction<void Function(ffi.Pointer<EC_POINT>)>();

  /// Clears and frees a EC_POINT object
  /// \param  point  EC_POINT object to be cleared and freed
  void EC_POINT_clear_free(ffi.Pointer<EC_POINT> point) {
    return _EC_POINT_clear_free(point);
  }

  late final _EC_POINT_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_POINT>)>>(
        'EC_POINT_clear_free',
      );
  late final _EC_POINT_clear_free =
      _EC_POINT_clear_freePtr.asFunction<
        void Function(ffi.Pointer<EC_POINT>)
      >();

  /// Copies EC_POINT object
  /// \param  dst  destination EC_POINT object
  /// \param  src  source EC_POINT object
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_copy(ffi.Pointer<EC_POINT> dst, ffi.Pointer<EC_POINT> src) {
    return _EC_POINT_copy(dst, src);
  }

  late final _EC_POINT_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_POINT>, ffi.Pointer<EC_POINT>)
        >
      >('EC_POINT_copy');
  late final _EC_POINT_copy =
      _EC_POINT_copyPtr.asFunction<
        int Function(ffi.Pointer<EC_POINT>, ffi.Pointer<EC_POINT>)
      >();

  /// Creates a new EC_POINT object and copies the content of the supplied
  /// EC_POINT
  /// \param  src    source EC_POINT object
  /// \param  group  underlying the EC_GROUP object
  /// \return newly created EC_POINT object or NULL if an error occurred
  ffi.Pointer<EC_POINT> EC_POINT_dup(
    ffi.Pointer<EC_POINT> src,
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_POINT_dup(src, group);
  }

  late final _EC_POINT_dupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<EC_GROUP>,
          )
        >
      >('EC_POINT_dup');
  late final _EC_POINT_dup =
      _EC_POINT_dupPtr.asFunction<
        ffi.Pointer<EC_POINT> Function(
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_GROUP>,
        )
      >();

  /// Sets a point to infinity (neutral element)
  /// \param  group  underlying EC_GROUP object
  /// \param  point  EC_POINT to set to infinity
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_to_infinity(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> point,
  ) {
    return _EC_POINT_set_to_infinity(group, point);
  }

  late final _EC_POINT_set_to_infinityPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>)
        >
      >('EC_POINT_set_to_infinity');
  late final _EC_POINT_set_to_infinity =
      _EC_POINT_set_to_infinityPtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>)
      >();

  /// Returns the EC_METHOD used in EC_POINT object
  /// \param  point  EC_POINT object
  /// \return the EC_METHOD used
  ffi.Pointer<EC_METHOD> EC_POINT_method_of(ffi.Pointer<EC_POINT> point) {
    return _EC_POINT_method_of(point);
  }

  late final _EC_POINT_method_ofPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_METHOD> Function(ffi.Pointer<EC_POINT>)
        >
      >('EC_POINT_method_of');
  late final _EC_POINT_method_of =
      _EC_POINT_method_ofPtr.asFunction<
        ffi.Pointer<EC_METHOD> Function(ffi.Pointer<EC_POINT>)
      >();

  /// Sets the jacobian projective coordinates of a EC_POINT over GFp
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with the x-coordinate
  /// \param  y      BIGNUM with the y-coordinate
  /// \param  z      BIGNUM with the z-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_Jprojective_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BIGNUM> z,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_Jprojective_coordinates_GFp(group, p, x, y, z, ctx);
  }

  late final _EC_POINT_set_Jprojective_coordinates_GFpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_set_Jprojective_coordinates_GFp');
  late final _EC_POINT_set_Jprojective_coordinates_GFp =
      _EC_POINT_set_Jprojective_coordinates_GFpPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Gets the jacobian projective coordinates of a EC_POINT over GFp
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM for the x-coordinate
  /// \param  y      BIGNUM for the y-coordinate
  /// \param  z      BIGNUM for the z-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_get_Jprojective_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BIGNUM> z,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_get_Jprojective_coordinates_GFp(group, p, x, y, z, ctx);
  }

  late final _EC_POINT_get_Jprojective_coordinates_GFpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_get_Jprojective_coordinates_GFp');
  late final _EC_POINT_get_Jprojective_coordinates_GFp =
      _EC_POINT_get_Jprojective_coordinates_GFpPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Sets the affine coordinates of an EC_POINT
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with the x-coordinate
  /// \param  y      BIGNUM with the y-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_affine_coordinates(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_affine_coordinates(group, p, x, y, ctx);
  }

  late final _EC_POINT_set_affine_coordinatesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_set_affine_coordinates');
  late final _EC_POINT_set_affine_coordinates =
      _EC_POINT_set_affine_coordinatesPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Gets the affine coordinates of an EC_POINT.
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM for the x-coordinate
  /// \param  y      BIGNUM for the y-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_get_affine_coordinates(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_get_affine_coordinates(group, p, x, y, ctx);
  }

  late final _EC_POINT_get_affine_coordinatesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_get_affine_coordinates');
  late final _EC_POINT_get_affine_coordinates =
      _EC_POINT_get_affine_coordinatesPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Sets the affine coordinates of an EC_POINT. A synonym of
  /// EC_POINT_set_affine_coordinates
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with the x-coordinate
  /// \param  y      BIGNUM with the y-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_affine_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_affine_coordinates_GFp(group, p, x, y, ctx);
  }

  late final _EC_POINT_set_affine_coordinates_GFpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_set_affine_coordinates_GFp');
  late final _EC_POINT_set_affine_coordinates_GFp =
      _EC_POINT_set_affine_coordinates_GFpPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Gets the affine coordinates of an EC_POINT. A synonym of
  /// EC_POINT_get_affine_coordinates
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM for the x-coordinate
  /// \param  y      BIGNUM for the y-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_get_affine_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_get_affine_coordinates_GFp(group, p, x, y, ctx);
  }

  late final _EC_POINT_get_affine_coordinates_GFpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_get_affine_coordinates_GFp');
  late final _EC_POINT_get_affine_coordinates_GFp =
      _EC_POINT_get_affine_coordinates_GFpPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Sets the x9.62 compressed coordinates of a EC_POINT
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with x-coordinate
  /// \param  y_bit  integer with the y-Bit (either 0 or 1)
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_compressed_coordinates(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    int y_bit,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_compressed_coordinates(group, p, x, y_bit, ctx);
  }

  late final _EC_POINT_set_compressed_coordinatesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_set_compressed_coordinates');
  late final _EC_POINT_set_compressed_coordinates =
      _EC_POINT_set_compressed_coordinatesPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Sets the x9.62 compressed coordinates of a EC_POINT. A synonym of
  /// EC_POINT_set_compressed_coordinates
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with x-coordinate
  /// \param  y_bit  integer with the y-Bit (either 0 or 1)
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_compressed_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    int y_bit,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_compressed_coordinates_GFp(group, p, x, y_bit, ctx);
  }

  late final _EC_POINT_set_compressed_coordinates_GFpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_set_compressed_coordinates_GFp');
  late final _EC_POINT_set_compressed_coordinates_GFp =
      _EC_POINT_set_compressed_coordinates_GFpPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Sets the affine coordinates of an EC_POINT. A synonym of
  /// EC_POINT_set_affine_coordinates
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with the x-coordinate
  /// \param  y      BIGNUM with the y-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_affine_coordinates_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_affine_coordinates_GF2m(group, p, x, y, ctx);
  }

  late final _EC_POINT_set_affine_coordinates_GF2mPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_set_affine_coordinates_GF2m');
  late final _EC_POINT_set_affine_coordinates_GF2m =
      _EC_POINT_set_affine_coordinates_GF2mPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Gets the affine coordinates of an EC_POINT. A synonym of
  /// EC_POINT_get_affine_coordinates
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM for the x-coordinate
  /// \param  y      BIGNUM for the y-coordinate
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_get_affine_coordinates_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_get_affine_coordinates_GF2m(group, p, x, y, ctx);
  }

  late final _EC_POINT_get_affine_coordinates_GF2mPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_get_affine_coordinates_GF2m');
  late final _EC_POINT_get_affine_coordinates_GF2m =
      _EC_POINT_get_affine_coordinates_GF2mPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Sets the x9.62 compressed coordinates of a EC_POINT. A synonym of
  /// EC_POINT_set_compressed_coordinates
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  x      BIGNUM with x-coordinate
  /// \param  y_bit  integer with the y-Bit (either 0 or 1)
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_set_compressed_coordinates_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    int y_bit,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_compressed_coordinates_GF2m(group, p, x, y_bit, ctx);
  }

  late final _EC_POINT_set_compressed_coordinates_GF2mPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_set_compressed_coordinates_GF2m');
  late final _EC_POINT_set_compressed_coordinates_GF2m =
      _EC_POINT_set_compressed_coordinates_GF2mPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Encodes a EC_POINT object to a octet string
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  form   point conversion form
  /// \param  buf    memory buffer for the result. If NULL the function returns
  /// required buffer size.
  /// \param  len    length of the memory buffer
  /// \param  ctx    BN_CTX object (optional)
  /// \return the length of the encoded octet string or 0 if an error occurred
  int EC_POINT_point2oct(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    point_conversion_form_t form,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_point2oct(group, p, form.value, buf, len, ctx);
  }

  late final _EC_POINT_point2octPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Size,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_point2oct');
  late final _EC_POINT_point2oct =
      _EC_POINT_point2octPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Decodes a EC_POINT from a octet string
  /// \param  group  underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \param  buf    memory buffer with the encoded ec point
  /// \param  len    length of the encoded ec point
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_oct2point(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_oct2point(group, p, buf, len, ctx);
  }

  late final _EC_POINT_oct2pointPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Size,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_oct2point');
  late final _EC_POINT_oct2point =
      _EC_POINT_oct2pointPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Encodes an EC_POINT object to an allocated octet string
  /// \param  group  underlying EC_GROUP object
  /// \param  point  EC_POINT object
  /// \param  form   point conversion form
  /// \param  pbuf   returns pointer to allocated buffer
  /// \param  ctx    BN_CTX object (optional)
  /// \return the length of the encoded octet string or 0 if an error occurred
  int EC_POINT_point2buf(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> point,
    point_conversion_form_t form,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pbuf,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_point2buf(group, point, form.value, pbuf, ctx);
  }

  late final _EC_POINT_point2bufPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_point2buf');
  late final _EC_POINT_point2buf =
      _EC_POINT_point2bufPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  ffi.Pointer<BIGNUM> EC_POINT_point2bn(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<EC_POINT> arg1,
    point_conversion_form_t form,
    ffi.Pointer<BIGNUM> arg3,
    ffi.Pointer<BN_CTX> arg4,
  ) {
    return _EC_POINT_point2bn(arg0, arg1, form.value, arg3, arg4);
  }

  late final _EC_POINT_point2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.UnsignedInt,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_point2bn');
  late final _EC_POINT_point2bn =
      _EC_POINT_point2bnPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  ffi.Pointer<EC_POINT> EC_POINT_bn2point(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<BIGNUM> arg1,
    ffi.Pointer<EC_POINT> arg2,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _EC_POINT_bn2point(arg0, arg1, arg2, arg3);
  }

  late final _EC_POINT_bn2pointPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_bn2point');
  late final _EC_POINT_bn2point =
      _EC_POINT_bn2pointPtr.asFunction<
        ffi.Pointer<EC_POINT> Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  ffi.Pointer<ffi.Char> EC_POINT_point2hex(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<EC_POINT> arg1,
    point_conversion_form_t form,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _EC_POINT_point2hex(arg0, arg1, form.value, arg3);
  }

  late final _EC_POINT_point2hexPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.UnsignedInt,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_point2hex');
  late final _EC_POINT_point2hex =
      _EC_POINT_point2hexPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  ffi.Pointer<EC_POINT> EC_POINT_hex2point(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<EC_POINT> arg2,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _EC_POINT_hex2point(arg0, arg1, arg2, arg3);
  }

  late final _EC_POINT_hex2pointPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_hex2point');
  late final _EC_POINT_hex2point =
      _EC_POINT_hex2pointPtr.asFunction<
        ffi.Pointer<EC_POINT> Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Computes the sum of two EC_POINT
  /// \param  group  underlying EC_GROUP object
  /// \param  r      EC_POINT object for the result (r = a + b)
  /// \param  a      EC_POINT object with the first summand
  /// \param  b      EC_POINT object with the second summand
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_add(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> r,
    ffi.Pointer<EC_POINT> a,
    ffi.Pointer<EC_POINT> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_add(group, r, a, b, ctx);
  }

  late final _EC_POINT_addPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_add');
  late final _EC_POINT_add =
      _EC_POINT_addPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Computes the double of a EC_POINT
  /// \param  group  underlying EC_GROUP object
  /// \param  r      EC_POINT object for the result (r = 2 * a)
  /// \param  a      EC_POINT object
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_dbl(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> r,
    ffi.Pointer<EC_POINT> a,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_dbl(group, r, a, ctx);
  }

  late final _EC_POINT_dblPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_dbl');
  late final _EC_POINT_dbl =
      _EC_POINT_dblPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Computes the inverse of a EC_POINT
  /// \param  group  underlying EC_GROUP object
  /// \param  a      EC_POINT object to be inverted (it's used for the result as well)
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_invert(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> a,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_invert(group, a, ctx);
  }

  late final _EC_POINT_invertPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_invert');
  late final _EC_POINT_invert =
      _EC_POINT_invertPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Checks whether the point is the neutral element of the group
  /// \param  group  the underlying EC_GROUP object
  /// \param  p      EC_POINT object
  /// \return 1 if the point is the neutral element and 0 otherwise
  int EC_POINT_is_at_infinity(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
  ) {
    return _EC_POINT_is_at_infinity(group, p);
  }

  late final _EC_POINT_is_at_infinityPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>)
        >
      >('EC_POINT_is_at_infinity');
  late final _EC_POINT_is_at_infinity =
      _EC_POINT_is_at_infinityPtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>)
      >();

  /// Checks whether the point is on the curve
  /// \param  group  underlying EC_GROUP object
  /// \param  point  EC_POINT object to check
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 if the point is on the curve, 0 if not, or -1 on error
  int EC_POINT_is_on_curve(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> point,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_is_on_curve(group, point, ctx);
  }

  late final _EC_POINT_is_on_curvePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_is_on_curve');
  late final _EC_POINT_is_on_curve =
      _EC_POINT_is_on_curvePtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Compares two EC_POINTs
  /// \param  group  underlying EC_GROUP object
  /// \param  a      first EC_POINT object
  /// \param  b      second EC_POINT object
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 if the points are not equal, 0 if they are, or -1 on error
  int EC_POINT_cmp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> a,
    ffi.Pointer<EC_POINT> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_cmp(group, a, b, ctx);
  }

  late final _EC_POINT_cmpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_cmp');
  late final _EC_POINT_cmp =
      _EC_POINT_cmpPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int EC_POINT_make_affine(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> point,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_make_affine(group, point, ctx);
  }

  late final _EC_POINT_make_affinePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_make_affine');
  late final _EC_POINT_make_affine =
      _EC_POINT_make_affinePtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int EC_POINTs_make_affine(
    ffi.Pointer<EC_GROUP> group,
    int num,
    ffi.Pointer<ffi.Pointer<EC_POINT>> points,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINTs_make_affine(group, num, points, ctx);
  }

  late final _EC_POINTs_make_affinePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Size,
            ffi.Pointer<ffi.Pointer<EC_POINT>>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINTs_make_affine');
  late final _EC_POINTs_make_affine =
      _EC_POINTs_make_affinePtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          int,
          ffi.Pointer<ffi.Pointer<EC_POINT>>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Computes r = generator * n + sum_{i=0}^{num-1} p[i] * m[i]
  /// \param  group  underlying EC_GROUP object
  /// \param  r      EC_POINT object for the result
  /// \param  n      BIGNUM with the multiplier for the group generator (optional)
  /// \param  num    number further summands
  /// \param  p      array of size num of EC_POINT objects
  /// \param  m      array of size num of BIGNUM objects
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINTs_mul(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> r,
    ffi.Pointer<BIGNUM> n,
    int num,
    ffi.Pointer<ffi.Pointer<EC_POINT>> p,
    ffi.Pointer<ffi.Pointer<BIGNUM>> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINTs_mul(group, r, n, num, p, m, ctx);
  }

  late final _EC_POINTs_mulPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Size,
            ffi.Pointer<ffi.Pointer<EC_POINT>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINTs_mul');
  late final _EC_POINTs_mul =
      _EC_POINTs_mulPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<ffi.Pointer<EC_POINT>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Computes r = generator * n + q * m
  /// \param  group  underlying EC_GROUP object
  /// \param  r      EC_POINT object for the result
  /// \param  n      BIGNUM with the multiplier for the group generator (optional)
  /// \param  q      EC_POINT object with the first factor of the second summand
  /// \param  m      BIGNUM with the second factor of the second summand
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_POINT_mul(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> r,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<EC_POINT> q,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_mul(group, r, n, q, m, ctx);
  }

  late final _EC_POINT_mulPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_POINT_mul');
  late final _EC_POINT_mul =
      _EC_POINT_mulPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Stores multiples of generator for faster point multiplication
  /// \param  group  EC_GROUP object
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_GROUP_precompute_mult(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_precompute_mult(group, ctx);
  }

  late final _EC_GROUP_precompute_multPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)
        >
      >('EC_GROUP_precompute_mult');
  late final _EC_GROUP_precompute_mult =
      _EC_GROUP_precompute_multPtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)
      >();

  /// Reports whether a precomputation has been done
  /// \param  group  EC_GROUP object
  /// \return 1 if a pre-computation has been done and 0 otherwise
  int EC_GROUP_have_precompute_mult(ffi.Pointer<EC_GROUP> group) {
    return _EC_GROUP_have_precompute_mult(group);
  }

  late final _EC_GROUP_have_precompute_multPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
        'EC_GROUP_have_precompute_mult',
      );
  late final _EC_GROUP_have_precompute_mult =
      _EC_GROUP_have_precompute_multPtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>)
      >();

  /// /
  /// /*                       ASN1 stuff                                 */
  /// /
  ffi.Pointer<ASN1_ITEM> ECPKPARAMETERS_it() {
    return _ECPKPARAMETERS_it();
  }

  late final _ECPKPARAMETERS_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
        'ECPKPARAMETERS_it',
      );
  late final _ECPKPARAMETERS_it =
      _ECPKPARAMETERS_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ECPKPARAMETERS> ECPKPARAMETERS_new() {
    return _ECPKPARAMETERS_new();
  }

  late final _ECPKPARAMETERS_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ECPKPARAMETERS> Function()>>(
        'ECPKPARAMETERS_new',
      );
  late final _ECPKPARAMETERS_new =
      _ECPKPARAMETERS_newPtr.asFunction<
        ffi.Pointer<ECPKPARAMETERS> Function()
      >();

  void ECPKPARAMETERS_free(ffi.Pointer<ECPKPARAMETERS> a) {
    return _ECPKPARAMETERS_free(a);
  }

  late final _ECPKPARAMETERS_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ECPKPARAMETERS>)>
      >('ECPKPARAMETERS_free');
  late final _ECPKPARAMETERS_free =
      _ECPKPARAMETERS_freePtr.asFunction<
        void Function(ffi.Pointer<ECPKPARAMETERS>)
      >();

  ffi.Pointer<ASN1_ITEM> ECPARAMETERS_it() {
    return _ECPARAMETERS_it();
  }

  late final _ECPARAMETERS_itPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>>(
        'ECPARAMETERS_it',
      );
  late final _ECPARAMETERS_it =
      _ECPARAMETERS_itPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function()>();

  ffi.Pointer<ECPARAMETERS> ECPARAMETERS_new() {
    return _ECPARAMETERS_new();
  }

  late final _ECPARAMETERS_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ECPARAMETERS> Function()>>(
        'ECPARAMETERS_new',
      );
  late final _ECPARAMETERS_new =
      _ECPARAMETERS_newPtr.asFunction<ffi.Pointer<ECPARAMETERS> Function()>();

  void ECPARAMETERS_free(ffi.Pointer<ECPARAMETERS> a) {
    return _ECPARAMETERS_free(a);
  }

  late final _ECPARAMETERS_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ECPARAMETERS>)>>(
        'ECPARAMETERS_free',
      );
  late final _ECPARAMETERS_free =
      _ECPARAMETERS_freePtr.asFunction<
        void Function(ffi.Pointer<ECPARAMETERS>)
      >();

  /// EC_GROUP_get_basis_type() returns the NID of the basis type used to
  /// represent the field elements
  int EC_GROUP_get_basis_type(ffi.Pointer<EC_GROUP> arg0) {
    return _EC_GROUP_get_basis_type(arg0);
  }

  late final _EC_GROUP_get_basis_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
        'EC_GROUP_get_basis_type',
      );
  late final _EC_GROUP_get_basis_type =
      _EC_GROUP_get_basis_typePtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>)
      >();

  int EC_GROUP_get_trinomial_basis(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.UnsignedInt> k,
  ) {
    return _EC_GROUP_get_trinomial_basis(arg0, k);
  }

  late final _EC_GROUP_get_trinomial_basisPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<ffi.UnsignedInt>)
        >
      >('EC_GROUP_get_trinomial_basis');
  late final _EC_GROUP_get_trinomial_basis =
      _EC_GROUP_get_trinomial_basisPtr.asFunction<
        int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<ffi.UnsignedInt>)
      >();

  int EC_GROUP_get_pentanomial_basis(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.UnsignedInt> k1,
    ffi.Pointer<ffi.UnsignedInt> k2,
    ffi.Pointer<ffi.UnsignedInt> k3,
  ) {
    return _EC_GROUP_get_pentanomial_basis(arg0, k1, k2, k3);
  }

  late final _EC_GROUP_get_pentanomial_basisPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_GROUP>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<ffi.UnsignedInt>,
          )
        >
      >('EC_GROUP_get_pentanomial_basis');
  late final _EC_GROUP_get_pentanomial_basis =
      _EC_GROUP_get_pentanomial_basisPtr.asFunction<
        int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
        )
      >();

  int ECPKParameters_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EC_GROUP> x,
    int off,
  ) {
    return _ECPKParameters_print(bp, x, off);
  }

  late final _ECPKParameters_printPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_GROUP>, ffi.Int)
        >
      >('ECPKParameters_print');
  late final _ECPKParameters_print =
      _ECPKParameters_printPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_GROUP>, int)
      >();

  int ECPKParameters_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EC_GROUP> x,
    int off,
  ) {
    return _ECPKParameters_print_fp(fp, x, off);
  }

  late final _ECPKParameters_print_fpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_GROUP>, ffi.Int)
        >
      >('ECPKParameters_print_fp');
  late final _ECPKParameters_print_fp =
      _ECPKParameters_print_fpPtr.asFunction<
        int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_GROUP>, int)
      >();

  /// Creates a new EC_KEY object.
  /// \param  ctx  The library context for to use for this EC_KEY. May be NULL in
  /// which case the default library context is used.
  /// \return EC_KEY object or NULL if an error occurred.
  ffi.Pointer<EC_KEY> EC_KEY_new_ex(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> propq,
  ) {
    return _EC_KEY_new_ex(ctx, propq);
  }

  late final _EC_KEY_new_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
            ffi.Pointer<OSSL_LIB_CTX>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('EC_KEY_new_ex');
  late final _EC_KEY_new_ex =
      _EC_KEY_new_exPtr.asFunction<
        ffi.Pointer<EC_KEY> Function(
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  /// Creates a new EC_KEY object. Same as calling EC_KEY_new_ex with a
  /// NULL library context
  /// \return EC_KEY object or NULL if an error occurred.
  ffi.Pointer<EC_KEY> EC_KEY_new() {
    return _EC_KEY_new();
  }

  late final _EC_KEY_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_KEY> Function()>>('EC_KEY_new');
  late final _EC_KEY_new =
      _EC_KEY_newPtr.asFunction<ffi.Pointer<EC_KEY> Function()>();

  int EC_KEY_get_flags(ffi.Pointer<EC_KEY> key) {
    return _EC_KEY_get_flags(key);
  }

  late final _EC_KEY_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
        'EC_KEY_get_flags',
      );
  late final _EC_KEY_get_flags =
      _EC_KEY_get_flagsPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  void EC_KEY_set_flags(ffi.Pointer<EC_KEY> key, int flags) {
    return _EC_KEY_set_flags(key, flags);
  }

  late final _EC_KEY_set_flagsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>, ffi.Int)>
      >('EC_KEY_set_flags');
  late final _EC_KEY_set_flags =
      _EC_KEY_set_flagsPtr.asFunction<
        void Function(ffi.Pointer<EC_KEY>, int)
      >();

  void EC_KEY_clear_flags(ffi.Pointer<EC_KEY> key, int flags) {
    return _EC_KEY_clear_flags(key, flags);
  }

  late final _EC_KEY_clear_flagsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>, ffi.Int)>
      >('EC_KEY_clear_flags');
  late final _EC_KEY_clear_flags =
      _EC_KEY_clear_flagsPtr.asFunction<
        void Function(ffi.Pointer<EC_KEY>, int)
      >();

  int EC_KEY_decoded_from_explicit_params(ffi.Pointer<EC_KEY> key) {
    return _EC_KEY_decoded_from_explicit_params(key);
  }

  late final _EC_KEY_decoded_from_explicit_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
        'EC_KEY_decoded_from_explicit_params',
      );
  late final _EC_KEY_decoded_from_explicit_params =
      _EC_KEY_decoded_from_explicit_paramsPtr.asFunction<
        int Function(ffi.Pointer<EC_KEY>)
      >();

  /// Creates a new EC_KEY object using a named curve as underlying
  /// EC_GROUP object.
  /// \param  ctx   The library context for to use for this EC_KEY. May be NULL in
  /// which case the default library context is used.
  /// \param  propq Any property query string
  /// \param  nid   NID of the named curve.
  /// \return EC_KEY object or NULL if an error occurred.
  ffi.Pointer<EC_KEY> EC_KEY_new_by_curve_name_ex(
    ffi.Pointer<OSSL_LIB_CTX> ctx,
    ffi.Pointer<ffi.Char> propq,
    int nid,
  ) {
    return _EC_KEY_new_by_curve_name_ex(ctx, propq, nid);
  }

  late final _EC_KEY_new_by_curve_name_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
            ffi.Pointer<OSSL_LIB_CTX>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('EC_KEY_new_by_curve_name_ex');
  late final _EC_KEY_new_by_curve_name_ex =
      _EC_KEY_new_by_curve_name_exPtr.asFunction<
        ffi.Pointer<EC_KEY> Function(
          ffi.Pointer<OSSL_LIB_CTX>,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  /// Creates a new EC_KEY object using a named curve as underlying
  /// EC_GROUP object. Same as calling EC_KEY_new_by_curve_name_ex with a NULL
  /// library context and property query string.
  /// \param  nid  NID of the named curve.
  /// \return EC_KEY object or NULL if an error occurred.
  ffi.Pointer<EC_KEY> EC_KEY_new_by_curve_name(int nid) {
    return _EC_KEY_new_by_curve_name(nid);
  }

  late final _EC_KEY_new_by_curve_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_KEY> Function(ffi.Int)>>(
        'EC_KEY_new_by_curve_name',
      );
  late final _EC_KEY_new_by_curve_name =
      _EC_KEY_new_by_curve_namePtr.asFunction<
        ffi.Pointer<EC_KEY> Function(int)
      >();

  /// Frees a EC_KEY object.
  /// \param  key  EC_KEY object to be freed.
  void EC_KEY_free(ffi.Pointer<EC_KEY> key) {
    return _EC_KEY_free(key);
  }

  late final _EC_KEY_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>)>>(
        'EC_KEY_free',
      );
  late final _EC_KEY_free =
      _EC_KEY_freePtr.asFunction<void Function(ffi.Pointer<EC_KEY>)>();

  /// Copies a EC_KEY object.
  /// \param  dst  destination EC_KEY object
  /// \param  src  src EC_KEY object
  /// \return dst or NULL if an error occurred.
  ffi.Pointer<EC_KEY> EC_KEY_copy(
    ffi.Pointer<EC_KEY> dst,
    ffi.Pointer<EC_KEY> src,
  ) {
    return _EC_KEY_copy(dst, src);
  }

  late final _EC_KEY_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY>)
        >
      >('EC_KEY_copy');
  late final _EC_KEY_copy =
      _EC_KEY_copyPtr.asFunction<
        ffi.Pointer<EC_KEY> Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY>)
      >();

  /// Creates a new EC_KEY object and copies the content from src to it.
  /// \param  src  the source EC_KEY object
  /// \return newly created EC_KEY object or NULL if an error occurred.
  ffi.Pointer<EC_KEY> EC_KEY_dup(ffi.Pointer<EC_KEY> src) {
    return _EC_KEY_dup(src);
  }

  late final _EC_KEY_dupPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<EC_KEY> Function(ffi.Pointer<EC_KEY>)>
      >('EC_KEY_dup');
  late final _EC_KEY_dup =
      _EC_KEY_dupPtr.asFunction<
        ffi.Pointer<EC_KEY> Function(ffi.Pointer<EC_KEY>)
      >();

  /// Increases the internal reference count of a EC_KEY object.
  /// \param  key  EC_KEY object
  /// \return 1 on success and 0 if an error occurred.
  int EC_KEY_up_ref(ffi.Pointer<EC_KEY> key) {
    return _EC_KEY_up_ref(key);
  }

  late final _EC_KEY_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
        'EC_KEY_up_ref',
      );
  late final _EC_KEY_up_ref =
      _EC_KEY_up_refPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  /// Returns the ENGINE object of a EC_KEY object
  /// \param  eckey  EC_KEY object
  /// \return the ENGINE object (possibly NULL).
  ffi.Pointer<ENGINE> EC_KEY_get0_engine(ffi.Pointer<EC_KEY> eckey) {
    return _EC_KEY_get0_engine(eckey);
  }

  late final _EC_KEY_get0_enginePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ENGINE> Function(ffi.Pointer<EC_KEY>)>
      >('EC_KEY_get0_engine');
  late final _EC_KEY_get0_engine =
      _EC_KEY_get0_enginePtr.asFunction<
        ffi.Pointer<ENGINE> Function(ffi.Pointer<EC_KEY>)
      >();

  /// Returns the EC_GROUP object of a EC_KEY object
  /// \param  key  EC_KEY object
  /// \return the EC_GROUP object (possibly NULL).
  ffi.Pointer<EC_GROUP> EC_KEY_get0_group(ffi.Pointer<EC_KEY> key) {
    return _EC_KEY_get0_group(key);
  }

  late final _EC_KEY_get0_groupPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_KEY>)>
      >('EC_KEY_get0_group');
  late final _EC_KEY_get0_group =
      _EC_KEY_get0_groupPtr.asFunction<
        ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_KEY>)
      >();

  /// Sets the EC_GROUP of a EC_KEY object.
  /// \param  key    EC_KEY object
  /// \param  group  EC_GROUP to use in the EC_KEY object (note: the EC_KEY
  /// object will use an own copy of the EC_GROUP).
  /// \return 1 on success and 0 if an error occurred.
  int EC_KEY_set_group(ffi.Pointer<EC_KEY> key, ffi.Pointer<EC_GROUP> group) {
    return _EC_KEY_set_group(key, group);
  }

  late final _EC_KEY_set_groupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_GROUP>)
        >
      >('EC_KEY_set_group');
  late final _EC_KEY_set_group =
      _EC_KEY_set_groupPtr.asFunction<
        int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_GROUP>)
      >();

  /// Returns the private key of a EC_KEY object.
  /// \param  key  EC_KEY object
  /// \return a BIGNUM with the private key (possibly NULL).
  ffi.Pointer<BIGNUM> EC_KEY_get0_private_key(ffi.Pointer<EC_KEY> key) {
    return _EC_KEY_get0_private_key(key);
  }

  late final _EC_KEY_get0_private_keyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_KEY>)>
      >('EC_KEY_get0_private_key');
  late final _EC_KEY_get0_private_key =
      _EC_KEY_get0_private_keyPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_KEY>)
      >();

  /// Sets the private key of a EC_KEY object.
  /// \param  key  EC_KEY object
  /// \param  prv  BIGNUM with the private key (note: the EC_KEY object
  /// will use an own copy of the BIGNUM).
  /// \return 1 on success and 0 if an error occurred.
  int EC_KEY_set_private_key(ffi.Pointer<EC_KEY> key, ffi.Pointer<BIGNUM> prv) {
    return _EC_KEY_set_private_key(key, prv);
  }

  late final _EC_KEY_set_private_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>)
        >
      >('EC_KEY_set_private_key');
  late final _EC_KEY_set_private_key =
      _EC_KEY_set_private_keyPtr.asFunction<
        int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>)
      >();

  /// Returns the public key of a EC_KEY object.
  /// \param  key  the EC_KEY object
  /// \return a EC_POINT object with the public key (possibly NULL)
  ffi.Pointer<EC_POINT> EC_KEY_get0_public_key(ffi.Pointer<EC_KEY> key) {
    return _EC_KEY_get0_public_key(key);
  }

  late final _EC_KEY_get0_public_keyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_KEY>)>
      >('EC_KEY_get0_public_key');
  late final _EC_KEY_get0_public_key =
      _EC_KEY_get0_public_keyPtr.asFunction<
        ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_KEY>)
      >();

  /// Sets the public key of a EC_KEY object.
  /// \param  key  EC_KEY object
  /// \param  pub  EC_POINT object with the public key (note: the EC_KEY object
  /// will use an own copy of the EC_POINT object).
  /// \return 1 on success and 0 if an error occurred.
  int EC_KEY_set_public_key(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<EC_POINT> pub,
  ) {
    return _EC_KEY_set_public_key(key, pub);
  }

  late final _EC_KEY_set_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_POINT>)
        >
      >('EC_KEY_set_public_key');
  late final _EC_KEY_set_public_key =
      _EC_KEY_set_public_keyPtr.asFunction<
        int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_POINT>)
      >();

  int EC_KEY_get_enc_flags(ffi.Pointer<EC_KEY> key) {
    return _EC_KEY_get_enc_flags(key);
  }

  late final _EC_KEY_get_enc_flagsPtr =
      _lookup<
        ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<EC_KEY>)>
      >('EC_KEY_get_enc_flags');
  late final _EC_KEY_get_enc_flags =
      _EC_KEY_get_enc_flagsPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  void EC_KEY_set_enc_flags(ffi.Pointer<EC_KEY> eckey, int flags) {
    return _EC_KEY_set_enc_flags(eckey, flags);
  }

  late final _EC_KEY_set_enc_flagsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EC_KEY>, ffi.UnsignedInt)
        >
      >('EC_KEY_set_enc_flags');
  late final _EC_KEY_set_enc_flags =
      _EC_KEY_set_enc_flagsPtr.asFunction<
        void Function(ffi.Pointer<EC_KEY>, int)
      >();

  point_conversion_form_t EC_KEY_get_conv_form(ffi.Pointer<EC_KEY> key) {
    return point_conversion_form_t.fromValue(_EC_KEY_get_conv_form(key));
  }

  late final _EC_KEY_get_conv_formPtr =
      _lookup<
        ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<EC_KEY>)>
      >('EC_KEY_get_conv_form');
  late final _EC_KEY_get_conv_form =
      _EC_KEY_get_conv_formPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  void EC_KEY_set_conv_form(
    ffi.Pointer<EC_KEY> eckey,
    point_conversion_form_t cform,
  ) {
    return _EC_KEY_set_conv_form(eckey, cform.value);
  }

  late final _EC_KEY_set_conv_formPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EC_KEY>, ffi.UnsignedInt)
        >
      >('EC_KEY_set_conv_form');
  late final _EC_KEY_set_conv_form =
      _EC_KEY_set_conv_formPtr.asFunction<
        void Function(ffi.Pointer<EC_KEY>, int)
      >();

  int EC_KEY_set_ex_data(
    ffi.Pointer<EC_KEY> key,
    int idx,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EC_KEY_set_ex_data(key, idx, arg);
  }

  late final _EC_KEY_set_ex_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Int, ffi.Pointer<ffi.Void>)
        >
      >('EC_KEY_set_ex_data');
  late final _EC_KEY_set_ex_data =
      _EC_KEY_set_ex_dataPtr.asFunction<
        int Function(ffi.Pointer<EC_KEY>, int, ffi.Pointer<ffi.Void>)
      >();

  ffi.Pointer<ffi.Void> EC_KEY_get_ex_data(ffi.Pointer<EC_KEY> key, int idx) {
    return _EC_KEY_get_ex_data(key, idx);
  }

  late final _EC_KEY_get_ex_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EC_KEY>, ffi.Int)
        >
      >('EC_KEY_get_ex_data');
  late final _EC_KEY_get_ex_data =
      _EC_KEY_get_ex_dataPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<EC_KEY>, int)
      >();

  /// wrapper functions for the underlying EC_GROUP object
  void EC_KEY_set_asn1_flag(ffi.Pointer<EC_KEY> eckey, int asn1_flag) {
    return _EC_KEY_set_asn1_flag(eckey, asn1_flag);
  }

  late final _EC_KEY_set_asn1_flagPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>, ffi.Int)>
      >('EC_KEY_set_asn1_flag');
  late final _EC_KEY_set_asn1_flag =
      _EC_KEY_set_asn1_flagPtr.asFunction<
        void Function(ffi.Pointer<EC_KEY>, int)
      >();

  /// Creates a table of pre-computed multiples of the generator to
  /// accelerate further EC_KEY operations.
  /// \param  key  EC_KEY object
  /// \param  ctx  BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred.
  int EC_KEY_precompute_mult(ffi.Pointer<EC_KEY> key, ffi.Pointer<BN_CTX> ctx) {
    return _EC_KEY_precompute_mult(key, ctx);
  }

  late final _EC_KEY_precompute_multPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<BN_CTX>)
        >
      >('EC_KEY_precompute_mult');
  late final _EC_KEY_precompute_mult =
      _EC_KEY_precompute_multPtr.asFunction<
        int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<BN_CTX>)
      >();

  /// Creates a new ec private (and optional a new public) key.
  /// \param  key  EC_KEY object
  /// \return 1 on success and 0 if an error occurred.
  int EC_KEY_generate_key(ffi.Pointer<EC_KEY> key) {
    return _EC_KEY_generate_key(key);
  }

  late final _EC_KEY_generate_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
        'EC_KEY_generate_key',
      );
  late final _EC_KEY_generate_key =
      _EC_KEY_generate_keyPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  /// Verifies that a private and/or public key is valid.
  /// \param  key  the EC_KEY object
  /// \return 1 on success and 0 otherwise.
  int EC_KEY_check_key(ffi.Pointer<EC_KEY> key) {
    return _EC_KEY_check_key(key);
  }

  late final _EC_KEY_check_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
        'EC_KEY_check_key',
      );
  late final _EC_KEY_check_key =
      _EC_KEY_check_keyPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  /// Indicates if an EC_KEY can be used for signing.
  /// \param  eckey  the EC_KEY object
  /// \return 1 if can can sign and 0 otherwise.
  int EC_KEY_can_sign(ffi.Pointer<EC_KEY> eckey) {
    return _EC_KEY_can_sign(eckey);
  }

  late final _EC_KEY_can_signPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
        'EC_KEY_can_sign',
      );
  late final _EC_KEY_can_sign =
      _EC_KEY_can_signPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  /// Sets a public key from affine coordinates performing
  /// necessary NIST PKV tests.
  /// \param  key  the EC_KEY object
  /// \param  x    public key x coordinate
  /// \param  y    public key y coordinate
  /// \return 1 on success and 0 otherwise.
  int EC_KEY_set_public_key_affine_coordinates(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
  ) {
    return _EC_KEY_set_public_key_affine_coordinates(key, x, y);
  }

  late final _EC_KEY_set_public_key_affine_coordinatesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_KEY>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('EC_KEY_set_public_key_affine_coordinates');
  late final _EC_KEY_set_public_key_affine_coordinates =
      _EC_KEY_set_public_key_affine_coordinatesPtr.asFunction<
        int Function(
          ffi.Pointer<EC_KEY>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  /// Encodes an EC_KEY public key to an allocated octet string
  /// \param  key    key to encode
  /// \param  form   point conversion form
  /// \param  pbuf   returns pointer to allocated buffer
  /// \param  ctx    BN_CTX object (optional)
  /// \return the length of the encoded octet string or 0 if an error occurred
  int EC_KEY_key2buf(
    ffi.Pointer<EC_KEY> key,
    point_conversion_form_t form,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pbuf,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_KEY_key2buf(key, form.value, pbuf, ctx);
  }

  late final _EC_KEY_key2bufPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<EC_KEY>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_KEY_key2buf');
  late final _EC_KEY_key2buf =
      _EC_KEY_key2bufPtr.asFunction<
        int Function(
          ffi.Pointer<EC_KEY>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Decodes a EC_KEY public key from a octet string
  /// \param  key    key to decode
  /// \param  buf    memory buffer with the encoded ec point
  /// \param  len    length of the encoded ec point
  /// \param  ctx    BN_CTX object (optional)
  /// \return 1 on success and 0 if an error occurred
  int EC_KEY_oct2key(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_KEY_oct2key(key, buf, len, ctx);
  }

  late final _EC_KEY_oct2keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_KEY>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Size,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('EC_KEY_oct2key');
  late final _EC_KEY_oct2key =
      _EC_KEY_oct2keyPtr.asFunction<
        int Function(
          ffi.Pointer<EC_KEY>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BN_CTX>,
        )
      >();

  /// Decodes an EC_KEY private key from an octet string
  /// \param  key    key to decode
  /// \param  buf    memory buffer with the encoded private key
  /// \param  len    length of the encoded key
  /// \return 1 on success and 0 if an error occurred
  int EC_KEY_oct2priv(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
  ) {
    return _EC_KEY_oct2priv(key, buf, len);
  }

  late final _EC_KEY_oct2privPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_KEY>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Size,
          )
        >
      >('EC_KEY_oct2priv');
  late final _EC_KEY_oct2priv =
      _EC_KEY_oct2privPtr.asFunction<
        int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>, int)
      >();

  /// Encodes a EC_KEY private key to an octet string
  /// \param  key    key to encode
  /// \param  buf    memory buffer for the result. If NULL the function returns
  /// required buffer size.
  /// \param  len    length of the memory buffer
  /// \return the length of the encoded octet string or 0 if an error occurred
  int EC_KEY_priv2oct(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
  ) {
    return _EC_KEY_priv2oct(key, buf, len);
  }

  late final _EC_KEY_priv2octPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<EC_KEY>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Size,
          )
        >
      >('EC_KEY_priv2oct');
  late final _EC_KEY_priv2oct =
      _EC_KEY_priv2octPtr.asFunction<
        int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>, int)
      >();

  /// Encodes an EC_KEY private key to an allocated octet string
  /// \param  eckey  key to encode
  /// \param  pbuf   returns pointer to allocated buffer
  /// \return the length of the encoded octet string or 0 if an error occurred
  int EC_KEY_priv2buf(
    ffi.Pointer<EC_KEY> eckey,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pbuf,
  ) {
    return _EC_KEY_priv2buf(eckey, pbuf);
  }

  late final _EC_KEY_priv2bufPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<EC_KEY>,
            ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          )
        >
      >('EC_KEY_priv2buf');
  late final _EC_KEY_priv2buf =
      _EC_KEY_priv2bufPtr.asFunction<
        int Function(
          ffi.Pointer<EC_KEY>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
        )
      >();

  /// Prints out the ec parameters on human readable form.
  /// \param  bp   BIO object to which the information is printed
  /// \param  key  EC_KEY object
  /// \return 1 on success and 0 if an error occurred
  int ECParameters_print(ffi.Pointer<BIO> bp, ffi.Pointer<EC_KEY> key) {
    return _ECParameters_print(bp, key);
  }

  late final _ECParameters_printPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>)
        >
      >('ECParameters_print');
  late final _ECParameters_print =
      _ECParameters_printPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>)
      >();

  /// Prints out the contents of a EC_KEY object
  /// \param  bp   BIO object to which the information is printed
  /// \param  key  EC_KEY object
  /// \param  off  line offset
  /// \return 1 on success and 0 if an error occurred
  int EC_KEY_print(ffi.Pointer<BIO> bp, ffi.Pointer<EC_KEY> key, int off) {
    return _EC_KEY_print(bp, key, off);
  }

  late final _EC_KEY_printPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>, ffi.Int)
        >
      >('EC_KEY_print');
  late final _EC_KEY_print =
      _EC_KEY_printPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>, int)
      >();

  /// Prints out the ec parameters on human readable form.
  /// \param  fp   file descriptor to which the information is printed
  /// \param  key  EC_KEY object
  /// \return 1 on success and 0 if an error occurred
  int ECParameters_print_fp(ffi.Pointer<FILE> fp, ffi.Pointer<EC_KEY> key) {
    return _ECParameters_print_fp(fp, key);
  }

  late final _ECParameters_print_fpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>)
        >
      >('ECParameters_print_fp');
  late final _ECParameters_print_fp =
      _ECParameters_print_fpPtr.asFunction<
        int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>)
      >();

  /// Prints out the contents of a EC_KEY object
  /// \param  fp   file descriptor to which the information is printed
  /// \param  key  EC_KEY object
  /// \param  off  line offset
  /// \return 1 on success and 0 if an error occurred
  int EC_KEY_print_fp(ffi.Pointer<FILE> fp, ffi.Pointer<EC_KEY> key, int off) {
    return _EC_KEY_print_fp(fp, key, off);
  }

  late final _EC_KEY_print_fpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>, ffi.Int)
        >
      >('EC_KEY_print_fp');
  late final _EC_KEY_print_fp =
      _EC_KEY_print_fpPtr.asFunction<
        int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>, int)
      >();

  ffi.Pointer<EC_KEY_METHOD> EC_KEY_OpenSSL() {
    return _EC_KEY_OpenSSL();
  }

  late final _EC_KEY_OpenSSLPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_KEY_METHOD> Function()>>(
        'EC_KEY_OpenSSL',
      );
  late final _EC_KEY_OpenSSL =
      _EC_KEY_OpenSSLPtr.asFunction<ffi.Pointer<EC_KEY_METHOD> Function()>();

  ffi.Pointer<EC_KEY_METHOD> EC_KEY_get_default_method() {
    return _EC_KEY_get_default_method();
  }

  late final _EC_KEY_get_default_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_KEY_METHOD> Function()>>(
        'EC_KEY_get_default_method',
      );
  late final _EC_KEY_get_default_method =
      _EC_KEY_get_default_methodPtr.asFunction<
        ffi.Pointer<EC_KEY_METHOD> Function()
      >();

  void EC_KEY_set_default_method(ffi.Pointer<EC_KEY_METHOD> meth) {
    return _EC_KEY_set_default_method(meth);
  }

  late final _EC_KEY_set_default_methodPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY_METHOD>)>
      >('EC_KEY_set_default_method');
  late final _EC_KEY_set_default_method =
      _EC_KEY_set_default_methodPtr.asFunction<
        void Function(ffi.Pointer<EC_KEY_METHOD>)
      >();

  ffi.Pointer<EC_KEY_METHOD> EC_KEY_get_method(ffi.Pointer<EC_KEY> key) {
    return _EC_KEY_get_method(key);
  }

  late final _EC_KEY_get_methodPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_KEY_METHOD> Function(ffi.Pointer<EC_KEY>)
        >
      >('EC_KEY_get_method');
  late final _EC_KEY_get_method =
      _EC_KEY_get_methodPtr.asFunction<
        ffi.Pointer<EC_KEY_METHOD> Function(ffi.Pointer<EC_KEY>)
      >();

  int EC_KEY_set_method(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<EC_KEY_METHOD> meth,
  ) {
    return _EC_KEY_set_method(key, meth);
  }

  late final _EC_KEY_set_methodPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY_METHOD>)
        >
      >('EC_KEY_set_method');
  late final _EC_KEY_set_method =
      _EC_KEY_set_methodPtr.asFunction<
        int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY_METHOD>)
      >();

  ffi.Pointer<EC_KEY> EC_KEY_new_method(ffi.Pointer<ENGINE> engine) {
    return _EC_KEY_new_method(engine);
  }

  late final _EC_KEY_new_methodPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<EC_KEY> Function(ffi.Pointer<ENGINE>)>
      >('EC_KEY_new_method');
  late final _EC_KEY_new_method =
      _EC_KEY_new_methodPtr.asFunction<
        ffi.Pointer<EC_KEY> Function(ffi.Pointer<ENGINE>)
      >();

  /// The old name for ecdh_KDF_X9_63
  /// The ECDH KDF specification has been mistakingly attributed to ANSI X9.62,
  /// it is actually specified in ANSI X9.63.
  /// This identifier is retained for backwards compatibility
  int ECDH_KDF_X9_62(
    ffi.Pointer<ffi.UnsignedChar> out,
    int outlen,
    ffi.Pointer<ffi.UnsignedChar> Z,
    int Zlen,
    ffi.Pointer<ffi.UnsignedChar> sinfo,
    int sinfolen,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _ECDH_KDF_X9_62(out, outlen, Z, Zlen, sinfo, sinfolen, md);
  }

  late final _ECDH_KDF_X9_62Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Size,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Size,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Size,
            ffi.Pointer<EVP_MD>,
          )
        >
      >('ECDH_KDF_X9_62');
  late final _ECDH_KDF_X9_62 =
      _ECDH_KDF_X9_62Ptr.asFunction<
        int Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<EVP_MD>,
        )
      >();

  int ECDH_compute_key(
    ffi.Pointer<ffi.Void> out,
    int outlen,
    ffi.Pointer<EC_POINT> pub_key,
    ffi.Pointer<EC_KEY> ecdh,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void> in$,
          ffi.Size inlen,
          ffi.Pointer<ffi.Void> out,
          ffi.Pointer<ffi.Size> outlen,
        )
      >
    >
    KDF,
  ) {
    return _ECDH_compute_key(out, outlen, pub_key, ecdh, KDF);
  }

  late final _ECDH_compute_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<EC_KEY>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void> in$,
                  ffi.Size inlen,
                  ffi.Pointer<ffi.Void> out,
                  ffi.Pointer<ffi.Size> outlen,
                )
              >
            >,
          )
        >
      >('ECDH_compute_key');
  late final _ECDH_compute_key =
      _ECDH_compute_keyPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_KEY>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                ffi.Pointer<ffi.Void> in$,
                ffi.Size inlen,
                ffi.Pointer<ffi.Void> out,
                ffi.Pointer<ffi.Size> outlen,
              )
            >
          >,
        )
      >();

  /// Allocates and initialize a ECDSA_SIG structure
  /// \return pointer to a ECDSA_SIG structure or NULL if an error occurred
  ffi.Pointer<ECDSA_SIG> ECDSA_SIG_new() {
    return _ECDSA_SIG_new();
  }

  late final _ECDSA_SIG_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ECDSA_SIG> Function()>>(
        'ECDSA_SIG_new',
      );
  late final _ECDSA_SIG_new =
      _ECDSA_SIG_newPtr.asFunction<ffi.Pointer<ECDSA_SIG> Function()>();

  /// frees a ECDSA_SIG structure
  /// \param  sig  pointer to the ECDSA_SIG structure
  void ECDSA_SIG_free(ffi.Pointer<ECDSA_SIG> sig) {
    return _ECDSA_SIG_free(sig);
  }

  late final _ECDSA_SIG_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ECDSA_SIG>)>>(
        'ECDSA_SIG_free',
      );
  late final _ECDSA_SIG_free =
      _ECDSA_SIG_freePtr.asFunction<void Function(ffi.Pointer<ECDSA_SIG>)>();

  /// i2d_ECDSA_SIG encodes content of ECDSA_SIG (note: this function modifies *pp
  /// (*pp += length of the DER encoded signature)).
  /// \param  sig  pointer to the ECDSA_SIG object
  /// \param  pp   pointer to a unsigned char pointer for the output or NULL
  /// \return the length of the DER encoded ECDSA_SIG object or a negative value
  /// on error
  ffi.Pointer<ECDSA_SIG> d2i_ECDSA_SIG(
    ffi.Pointer<ffi.Pointer<ECDSA_SIG>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in$,
    int len,
  ) {
    return _d2i_ECDSA_SIG(a, in$, len);
  }

  late final _d2i_ECDSA_SIGPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(
            ffi.Pointer<ffi.Pointer<ECDSA_SIG>>,
            ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
            ffi.Long,
          )
        >
      >('d2i_ECDSA_SIG');
  late final _d2i_ECDSA_SIG = _d2i_ECDSA_SIGPtr
      .asFunction<
        ffi.Pointer<ECDSA_SIG> Function(
          ffi.Pointer<ffi.Pointer<ECDSA_SIG>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int,
        )
      >();

  int i2d_ECDSA_SIG(
    ffi.Pointer<ECDSA_SIG> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ECDSA_SIG(a, out);
  }

  late final _i2d_ECDSA_SIGPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ECDSA_SIG>,
            ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          )
        >
      >('i2d_ECDSA_SIG');
  late final _i2d_ECDSA_SIG = _i2d_ECDSA_SIGPtr
      .asFunction<
        int Function(
          ffi.Pointer<ECDSA_SIG>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
        )
      >();

  /// Accessor for r and s fields of ECDSA_SIG
  /// \param  sig  pointer to ECDSA_SIG structure
  /// \param  pr   pointer to BIGNUM pointer for r (may be NULL)
  /// \param  ps   pointer to BIGNUM pointer for s (may be NULL)
  void ECDSA_SIG_get0(
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<ffi.Pointer<BIGNUM>> pr,
    ffi.Pointer<ffi.Pointer<BIGNUM>> ps,
  ) {
    return _ECDSA_SIG_get0(sig, pr, ps);
  }

  late final _ECDSA_SIG_get0Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ECDSA_SIG>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
          )
        >
      >('ECDSA_SIG_get0');
  late final _ECDSA_SIG_get0 =
      _ECDSA_SIG_get0Ptr.asFunction<
        void Function(
          ffi.Pointer<ECDSA_SIG>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
        )
      >();

  /// Accessor for r field of ECDSA_SIG
  /// \param  sig  pointer to ECDSA_SIG structure
  ffi.Pointer<BIGNUM> ECDSA_SIG_get0_r(ffi.Pointer<ECDSA_SIG> sig) {
    return _ECDSA_SIG_get0_r(sig);
  }

  late final _ECDSA_SIG_get0_rPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<ECDSA_SIG>)>
      >('ECDSA_SIG_get0_r');
  late final _ECDSA_SIG_get0_r =
      _ECDSA_SIG_get0_rPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<ECDSA_SIG>)
      >();

  /// Accessor for s field of ECDSA_SIG
  /// \param  sig  pointer to ECDSA_SIG structure
  ffi.Pointer<BIGNUM> ECDSA_SIG_get0_s(ffi.Pointer<ECDSA_SIG> sig) {
    return _ECDSA_SIG_get0_s(sig);
  }

  late final _ECDSA_SIG_get0_sPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<ECDSA_SIG>)>
      >('ECDSA_SIG_get0_s');
  late final _ECDSA_SIG_get0_s =
      _ECDSA_SIG_get0_sPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<ECDSA_SIG>)
      >();

  /// Setter for r and s fields of ECDSA_SIG
  /// \param  sig  pointer to ECDSA_SIG structure
  /// \param  r    pointer to BIGNUM for r
  /// \param  s    pointer to BIGNUM for s
  int ECDSA_SIG_set0(
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> s,
  ) {
    return _ECDSA_SIG_set0(sig, r, s);
  }

  late final _ECDSA_SIG_set0Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ECDSA_SIG>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('ECDSA_SIG_set0');
  late final _ECDSA_SIG_set0 =
      _ECDSA_SIG_set0Ptr.asFunction<
        int Function(
          ffi.Pointer<ECDSA_SIG>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  /// Computes the ECDSA signature of the given hash value using
  /// the supplied private key and returns the created signature.
  /// \param  dgst      pointer to the hash value
  /// \param  dgst_len  length of the hash value
  /// \param  eckey     EC_KEY object containing a private EC key
  /// \return pointer to a ECDSA_SIG structure or NULL if an error occurred
  ffi.Pointer<ECDSA_SIG> ECDSA_do_sign(
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgst_len,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_do_sign(dgst, dgst_len, eckey);
  }

  late final _ECDSA_do_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDSA_do_sign');
  late final _ECDSA_do_sign =
      _ECDSA_do_signPtr.asFunction<
        ffi.Pointer<ECDSA_SIG> Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<EC_KEY>,
        )
      >();

  /// Computes ECDSA signature of a given hash value using the supplied
  /// private key (note: sig must point to ECDSA_size(eckey) bytes of memory).
  /// \param  dgst     pointer to the hash value to sign
  /// \param  dgstlen  length of the hash value
  /// \param  kinv     BIGNUM with a pre-computed inverse k (optional)
  /// \param  rp       BIGNUM with a pre-computed rp value (optional),
  /// see ECDSA_sign_setup
  /// \param  eckey    EC_KEY object containing a private EC key
  /// \return pointer to a ECDSA_SIG structure or NULL if an error occurred
  ffi.Pointer<ECDSA_SIG> ECDSA_do_sign_ex(
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgstlen,
    ffi.Pointer<BIGNUM> kinv,
    ffi.Pointer<BIGNUM> rp,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_do_sign_ex(dgst, dgstlen, kinv, rp, eckey);
  }

  late final _ECDSA_do_sign_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDSA_do_sign_ex');
  late final _ECDSA_do_sign_ex =
      _ECDSA_do_sign_exPtr.asFunction<
        ffi.Pointer<ECDSA_SIG> Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<EC_KEY>,
        )
      >();

  /// Verifies that the supplied signature is a valid ECDSA
  /// signature of the supplied hash value using the supplied public key.
  /// \param  dgst      pointer to the hash value
  /// \param  dgst_len  length of the hash value
  /// \param  sig       ECDSA_SIG structure
  /// \param  eckey     EC_KEY object containing a public EC key
  /// \return 1 if the signature is valid, 0 if the signature is invalid
  /// and -1 on error
  int ECDSA_do_verify(
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgst_len,
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_do_verify(dgst, dgst_len, sig, eckey);
  }

  late final _ECDSA_do_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<ECDSA_SIG>,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDSA_do_verify');
  late final _ECDSA_do_verify =
      _ECDSA_do_verifyPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ECDSA_SIG>,
          ffi.Pointer<EC_KEY>,
        )
      >();

  /// Precompute parts of the signing operation
  /// \param  eckey  EC_KEY object containing a private EC key
  /// \param  ctx    BN_CTX object (optional)
  /// \param  kinv   BIGNUM pointer for the inverse of k
  /// \param  rp     BIGNUM pointer for x coordinate of k * generator
  /// \return 1 on success and 0 otherwise
  int ECDSA_sign_setup(
    ffi.Pointer<EC_KEY> eckey,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<ffi.Pointer<BIGNUM>> kinv,
    ffi.Pointer<ffi.Pointer<BIGNUM>> rp,
  ) {
    return _ECDSA_sign_setup(eckey, ctx, kinv, rp);
  }

  late final _ECDSA_sign_setupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_KEY>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
          )
        >
      >('ECDSA_sign_setup');
  late final _ECDSA_sign_setup =
      _ECDSA_sign_setupPtr.asFunction<
        int Function(
          ffi.Pointer<EC_KEY>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
        )
      >();

  /// Computes ECDSA signature of a given hash value using the supplied
  /// private key (note: sig must point to ECDSA_size(eckey) bytes of memory).
  /// \param  type     this parameter is ignored
  /// \param  dgst     pointer to the hash value to sign
  /// \param  dgstlen  length of the hash value
  /// \param  sig      memory for the DER encoded created signature
  /// \param  siglen   pointer to the length of the returned signature
  /// \param  eckey    EC_KEY object containing a private EC key
  /// \return 1 on success and 0 otherwise
  int ECDSA_sign(
    int type,
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgstlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.UnsignedInt> siglen,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_sign(type, dgst, dgstlen, sig, siglen, eckey);
  }

  late final _ECDSA_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDSA_sign');
  late final _ECDSA_sign =
      _ECDSA_signPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<EC_KEY>,
        )
      >();

  /// Computes ECDSA signature of a given hash value using the supplied
  /// private key (note: sig must point to ECDSA_size(eckey) bytes of memory).
  /// \param  type     this parameter is ignored
  /// \param  dgst     pointer to the hash value to sign
  /// \param  dgstlen  length of the hash value
  /// \param  sig      buffer to hold the DER encoded signature
  /// \param  siglen   pointer to the length of the returned signature
  /// \param  kinv     BIGNUM with a pre-computed inverse k (optional)
  /// \param  rp       BIGNUM with a pre-computed rp value (optional),
  /// see ECDSA_sign_setup
  /// \param  eckey    EC_KEY object containing a private EC key
  /// \return 1 on success and 0 otherwise
  int ECDSA_sign_ex(
    int type,
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgstlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.UnsignedInt> siglen,
    ffi.Pointer<BIGNUM> kinv,
    ffi.Pointer<BIGNUM> rp,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_sign_ex(type, dgst, dgstlen, sig, siglen, kinv, rp, eckey);
  }

  late final _ECDSA_sign_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDSA_sign_ex');
  late final _ECDSA_sign_ex =
      _ECDSA_sign_exPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<EC_KEY>,
        )
      >();

  /// Verifies that the given signature is valid ECDSA signature
  /// of the supplied hash value using the specified public key.
  /// \param  type     this parameter is ignored
  /// \param  dgst     pointer to the hash value
  /// \param  dgstlen  length of the hash value
  /// \param  sig      pointer to the DER encoded signature
  /// \param  siglen   length of the DER encoded signature
  /// \param  eckey    EC_KEY object containing a public EC key
  /// \return 1 if the signature is valid, 0 if the signature is invalid
  /// and -1 on error
  int ECDSA_verify(
    int type,
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgstlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_verify(type, dgst, dgstlen, sig, siglen, eckey);
  }

  late final _ECDSA_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDSA_verify');
  late final _ECDSA_verify =
      _ECDSA_verifyPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<EC_KEY>,
        )
      >();

  /// Returns the maximum length of the DER encoded signature
  /// \param  eckey  EC_KEY object
  /// \return numbers of bytes required for the DER encoded signature
  int ECDSA_size(ffi.Pointer<EC_KEY> eckey) {
    return _ECDSA_size(eckey);
  }

  late final _ECDSA_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
        'ECDSA_size',
      );
  late final _ECDSA_size =
      _ECDSA_sizePtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  /// /
  /// /*  EC_KEY_METHOD constructors, destructors, writers and accessors  */
  /// /
  ffi.Pointer<EC_KEY_METHOD> EC_KEY_METHOD_new(
    ffi.Pointer<EC_KEY_METHOD> meth,
  ) {
    return _EC_KEY_METHOD_new(meth);
  }

  late final _EC_KEY_METHOD_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_KEY_METHOD> Function(ffi.Pointer<EC_KEY_METHOD>)
        >
      >('EC_KEY_METHOD_new');
  late final _EC_KEY_METHOD_new =
      _EC_KEY_METHOD_newPtr.asFunction<
        ffi.Pointer<EC_KEY_METHOD> Function(ffi.Pointer<EC_KEY_METHOD>)
      >();

  void EC_KEY_METHOD_free(ffi.Pointer<EC_KEY_METHOD> meth) {
    return _EC_KEY_METHOD_free(meth);
  }

  late final _EC_KEY_METHOD_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY_METHOD>)>
      >('EC_KEY_METHOD_free');
  late final _EC_KEY_METHOD_free =
      _EC_KEY_METHOD_freePtr.asFunction<
        void Function(ffi.Pointer<EC_KEY_METHOD>)
      >();

  void EC_KEY_METHOD_set_init(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>>
    init,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY> key)>>
    finish,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<EC_KEY> dest, ffi.Pointer<EC_KEY> src)
      >
    >
    copy,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<EC_KEY> key, ffi.Pointer<EC_GROUP> grp)
      >
    >
    set_group,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<EC_KEY> key, ffi.Pointer<BIGNUM> priv_key)
      >
    >
    set_private,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<EC_KEY> key, ffi.Pointer<EC_POINT> pub_key)
      >
    >
    set_public,
  ) {
    return _EC_KEY_METHOD_set_init(
      meth,
      init,
      finish,
      copy,
      set_group,
      set_private,
      set_public,
    );
  }

  late final _EC_KEY_METHOD_set_initPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EC_KEY_METHOD>,
            ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>
            >,
            ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY> key)>
            >,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<EC_KEY> dest,
                  ffi.Pointer<EC_KEY> src,
                )
              >
            >,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<EC_KEY> key,
                  ffi.Pointer<EC_GROUP> grp,
                )
              >
            >,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<EC_KEY> key,
                  ffi.Pointer<BIGNUM> priv_key,
                )
              >
            >,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<EC_KEY> key,
                  ffi.Pointer<EC_POINT> pub_key,
                )
              >
            >,
          )
        >
      >('EC_KEY_METHOD_set_init');
  late final _EC_KEY_METHOD_set_init =
      _EC_KEY_METHOD_set_initPtr.asFunction<
        void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>
          >,
          ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY> key)>
          >,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(
                ffi.Pointer<EC_KEY> dest,
                ffi.Pointer<EC_KEY> src,
              )
            >
          >,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(
                ffi.Pointer<EC_KEY> key,
                ffi.Pointer<EC_GROUP> grp,
              )
            >
          >,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(
                ffi.Pointer<EC_KEY> key,
                ffi.Pointer<BIGNUM> priv_key,
              )
            >
          >,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(
                ffi.Pointer<EC_KEY> key,
                ffi.Pointer<EC_POINT> pub_key,
              )
            >
          >,
        )
      >();

  void EC_KEY_METHOD_set_keygen(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>>
    keygen,
  ) {
    return _EC_KEY_METHOD_set_keygen(meth, keygen);
  }

  late final _EC_KEY_METHOD_set_keygenPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EC_KEY_METHOD>,
            ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>
            >,
          )
        >
      >('EC_KEY_METHOD_set_keygen');
  late final _EC_KEY_METHOD_set_keygen =
      _EC_KEY_METHOD_set_keygenPtr.asFunction<
        void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>
          >,
        )
      >();

  void EC_KEY_METHOD_set_compute_key(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> psec,
          ffi.Pointer<ffi.Size> pseclen,
          ffi.Pointer<EC_POINT> pub_key,
          ffi.Pointer<EC_KEY> ecdh,
        )
      >
    >
    ckey,
  ) {
    return _EC_KEY_METHOD_set_compute_key(meth, ckey);
  }

  late final _EC_KEY_METHOD_set_compute_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EC_KEY_METHOD>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> psec,
                  ffi.Pointer<ffi.Size> pseclen,
                  ffi.Pointer<EC_POINT> pub_key,
                  ffi.Pointer<EC_KEY> ecdh,
                )
              >
            >,
          )
        >
      >('EC_KEY_METHOD_set_compute_key');
  late final _EC_KEY_METHOD_set_compute_key =
      _EC_KEY_METHOD_set_compute_keyPtr.asFunction<
        void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(
                ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> psec,
                ffi.Pointer<ffi.Size> pseclen,
                ffi.Pointer<EC_POINT> pub_key,
                ffi.Pointer<EC_KEY> ecdh,
              )
            >
          >,
        )
      >();

  void EC_KEY_METHOD_set_sign(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(
          ffi.Int type,
          ffi.Pointer<ffi.UnsignedChar> dgst,
          ffi.Int dlen,
          ffi.Pointer<ffi.UnsignedChar> sig,
          ffi.Pointer<ffi.UnsignedInt> siglen,
          ffi.Pointer<BIGNUM> kinv,
          ffi.Pointer<BIGNUM> r,
          ffi.Pointer<EC_KEY> eckey,
        )
      >
    >
    sign,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(
          ffi.Pointer<EC_KEY> eckey,
          ffi.Pointer<BN_CTX> ctx_in,
          ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
          ffi.Pointer<ffi.Pointer<BIGNUM>> rp,
        )
      >
    >
    sign_setup,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Pointer<ECDSA_SIG> Function(
          ffi.Pointer<ffi.UnsignedChar> dgst,
          ffi.Int dgst_len,
          ffi.Pointer<BIGNUM> in_kinv,
          ffi.Pointer<BIGNUM> in_r,
          ffi.Pointer<EC_KEY> eckey,
        )
      >
    >
    sign_sig,
  ) {
    return _EC_KEY_METHOD_set_sign(meth, sign, sign_setup, sign_sig);
  }

  late final _EC_KEY_METHOD_set_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EC_KEY_METHOD>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Int type,
                  ffi.Pointer<ffi.UnsignedChar> dgst,
                  ffi.Int dlen,
                  ffi.Pointer<ffi.UnsignedChar> sig,
                  ffi.Pointer<ffi.UnsignedInt> siglen,
                  ffi.Pointer<BIGNUM> kinv,
                  ffi.Pointer<BIGNUM> r,
                  ffi.Pointer<EC_KEY> eckey,
                )
              >
            >,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<EC_KEY> eckey,
                  ffi.Pointer<BN_CTX> ctx_in,
                  ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
                  ffi.Pointer<ffi.Pointer<BIGNUM>> rp,
                )
              >
            >,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Pointer<ECDSA_SIG> Function(
                  ffi.Pointer<ffi.UnsignedChar> dgst,
                  ffi.Int dgst_len,
                  ffi.Pointer<BIGNUM> in_kinv,
                  ffi.Pointer<BIGNUM> in_r,
                  ffi.Pointer<EC_KEY> eckey,
                )
              >
            >,
          )
        >
      >('EC_KEY_METHOD_set_sign');
  late final _EC_KEY_METHOD_set_sign =
      _EC_KEY_METHOD_set_signPtr.asFunction<
        void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(
                ffi.Int type,
                ffi.Pointer<ffi.UnsignedChar> dgst,
                ffi.Int dlen,
                ffi.Pointer<ffi.UnsignedChar> sig,
                ffi.Pointer<ffi.UnsignedInt> siglen,
                ffi.Pointer<BIGNUM> kinv,
                ffi.Pointer<BIGNUM> r,
                ffi.Pointer<EC_KEY> eckey,
              )
            >
          >,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(
                ffi.Pointer<EC_KEY> eckey,
                ffi.Pointer<BN_CTX> ctx_in,
                ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
                ffi.Pointer<ffi.Pointer<BIGNUM>> rp,
              )
            >
          >,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Pointer<ECDSA_SIG> Function(
                ffi.Pointer<ffi.UnsignedChar> dgst,
                ffi.Int dgst_len,
                ffi.Pointer<BIGNUM> in_kinv,
                ffi.Pointer<BIGNUM> in_r,
                ffi.Pointer<EC_KEY> eckey,
              )
            >
          >,
        )
      >();

  void EC_KEY_METHOD_set_verify(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(
          ffi.Int type,
          ffi.Pointer<ffi.UnsignedChar> dgst,
          ffi.Int dgst_len,
          ffi.Pointer<ffi.UnsignedChar> sigbuf,
          ffi.Int sig_len,
          ffi.Pointer<EC_KEY> eckey,
        )
      >
    >
    verify,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(
          ffi.Pointer<ffi.UnsignedChar> dgst,
          ffi.Int dgst_len,
          ffi.Pointer<ECDSA_SIG> sig,
          ffi.Pointer<EC_KEY> eckey,
        )
      >
    >
    verify_sig,
  ) {
    return _EC_KEY_METHOD_set_verify(meth, verify, verify_sig);
  }

  late final _EC_KEY_METHOD_set_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EC_KEY_METHOD>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Int type,
                  ffi.Pointer<ffi.UnsignedChar> dgst,
                  ffi.Int dgst_len,
                  ffi.Pointer<ffi.UnsignedChar> sigbuf,
                  ffi.Int sig_len,
                  ffi.Pointer<EC_KEY> eckey,
                )
              >
            >,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedChar> dgst,
                  ffi.Int dgst_len,
                  ffi.Pointer<ECDSA_SIG> sig,
                  ffi.Pointer<EC_KEY> eckey,
                )
              >
            >,
          )
        >
      >('EC_KEY_METHOD_set_verify');
  late final _EC_KEY_METHOD_set_verify =
      _EC_KEY_METHOD_set_verifyPtr.asFunction<
        void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(
                ffi.Int type,
                ffi.Pointer<ffi.UnsignedChar> dgst,
                ffi.Int dgst_len,
                ffi.Pointer<ffi.UnsignedChar> sigbuf,
                ffi.Int sig_len,
                ffi.Pointer<EC_KEY> eckey,
              )
            >
          >,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(
                ffi.Pointer<ffi.UnsignedChar> dgst,
                ffi.Int dgst_len,
                ffi.Pointer<ECDSA_SIG> sig,
                ffi.Pointer<EC_KEY> eckey,
              )
            >
          >,
        )
      >();

  void EC_KEY_METHOD_get_init(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>>
    >
    pinit,
    ffi.Pointer<
      ffi.Pointer<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY> key)>
      >
    >
    pfinish,
    ffi.Pointer<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY> dest, ffi.Pointer<EC_KEY> src)
        >
      >
    >
    pcopy,
    ffi.Pointer<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY> key, ffi.Pointer<EC_GROUP> grp)
        >
      >
    >
    pset_group,
    ffi.Pointer<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_KEY> key,
            ffi.Pointer<BIGNUM> priv_key,
          )
        >
      >
    >
    pset_private,
    ffi.Pointer<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_KEY> key,
            ffi.Pointer<EC_POINT> pub_key,
          )
        >
      >
    >
    pset_public,
  ) {
    return _EC_KEY_METHOD_get_init(
      meth,
      pinit,
      pfinish,
      pcopy,
      pset_group,
      pset_private,
      pset_public,
    );
  }

  late final _EC_KEY_METHOD_get_initPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EC_KEY_METHOD>,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>
              >
            >,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY> key)>
              >
            >,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Int Function(
                    ffi.Pointer<EC_KEY> dest,
                    ffi.Pointer<EC_KEY> src,
                  )
                >
              >
            >,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Int Function(
                    ffi.Pointer<EC_KEY> key,
                    ffi.Pointer<EC_GROUP> grp,
                  )
                >
              >
            >,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Int Function(
                    ffi.Pointer<EC_KEY> key,
                    ffi.Pointer<BIGNUM> priv_key,
                  )
                >
              >
            >,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Int Function(
                    ffi.Pointer<EC_KEY> key,
                    ffi.Pointer<EC_POINT> pub_key,
                  )
                >
              >
            >,
          )
        >
      >('EC_KEY_METHOD_get_init');
  late final _EC_KEY_METHOD_get_init =
      _EC_KEY_METHOD_get_initPtr.asFunction<
        void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>
            >
          >,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY> key)>
            >
          >,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<EC_KEY> dest,
                  ffi.Pointer<EC_KEY> src,
                )
              >
            >
          >,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<EC_KEY> key,
                  ffi.Pointer<EC_GROUP> grp,
                )
              >
            >
          >,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<EC_KEY> key,
                  ffi.Pointer<BIGNUM> priv_key,
                )
              >
            >
          >,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<EC_KEY> key,
                  ffi.Pointer<EC_POINT> pub_key,
                )
              >
            >
          >,
        )
      >();

  void EC_KEY_METHOD_get_keygen(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>>
    >
    pkeygen,
  ) {
    return _EC_KEY_METHOD_get_keygen(meth, pkeygen);
  }

  late final _EC_KEY_METHOD_get_keygenPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EC_KEY_METHOD>,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>
              >
            >,
          )
        >
      >('EC_KEY_METHOD_get_keygen');
  late final _EC_KEY_METHOD_get_keygen =
      _EC_KEY_METHOD_get_keygenPtr.asFunction<
        void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>
            >
          >,
        )
      >();

  void EC_KEY_METHOD_get_compute_key(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> psec,
            ffi.Pointer<ffi.Size> pseclen,
            ffi.Pointer<EC_POINT> pub_key,
            ffi.Pointer<EC_KEY> ecdh,
          )
        >
      >
    >
    pck,
  ) {
    return _EC_KEY_METHOD_get_compute_key(meth, pck);
  }

  late final _EC_KEY_METHOD_get_compute_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EC_KEY_METHOD>,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Int Function(
                    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> psec,
                    ffi.Pointer<ffi.Size> pseclen,
                    ffi.Pointer<EC_POINT> pub_key,
                    ffi.Pointer<EC_KEY> ecdh,
                  )
                >
              >
            >,
          )
        >
      >('EC_KEY_METHOD_get_compute_key');
  late final _EC_KEY_METHOD_get_compute_key =
      _EC_KEY_METHOD_get_compute_keyPtr.asFunction<
        void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> psec,
                  ffi.Pointer<ffi.Size> pseclen,
                  ffi.Pointer<EC_POINT> pub_key,
                  ffi.Pointer<EC_KEY> ecdh,
                )
              >
            >
          >,
        )
      >();

  void EC_KEY_METHOD_get_sign(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int type,
            ffi.Pointer<ffi.UnsignedChar> dgst,
            ffi.Int dlen,
            ffi.Pointer<ffi.UnsignedChar> sig,
            ffi.Pointer<ffi.UnsignedInt> siglen,
            ffi.Pointer<BIGNUM> kinv,
            ffi.Pointer<BIGNUM> r,
            ffi.Pointer<EC_KEY> eckey,
          )
        >
      >
    >
    psign,
    ffi.Pointer<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_KEY> eckey,
            ffi.Pointer<BN_CTX> ctx_in,
            ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
            ffi.Pointer<ffi.Pointer<BIGNUM>> rp,
          )
        >
      >
    >
    psign_setup,
    ffi.Pointer<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(
            ffi.Pointer<ffi.UnsignedChar> dgst,
            ffi.Int dgst_len,
            ffi.Pointer<BIGNUM> in_kinv,
            ffi.Pointer<BIGNUM> in_r,
            ffi.Pointer<EC_KEY> eckey,
          )
        >
      >
    >
    psign_sig,
  ) {
    return _EC_KEY_METHOD_get_sign(meth, psign, psign_setup, psign_sig);
  }

  late final _EC_KEY_METHOD_get_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EC_KEY_METHOD>,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Int Function(
                    ffi.Int type,
                    ffi.Pointer<ffi.UnsignedChar> dgst,
                    ffi.Int dlen,
                    ffi.Pointer<ffi.UnsignedChar> sig,
                    ffi.Pointer<ffi.UnsignedInt> siglen,
                    ffi.Pointer<BIGNUM> kinv,
                    ffi.Pointer<BIGNUM> r,
                    ffi.Pointer<EC_KEY> eckey,
                  )
                >
              >
            >,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Int Function(
                    ffi.Pointer<EC_KEY> eckey,
                    ffi.Pointer<BN_CTX> ctx_in,
                    ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
                    ffi.Pointer<ffi.Pointer<BIGNUM>> rp,
                  )
                >
              >
            >,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Pointer<ECDSA_SIG> Function(
                    ffi.Pointer<ffi.UnsignedChar> dgst,
                    ffi.Int dgst_len,
                    ffi.Pointer<BIGNUM> in_kinv,
                    ffi.Pointer<BIGNUM> in_r,
                    ffi.Pointer<EC_KEY> eckey,
                  )
                >
              >
            >,
          )
        >
      >('EC_KEY_METHOD_get_sign');
  late final _EC_KEY_METHOD_get_sign =
      _EC_KEY_METHOD_get_signPtr.asFunction<
        void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Int type,
                  ffi.Pointer<ffi.UnsignedChar> dgst,
                  ffi.Int dlen,
                  ffi.Pointer<ffi.UnsignedChar> sig,
                  ffi.Pointer<ffi.UnsignedInt> siglen,
                  ffi.Pointer<BIGNUM> kinv,
                  ffi.Pointer<BIGNUM> r,
                  ffi.Pointer<EC_KEY> eckey,
                )
              >
            >
          >,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<EC_KEY> eckey,
                  ffi.Pointer<BN_CTX> ctx_in,
                  ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
                  ffi.Pointer<ffi.Pointer<BIGNUM>> rp,
                )
              >
            >
          >,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Pointer<ECDSA_SIG> Function(
                  ffi.Pointer<ffi.UnsignedChar> dgst,
                  ffi.Int dgst_len,
                  ffi.Pointer<BIGNUM> in_kinv,
                  ffi.Pointer<BIGNUM> in_r,
                  ffi.Pointer<EC_KEY> eckey,
                )
              >
            >
          >,
        )
      >();

  void EC_KEY_METHOD_get_verify(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int type,
            ffi.Pointer<ffi.UnsignedChar> dgst,
            ffi.Int dgst_len,
            ffi.Pointer<ffi.UnsignedChar> sigbuf,
            ffi.Int sig_len,
            ffi.Pointer<EC_KEY> eckey,
          )
        >
      >
    >
    pverify,
    ffi.Pointer<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.UnsignedChar> dgst,
            ffi.Int dgst_len,
            ffi.Pointer<ECDSA_SIG> sig,
            ffi.Pointer<EC_KEY> eckey,
          )
        >
      >
    >
    pverify_sig,
  ) {
    return _EC_KEY_METHOD_get_verify(meth, pverify, pverify_sig);
  }

  late final _EC_KEY_METHOD_get_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EC_KEY_METHOD>,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Int Function(
                    ffi.Int type,
                    ffi.Pointer<ffi.UnsignedChar> dgst,
                    ffi.Int dgst_len,
                    ffi.Pointer<ffi.UnsignedChar> sigbuf,
                    ffi.Int sig_len,
                    ffi.Pointer<EC_KEY> eckey,
                  )
                >
              >
            >,
            ffi.Pointer<
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Int Function(
                    ffi.Pointer<ffi.UnsignedChar> dgst,
                    ffi.Int dgst_len,
                    ffi.Pointer<ECDSA_SIG> sig,
                    ffi.Pointer<EC_KEY> eckey,
                  )
                >
              >
            >,
          )
        >
      >('EC_KEY_METHOD_get_verify');
  late final _EC_KEY_METHOD_get_verify =
      _EC_KEY_METHOD_get_verifyPtr.asFunction<
        void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Int type,
                  ffi.Pointer<ffi.UnsignedChar> dgst,
                  ffi.Int dgst_len,
                  ffi.Pointer<ffi.UnsignedChar> sigbuf,
                  ffi.Int sig_len,
                  ffi.Pointer<EC_KEY> eckey,
                )
              >
            >
          >,
          ffi.Pointer<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedChar> dgst,
                  ffi.Int dgst_len,
                  ffi.Pointer<ECDSA_SIG> sig,
                  ffi.Pointer<EC_KEY> eckey,
                )
              >
            >
          >,
        )
      >();
}

typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;
typedef __darwin_intptr_t = ffi.Long;
typedef Dart__darwin_intptr_t = int;
typedef __darwin_natural_t = ffi.UnsignedInt;
typedef Dart__darwin_natural_t = int;

/// The rune type below is declared to be an ``int'' instead of the more natural
/// ``unsigned long'' or ``long''.  Two things are happening here.  It is not
/// unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,
/// it looks like 10646 will be a 31 bit standard.  This means that if your
/// ints cannot hold 32 bits, you will be in trouble.  The reason an int was
/// chosen over a long is that the is*() and to*() routines take ints (says
/// ANSI C), but they use __darwin_ct_rune_t instead of int.  By changing it
/// here, you lose a bit of ANSI conformance, but your programs will still
/// work.
///
/// NOTE: rune_t is not covered by ANSI nor other standards, and should not
/// be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and
/// rune_t must be the same type.  Also wint_t must be no narrower than
/// wchar_t, and should also be able to hold all members of the largest
/// character set plus one extra value (WEOF). wint_t must be at least 16 bits.
typedef __darwin_ct_rune_t = ffi.Int;
typedef Dart__darwin_ct_rune_t = int;

/// mbstate_t is an opaque object to keep conversion state, during multibyte
/// stream conversions.  The content must not be referenced by user programs.
final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  /// for alignment
  @ffi.LongLong()
  external int _mbstateL;
}

typedef __darwin_mbstate_t = __mbstate_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;
typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef __darwin_va_list = __builtin_va_list;
typedef __darwin_wchar_t = ffi.Int;
typedef Dart__darwin_wchar_t = int;
typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wint_t = ffi.Int;
typedef Dart__darwin_wint_t = int;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef Dart__darwin_clock_t = int;
typedef __darwin_socklen_t = __uint32_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;
typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef u_int8_t = ffi.UnsignedChar;
typedef Dartu_int8_t = int;
typedef u_int16_t = ffi.UnsignedShort;
typedef Dartu_int16_t = int;
typedef u_int32_t = ffi.UnsignedInt;
typedef Dartu_int32_t = int;
typedef u_int64_t = ffi.UnsignedLongLong;
typedef Dartu_int64_t = int;
typedef register_t = ffi.Int64;
typedef Dartregister_t = int;
typedef user_addr_t = u_int64_t;
typedef user_size_t = u_int64_t;
typedef user_ssize_t = ffi.Int64;
typedef Dartuser_ssize_t = int;
typedef user_long_t = ffi.Int64;
typedef Dartuser_long_t = int;
typedef user_ulong_t = u_int64_t;
typedef user_time_t = ffi.Int64;
typedef Dartuser_time_t = int;
typedef user_off_t = ffi.Int64;
typedef Dartuser_off_t = int;
typedef syscall_arg_t = u_int64_t;
typedef __darwin_blkcnt_t = __int64_t;
typedef __darwin_blksize_t = __int32_t;
typedef __darwin_dev_t = __int32_t;
typedef __darwin_fsblkcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsblkcnt_t = int;
typedef __darwin_fsfilcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsfilcnt_t = int;
typedef __darwin_gid_t = __uint32_t;
typedef __darwin_id_t = __uint32_t;
typedef __darwin_ino64_t = __uint64_t;
typedef __darwin_ino_t = __darwin_ino64_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mode_t = __uint16_t;
typedef __darwin_off_t = __int64_t;
typedef __darwin_pid_t = __int32_t;
typedef __darwin_sigset_t = __uint32_t;
typedef __darwin_suseconds_t = __int32_t;
typedef __darwin_uid_t = __uint32_t;
typedef __darwin_useconds_t = __uint32_t;

final class __darwin_pthread_handler_rec extends ffi.Struct {
  /// Routine to call
  external ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>
  >
  __routine;

  /// Argument to pass
  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;
typedef __darwin_pthread_cond_t = _opaque_pthread_cond_t;
typedef __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
typedef __darwin_pthread_key_t = ffi.UnsignedLong;
typedef Dart__darwin_pthread_key_t = int;
typedef __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
typedef __darwin_pthread_once_t = _opaque_pthread_once_t;
typedef __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;
typedef u_char = ffi.UnsignedChar;
typedef Dartu_char = int;
typedef u_short = ffi.UnsignedShort;
typedef Dartu_short = int;
typedef u_int = ffi.UnsignedInt;
typedef Dartu_int = int;
typedef u_long = ffi.UnsignedLong;
typedef Dartu_long = int;
typedef ushort = ffi.UnsignedShort;
typedef Dartushort = int;
typedef uint = ffi.UnsignedInt;
typedef Dartuint = int;
typedef u_quad_t = u_int64_t;
typedef quad_t = ffi.Int64;
typedef Dartquad_t = int;
typedef qaddr_t = ffi.Pointer<quad_t>;
typedef caddr_t = ffi.Pointer<ffi.Char>;
typedef daddr_t = ffi.Int32;
typedef Dartdaddr_t = int;
typedef dev_t = __darwin_dev_t;
typedef fixpt_t = u_int32_t;
typedef blkcnt_t = __darwin_blkcnt_t;
typedef blksize_t = __darwin_blksize_t;
typedef gid_t = __darwin_gid_t;
typedef in_addr_t = __uint32_t;
typedef in_port_t = __uint16_t;
typedef ino_t = __darwin_ino_t;
typedef ino64_t = __darwin_ino64_t;
typedef key_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef nlink_t = __uint16_t;
typedef id_t = __darwin_id_t;
typedef pid_t = __darwin_pid_t;
typedef off_t = __darwin_off_t;
typedef segsz_t = ffi.Int32;
typedef Dartsegsz_t = int;
typedef swblk_t = ffi.Int32;
typedef Dartswblk_t = int;
typedef uid_t = __darwin_uid_t;
typedef clock_t = __darwin_clock_t;
typedef ssize_t = __darwin_ssize_t;
typedef time_t = __darwin_time_t;
typedef useconds_t = __darwin_useconds_t;
typedef suseconds_t = __darwin_suseconds_t;
typedef rsize_t = __darwin_size_t;
typedef errno_t = ffi.Int;
typedef Darterrno_t = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

typedef fd_mask = __int32_t;
typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef pthread_cond_t = __darwin_pthread_cond_t;
typedef pthread_condattr_t = __darwin_pthread_condattr_t;
typedef pthread_mutex_t = __darwin_pthread_mutex_t;
typedef pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
typedef pthread_once_t = __darwin_pthread_once_t;
typedef pthread_rwlock_t = __darwin_pthread_rwlock_t;
typedef pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
typedef pthread_t = __darwin_pthread_t;
typedef pthread_key_t = __darwin_pthread_key_t;
typedef fsblkcnt_t = __darwin_fsblkcnt_t;
typedef fsfilcnt_t = __darwin_fsfilcnt_t;
typedef __darwin_nl_item = ffi.Int;
typedef Dart__darwin_nl_item = int;
typedef __darwin_wctrans_t = ffi.Int;
typedef Dart__darwin_wctrans_t = int;
typedef __darwin_wctype_t = __uint32_t;

/// 7.18.1.2 Minimum-width integer types
typedef int_least8_t = ffi.Int8;
typedef Dartint_least8_t = int;
typedef int_least16_t = ffi.Int16;
typedef Dartint_least16_t = int;
typedef int_least32_t = ffi.Int32;
typedef Dartint_least32_t = int;
typedef int_least64_t = ffi.Int64;
typedef Dartint_least64_t = int;
typedef uint_least8_t = ffi.Uint8;
typedef Dartuint_least8_t = int;
typedef uint_least16_t = ffi.Uint16;
typedef Dartuint_least16_t = int;
typedef uint_least32_t = ffi.Uint32;
typedef Dartuint_least32_t = int;
typedef uint_least64_t = ffi.Uint64;
typedef Dartuint_least64_t = int;

/// 7.18.1.3 Fastest-width integer types
typedef int_fast8_t = ffi.Int8;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Int16;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Int32;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.Int64;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.Uint8;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.Uint16;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.Uint32;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.Uint64;
typedef Dartuint_fast64_t = int;
typedef intmax_t = ffi.Long;
typedef Dartintmax_t = int;
typedef uintmax_t = ffi.UnsignedLong;
typedef Dartuintmax_t = int;

/// 7.8.2.2
final class imaxdiv_t extends ffi.Struct {
  @intmax_t()
  external int quot;

  @intmax_t()
  external int rem;
}

typedef ossl_intmax_t = intmax_t;
typedef ossl_uintmax_t = uintmax_t;
typedef va_list = __darwin_va_list;
typedef fpos_t = __darwin_off_t;

/// stdio buffers
final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

/// hold a buncha junk that would grow the ABI
final class __sFILEX extends ffi.Opaque {}

/// stdio state variables.
///
/// The following always hold:
///
/// if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
/// _lbfsize is -_bf._size, else _lbfsize is 0
/// if _flags&__SRD, _w is 0
/// if _flags&__SWR, _r is 0
///
/// This ensures that the getc and putc macros (or inline functions) never
/// try to write or read from a file that is in `read' or `write' mode.
/// (Moreover, they can, and do, automatically switch from read mode to
/// write mode, and back, on "r+" and "w+" files.)
///
/// _lbfsize is used only to make the inline line-buffered output stream
/// code as compact as possible.
///
/// _ub, _up, and _ur are used when ungetc() pushes back more characters
/// than fit in the current _bf, or when ungetc() pushes back a character
/// that does not match the previous one in _bf.  When this happens,
/// _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
/// _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
///
/// NB: see WARNING above before changing the layout of this structure!
final class __sFILE extends ffi.Struct {
  /// current position in (some) buffer
  external ffi.Pointer<ffi.UnsignedChar> _p;

  /// read space left for getc()
  @ffi.Int()
  external int _r;

  /// write space left for putc()
  @ffi.Int()
  external int _w;

  /// flags, below; this FILE is free if 0
  @ffi.Short()
  external int _flags;

  /// fileno, if Unix descriptor, else -1
  @ffi.Short()
  external int _file;

  /// the buffer (at least 1 byte, if !NULL)
  external __sbuf _bf;

  /// 0 or -_bf._size, for inline putc
  @ffi.Int()
  external int _lbfsize;

  /// cookie passed to io functions
  external ffi.Pointer<ffi.Void> _cookie;

  external ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>
  >
  _close;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >
  _read;

  external ffi.Pointer<
    ffi.NativeFunction<fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>
  >
  _seek;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >
  _write;

  /// ungetc buffer
  external __sbuf _ub;

  /// additions to FILE to not break ABI
  external ffi.Pointer<__sFILEX> _extra;

  /// saved _r when _r is counting ungetc data
  @ffi.Int()
  external int _ur;

  /// guarantee an ungetc() buffer
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  /// guarantee a getc() buffer
  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  /// buffer for fgetln()
  external __sbuf _lb;

  /// stat.st_blksize (may be != _bf._size)
  @ffi.Int()
  external int _blksize;

  /// current lseek offset (see WARNING)
  @fpos_t()
  external int _offset;
}

/// stdio state variables.
///
/// The following always hold:
///
/// if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
/// _lbfsize is -_bf._size, else _lbfsize is 0
/// if _flags&__SRD, _w is 0
/// if _flags&__SWR, _r is 0
///
/// This ensures that the getc and putc macros (or inline functions) never
/// try to write or read from a file that is in `read' or `write' mode.
/// (Moreover, they can, and do, automatically switch from read mode to
/// write mode, and back, on "r+" and "w+" files.)
///
/// _lbfsize is used only to make the inline line-buffered output stream
/// code as compact as possible.
///
/// _ub, _up, and _ur are used when ungetc() pushes back more characters
/// than fit in the current _bf, or when ungetc() pushes back a character
/// that does not match the previous one in _bf.  When this happens,
/// _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
/// _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
///
/// NB: see WARNING above before changing the layout of this structure!
typedef FILE = __sFILE;

/// [XSI] The type idtype_t shall be defined as an enumeration type whose
/// possible values shall include at least P_ALL, P_PID, and P_PGID.
enum idtype_t {
  P_ALL(0),
  P_PID(1),
  P_PGID(2);

  final int value;
  const idtype_t(this.value);

  static idtype_t fromValue(int value) => switch (value) {
    0 => P_ALL,
    1 => P_PID,
    2 => P_PGID,
    _ => throw ArgumentError('Unknown value for idtype_t: $value'),
  };
}

typedef sig_atomic_t = ffi.Int;
typedef Dartsig_atomic_t = int;

final class __darwin_arm_exception_state extends ffi.Struct {
  /// number of arm exception taken
  @__uint32_t()
  external int __exception;

  /// Fault status
  @__uint32_t()
  external int __fsr;

  /// Virtual Fault Address
  @__uint32_t()
  external int __far;
}

final class __darwin_arm_exception_state64 extends ffi.Struct {
  /// Virtual Fault Address
  @__uint64_t()
  external int __far;

  /// Exception syndrome
  @__uint32_t()
  external int __esr;

  /// number of arm exception taken
  @__uint32_t()
  external int __exception;
}

final class __darwin_arm_exception_state64_v2 extends ffi.Struct {
  /// Virtual Fault Address
  @__uint64_t()
  external int __far;

  /// Exception syndrome
  @__uint64_t()
  external int __esr;
}

final class __darwin_arm_thread_state extends ffi.Struct {
  /// General purpose register r0-r12
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  /// Stack pointer r13
  @__uint32_t()
  external int __sp;

  /// Link register r14
  @__uint32_t()
  external int __lr;

  /// Program counter r15
  @__uint32_t()
  external int __pc;

  /// Current program status register
  @__uint32_t()
  external int __cpsr;
}

final class __darwin_arm_thread_state64 extends ffi.Struct {
  /// General purpose registers x0-x28
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  /// Frame pointer x29
  @__uint64_t()
  external int __fp;

  /// Link register x30
  @__uint64_t()
  external int __lr;

  /// Stack pointer x31
  @__uint64_t()
  external int __sp;

  /// Program counter
  @__uint64_t()
  external int __pc;

  /// Current program status register
  @__uint32_t()
  external int __cpsr;

  /// Same size for 32-bit or 64-bit clients
  @__uint32_t()
  external int __pad;
}

final class __darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

final class __darwin_arm_neon_state64 extends ffi.Opaque {}

final class __darwin_arm_neon_state extends ffi.Opaque {}

final class __arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class __darwin_arm_sme_state extends ffi.Struct {
  @__uint64_t()
  external int __svcr;

  @__uint64_t()
  external int __tpidr2_el0;

  @__uint16_t()
  external int __svl_b;
}

final class __darwin_arm_sve_z_state extends ffi.Struct {
  @ffi.Array.multi([16, 256])
  external ffi.Array<ffi.Array<ffi.Char>> __z;
}

final class __darwin_arm_sve_p_state extends ffi.Struct {
  @ffi.Array.multi([16, 32])
  external ffi.Array<ffi.Array<ffi.Char>> __p;
}

final class __darwin_arm_sme_za_state extends ffi.Struct {
  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Char> __za;
}

final class __darwin_arm_sme2_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> __zt0;
}

final class __arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

final class __darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  /// Bit 0 is SS (Hardware Single Step)
  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  /// Bit 0 is SS (Hardware Single Step)
  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

final class __darwin_mcontext32 extends ffi.Struct {
  external __darwin_arm_exception_state __es;

  external __darwin_arm_thread_state __ss;

  external __darwin_arm_vfp_state __fs;
}

final class __darwin_mcontext64 extends ffi.Opaque {}

typedef mcontext_t = ffi.Pointer<__darwin_mcontext64>;

final class __darwin_sigaltstack extends ffi.Struct {
  /// signal stack base
  external ffi.Pointer<ffi.Void> ss_sp;

  /// signal stack length
  @__darwin_size_t()
  external int ss_size;

  /// SA_DISABLE and/or SA_ONSTACK
  @ffi.Int()
  external int ss_flags;
}

typedef stack_t = __darwin_sigaltstack;

final class __darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  /// signal mask used by this context
  @__darwin_sigset_t()
  external int uc_sigmask;

  /// stack used by this context
  external __darwin_sigaltstack uc_stack;

  /// pointer to resuming context
  external ffi.Pointer<__darwin_ucontext> uc_link;

  /// size of the machine context passed in
  @__darwin_size_t()
  external int uc_mcsize;

  /// pointer to machine specific context
  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

/// user context
typedef ucontext_t = __darwin_ucontext;
typedef sigset_t = __darwin_sigset_t;

final class sigval extends ffi.Union {
  /// Members as suggested by Annex C of POSIX 1003.1b.
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class sigevent extends ffi.Struct {
  /// Notification type
  @ffi.Int()
  external int sigev_notify;

  /// Signal number
  @ffi.Int()
  external int sigev_signo;

  /// Signal value
  external sigval sigev_value;

  /// Notification function
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
  sigev_notify_function;

  /// Notification attributes
  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

final class __siginfo extends ffi.Struct {
  /// signal number
  @ffi.Int()
  external int si_signo;

  /// errno association
  @ffi.Int()
  external int si_errno;

  /// signal code
  @ffi.Int()
  external int si_code;

  /// sending process
  @pid_t()
  external int si_pid;

  /// sender's ruid
  @uid_t()
  external int si_uid;

  /// exit value
  @ffi.Int()
  external int si_status;

  /// faulting instruction
  external ffi.Pointer<ffi.Void> si_addr;

  /// signal value
  external sigval si_value;

  /// band event for SIGPOLL
  @ffi.Long()
  external int si_band;

  /// Reserved for Future Use
  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef siginfo_t = __siginfo;

/// union for signal handlers
final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
  __sa_handler;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)
    >
  >
  __sa_sigaction;
}

/// Signal vector template for Kernel user boundary
final class __sigaction extends ffi.Struct {
  /// signal handler
  external __sigaction_u __sigaction_u$1;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Void>,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<siginfo_t>,
        ffi.Pointer<ffi.Void>,
      )
    >
  >
  sa_tramp;

  /// signal mask to apply
  @sigset_t()
  external int sa_mask;

  /// see signal options below
  @ffi.Int()
  external int sa_flags;
}

/// Signal vector "template" used in sigaction call.
final class sigaction extends ffi.Struct {
  /// signal handler
  external __sigaction_u __sigaction_u$1;

  /// signal mask to apply
  @sigset_t()
  external int sa_mask;

  /// see signal options below
  @ffi.Int()
  external int sa_flags;
}

typedef sig_tFunction = ffi.Void Function(ffi.Int);
typedef Dartsig_tFunction = void Function(int);
typedef sig_t = ffi.Pointer<ffi.NativeFunction<sig_tFunction>>;

/// 4.3 compatibility:
/// Signal vector "template" used in sigvec call.
final class sigvec extends ffi.Struct {
  /// signal handler
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
  sv_handler;

  /// signal mask to apply
  @ffi.Int()
  external int sv_mask;

  /// see signal options below
  @ffi.Int()
  external int sv_flags;
}

/// Structure used in sigstack call.
final class sigstack extends ffi.Struct {
  /// signal stack pointer
  external ffi.Pointer<ffi.Char> ss_sp;

  /// current status
  @ffi.Int()
  external int ss_onstack;
}

final class timeval extends ffi.Struct {
  /// seconds
  @__darwin_time_t()
  external int tv_sec;

  /// and microseconds
  @__darwin_suseconds_t()
  external int tv_usec;
}

/// Resource limit type (low 63 bits, excluding the sign bit)
typedef rlim_t = __uint64_t;

/// A structure representing an accounting of resource utilization.  The
/// address of an instance of this structure is the second parameter to
/// getrusage().
///
/// Note: All values other than ru_utime and ru_stime are implementaiton
/// defined and subject to change in a future release.  Their use
/// is discouraged for standards compliant programs.
final class rusage extends ffi.Struct {
  /// user time used (PL)
  external timeval ru_utime;

  /// system time used (PL)
  external timeval ru_stime;

  /// max resident set size (PL)
  @ffi.Long()
  external int ru_maxrss;

  /// integral shared memory size (NU)
  @ffi.Long()
  external int ru_ixrss;

  /// integral unshared data (NU)
  @ffi.Long()
  external int ru_idrss;

  /// integral unshared stack (NU)
  @ffi.Long()
  external int ru_isrss;

  /// page reclaims (NU)
  @ffi.Long()
  external int ru_minflt;

  /// page faults (NU)
  @ffi.Long()
  external int ru_majflt;

  /// swaps (NU)
  @ffi.Long()
  external int ru_nswap;

  /// block input operations (atomic)
  @ffi.Long()
  external int ru_inblock;

  /// block output operations (atomic)
  @ffi.Long()
  external int ru_oublock;

  /// messages sent (atomic)
  @ffi.Long()
  external int ru_msgsnd;

  /// messages received (atomic)
  @ffi.Long()
  external int ru_msgrcv;

  /// signals received (atomic)
  @ffi.Long()
  external int ru_nsignals;

  /// voluntary context switches (atomic)
  @ffi.Long()
  external int ru_nvcsw;

  /// involuntary "
  @ffi.Long()
  external int ru_nivcsw;
}

typedef rusage_info_t = ffi.Pointer<ffi.Void>;

final class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

final class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

final class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

final class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

final class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

final class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

final class rusage_info_v6 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;

  @ffi.Uint64()
  external int ri_user_ptime;

  @ffi.Uint64()
  external int ri_system_ptime;

  @ffi.Uint64()
  external int ri_pinstructions;

  @ffi.Uint64()
  external int ri_pcycles;

  @ffi.Uint64()
  external int ri_energy_nj;

  @ffi.Uint64()
  external int ri_penergy_nj;

  @ffi.Uint64()
  external int ri_secure_time_in_system;

  @ffi.Uint64()
  external int ri_secure_ptime_in_system;

  @ffi.Uint64()
  external int ri_neural_footprint;

  @ffi.Uint64()
  external int ri_lifetime_max_neural_footprint;

  @ffi.Uint64()
  external int ri_interval_max_neural_footprint;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Uint64> ri_reserved;
}

typedef rusage_info_current = rusage_info_v6;

/// A structure representing a resource limit.  The address of an instance
/// of this structure is the second parameter to getrlimit()/setrlimit().
final class rlimit extends ffi.Struct {
  /// current (soft) limit
  @rlim_t()
  external int rlim_cur;

  /// maximum value for rlim_cur
  @rlim_t()
  external int rlim_max;
}

final class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

/// Deprecated:
/// Structure of the information in the status word returned by wait4.
/// If w_stopval==_WSTOPPED, then the second structure describes
/// the information returned, else the first.
final class wait extends ffi.Opaque {}

typedef ct_rune_t = __darwin_ct_rune_t;
typedef rune_t = __darwin_rune_t;

final class div_t extends ffi.Struct {
  /// quotient
  @ffi.Int()
  external int quot;

  /// remainder
  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  /// quotient
  @ffi.Long()
  external int quot;

  /// remainder
  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef malloc_type_id_t = ffi.UnsignedLongLong;
typedef Dartmalloc_type_id_t = int;

final class _malloc_zone_t extends ffi.Opaque {}

/// <malloc/malloc.h>
typedef malloc_zone_t = _malloc_zone_t;

final class stack_st extends ffi.Opaque {}

typedef OPENSSL_STACK = stack_st;
typedef OPENSSL_sk_compfuncFunction =
    ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef DartOPENSSL_sk_compfuncFunction =
    int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef OPENSSL_sk_compfunc =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_compfuncFunction>>;
typedef OPENSSL_sk_freefuncFunction = ffi.Void Function(ffi.Pointer<ffi.Void>);
typedef DartOPENSSL_sk_freefuncFunction = void Function(ffi.Pointer<ffi.Void>);
typedef OPENSSL_sk_freefunc =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_freefuncFunction>>;
typedef OPENSSL_sk_copyfuncFunction =
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>);
typedef OPENSSL_sk_copyfunc =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_copyfuncFunction>>;

/// -
/// Strings are special: normally an lhash entry will point to a single
/// (somewhat) mutable object. In the case of strings:
///
/// a) Instead of a single char, there is an array of chars, NUL-terminated.
/// b) The string may have be immutable.
///
/// So, they need their own declarations. Especially important for
/// type-checking tools, such as Deputy.
///
/// In practice, however, it appears to be hard to have a const
/// string. For now, I'm settling for dealing with the fact it is a
/// string at all.
typedef OPENSSL_STRING = ffi.Pointer<ffi.Char>;
typedef OPENSSL_CSTRING = ffi.Pointer<ffi.Char>;

/// -
/// Confusingly, LHASH_OF(STRING) deals with char ** throughout, but
/// STACK_OF(STRING) is really more like STACK_OF(char), only, as mentioned
/// above, instead of a single char each entry is a NUL-terminated array of
/// chars. So, we have to implement STRING specially for STACK_OF. This is
/// dealt with in the autogenerated macros below.
final class stack_st_OPENSSL_STRING extends ffi.Opaque {}

typedef sk_OPENSSL_STRING_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<ffi.Char>> a,
      ffi.Pointer<ffi.Pointer<ffi.Char>> b,
    );
typedef Dartsk_OPENSSL_STRING_compfuncFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<ffi.Char>> a,
      ffi.Pointer<ffi.Pointer<ffi.Char>> b,
    );
typedef sk_OPENSSL_STRING_compfunc =
    ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_STRING_compfuncFunction>>;
typedef sk_OPENSSL_STRING_freefuncFunction =
    ffi.Void Function(ffi.Pointer<ffi.Char> a);
typedef Dartsk_OPENSSL_STRING_freefuncFunction =
    void Function(ffi.Pointer<ffi.Char> a);
typedef sk_OPENSSL_STRING_freefunc =
    ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_STRING_freefuncFunction>>;
typedef sk_OPENSSL_STRING_copyfuncFunction =
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> a);
typedef sk_OPENSSL_STRING_copyfunc =
    ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_STRING_copyfuncFunction>>;

final class stack_st_OPENSSL_CSTRING extends ffi.Opaque {}

typedef sk_OPENSSL_CSTRING_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<ffi.Char>> a,
      ffi.Pointer<ffi.Pointer<ffi.Char>> b,
    );
typedef Dartsk_OPENSSL_CSTRING_compfuncFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<ffi.Char>> a,
      ffi.Pointer<ffi.Pointer<ffi.Char>> b,
    );
typedef sk_OPENSSL_CSTRING_compfunc =
    ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_CSTRING_compfuncFunction>>;
typedef sk_OPENSSL_CSTRING_freefuncFunction =
    ffi.Void Function(ffi.Pointer<ffi.Char> a);
typedef Dartsk_OPENSSL_CSTRING_freefuncFunction =
    void Function(ffi.Pointer<ffi.Char> a);
typedef sk_OPENSSL_CSTRING_freefunc =
    ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_CSTRING_freefuncFunction>>;
typedef sk_OPENSSL_CSTRING_copyfuncFunction =
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char> a);
typedef sk_OPENSSL_CSTRING_copyfunc =
    ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_CSTRING_copyfuncFunction>>;

/// This is not used by OpenSSL.  A block of bytes,  NOT nul-terminated.
/// These should also be distinguished from "normal" stacks.
typedef OPENSSL_BLOCK = ffi.Pointer<ffi.Void>;

final class stack_st_OPENSSL_BLOCK extends ffi.Opaque {}

typedef sk_OPENSSL_BLOCK_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<ffi.Void>> a,
      ffi.Pointer<ffi.Pointer<ffi.Void>> b,
    );
typedef Dartsk_OPENSSL_BLOCK_compfuncFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<ffi.Void>> a,
      ffi.Pointer<ffi.Pointer<ffi.Void>> b,
    );
typedef sk_OPENSSL_BLOCK_compfunc =
    ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_BLOCK_compfuncFunction>>;
typedef sk_OPENSSL_BLOCK_freefuncFunction =
    ffi.Void Function(ffi.Pointer<ffi.Void> a);
typedef Dartsk_OPENSSL_BLOCK_freefuncFunction =
    void Function(ffi.Pointer<ffi.Void> a);
typedef sk_OPENSSL_BLOCK_freefunc =
    ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_BLOCK_freefuncFunction>>;
typedef sk_OPENSSL_BLOCK_copyfuncFunction =
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> a);
typedef sk_OPENSSL_BLOCK_copyfunc =
    ffi.Pointer<ffi.NativeFunction<sk_OPENSSL_BLOCK_copyfuncFunction>>;

final class ossl_provider_st extends ffi.Opaque {}

typedef OSSL_PROVIDER = ossl_provider_st;

/// This is the base type that holds just about everything :-)
final class asn1_string_st extends ffi.Struct {
  @ffi.Int()
  external int length;

  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.UnsignedChar> data;

  /// The value of the following field depends on the type being held.  It
  /// is mostly being used for BIT_STRING so if the input data has a
  /// non-zero 'unused bits' value, it will be handled correctly
  @ffi.Long()
  external int flags;
}

typedef ASN1_INTEGER = asn1_string_st;
typedef ASN1_ENUMERATED = asn1_string_st;
typedef ASN1_BIT_STRING = asn1_string_st;
typedef ASN1_OCTET_STRING = asn1_string_st;
typedef ASN1_PRINTABLESTRING = asn1_string_st;
typedef ASN1_T61STRING = asn1_string_st;
typedef ASN1_IA5STRING = asn1_string_st;
typedef ASN1_GENERALSTRING = asn1_string_st;
typedef ASN1_UNIVERSALSTRING = asn1_string_st;
typedef ASN1_BMPSTRING = asn1_string_st;
typedef ASN1_UTCTIME = asn1_string_st;
typedef ASN1_TIME = asn1_string_st;
typedef ASN1_GENERALIZEDTIME = asn1_string_st;
typedef ASN1_VISIBLESTRING = asn1_string_st;
typedef ASN1_UTF8STRING = asn1_string_st;
typedef ASN1_STRING = asn1_string_st;
typedef ASN1_BOOLEAN = ffi.Int;
typedef DartASN1_BOOLEAN = int;
typedef ASN1_NULL = ffi.Int;
typedef DartASN1_NULL = int;

final class asn1_object_st extends ffi.Opaque {}

typedef ASN1_OBJECT = asn1_object_st;

final class ASN1_VALUE_st extends ffi.Opaque {}

/// This is just an opaque pointer
typedef ASN1_VALUE = ASN1_VALUE_st;

final class UnnamedUnion1 extends ffi.Union {
  external ffi.Pointer<ffi.Char> ptr;

  @ASN1_BOOLEAN()
  external int boolean;

  external ffi.Pointer<ASN1_STRING> asn1_string;

  external ffi.Pointer<ASN1_OBJECT> object;

  external ffi.Pointer<ASN1_INTEGER> integer;

  external ffi.Pointer<ASN1_ENUMERATED> enumerated;

  external ffi.Pointer<ASN1_BIT_STRING> bit_string;

  external ffi.Pointer<ASN1_OCTET_STRING> octet_string;

  external ffi.Pointer<ASN1_PRINTABLESTRING> printablestring;

  external ffi.Pointer<ASN1_T61STRING> t61string;

  external ffi.Pointer<ASN1_IA5STRING> ia5string;

  external ffi.Pointer<ASN1_GENERALSTRING> generalstring;

  external ffi.Pointer<ASN1_BMPSTRING> bmpstring;

  external ffi.Pointer<ASN1_UNIVERSALSTRING> universalstring;

  external ffi.Pointer<ASN1_UTCTIME> utctime;

  external ffi.Pointer<ASN1_GENERALIZEDTIME> generalizedtime;

  external ffi.Pointer<ASN1_VISIBLESTRING> visiblestring;

  external ffi.Pointer<ASN1_UTF8STRING> utf8string;

  /// set and sequence are left complete and still contain the set or
  /// sequence bytes
  external ffi.Pointer<ASN1_STRING> set$;

  external ffi.Pointer<ASN1_STRING> sequence;

  external ffi.Pointer<ASN1_VALUE> asn1_value;
}

final class asn1_type_st extends ffi.Struct {
  @ffi.Int()
  external int type;

  external UnnamedUnion1 value;
}

typedef ASN1_TYPE = asn1_type_st;

final class asn1_string_table_st extends ffi.Struct {
  @ffi.Int()
  external int nid;

  @ffi.Long()
  external int minsize;

  @ffi.Long()
  external int maxsize;

  @ffi.UnsignedLong()
  external int mask;

  @ffi.UnsignedLong()
  external int flags;
}

typedef ASN1_STRING_TABLE = asn1_string_table_st;

final class ASN1_ITEM_st extends ffi.Opaque {}

typedef ASN1_ITEM = ASN1_ITEM_st;

final class asn1_pctx_st extends ffi.Opaque {}

typedef ASN1_PCTX = asn1_pctx_st;

final class asn1_sctx_st extends ffi.Opaque {}

typedef ASN1_SCTX = asn1_sctx_st;

final class bio_st extends ffi.Opaque {}

typedef BIO = bio_st;

final class bignum_st extends ffi.Opaque {}

typedef BIGNUM = bignum_st;

final class bignum_ctx extends ffi.Opaque {}

typedef BN_CTX = bignum_ctx;

final class bn_blinding_st extends ffi.Opaque {}

typedef BN_BLINDING = bn_blinding_st;

final class bn_mont_ctx_st extends ffi.Opaque {}

typedef BN_MONT_CTX = bn_mont_ctx_st;

final class bn_recp_ctx_st extends ffi.Opaque {}

typedef BN_RECP_CTX = bn_recp_ctx_st;

final class bn_gencb_st extends ffi.Opaque {}

typedef BN_GENCB = bn_gencb_st;

final class buf_mem_st extends ffi.Opaque {}

typedef BUF_MEM = buf_mem_st;

final class stack_st_BIGNUM extends ffi.Opaque {}

final class stack_st_BIGNUM_const extends ffi.Opaque {}

final class err_state_st extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int> err_flags;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int> err_marks;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> err_buffer;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Pointer<ffi.Char>> err_data;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Size> err_data_size;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int> err_data_flags;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Pointer<ffi.Char>> err_file;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int> err_line;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Pointer<ffi.Char>> err_func;

  @ffi.Int()
  external int top;

  @ffi.Int()
  external int bottom;
}

typedef ERR_STATE = err_state_st;

final class evp_cipher_st extends ffi.Opaque {}

typedef EVP_CIPHER = evp_cipher_st;

final class evp_cipher_ctx_st extends ffi.Opaque {}

typedef EVP_CIPHER_CTX = evp_cipher_ctx_st;

final class evp_md_st extends ffi.Opaque {}

typedef EVP_MD = evp_md_st;

final class evp_md_ctx_st extends ffi.Opaque {}

typedef EVP_MD_CTX = evp_md_ctx_st;

final class evp_mac_st extends ffi.Opaque {}

typedef EVP_MAC = evp_mac_st;

final class evp_mac_ctx_st extends ffi.Opaque {}

typedef EVP_MAC_CTX = evp_mac_ctx_st;

final class evp_pkey_st extends ffi.Opaque {}

typedef EVP_PKEY = evp_pkey_st;

final class evp_skey_st extends ffi.Opaque {}

typedef EVP_SKEY = evp_skey_st;

final class evp_pkey_asn1_method_st extends ffi.Opaque {}

typedef EVP_PKEY_ASN1_METHOD = evp_pkey_asn1_method_st;

final class evp_pkey_method_st extends ffi.Opaque {}

typedef EVP_PKEY_METHOD = evp_pkey_method_st;

final class evp_pkey_ctx_st extends ffi.Opaque {}

typedef EVP_PKEY_CTX = evp_pkey_ctx_st;

final class evp_keymgmt_st extends ffi.Opaque {}

typedef EVP_KEYMGMT = evp_keymgmt_st;

final class evp_kdf_st extends ffi.Opaque {}

typedef EVP_KDF = evp_kdf_st;

final class evp_kdf_ctx_st extends ffi.Opaque {}

typedef EVP_KDF_CTX = evp_kdf_ctx_st;

final class evp_rand_st extends ffi.Opaque {}

typedef EVP_RAND = evp_rand_st;

final class evp_rand_ctx_st extends ffi.Opaque {}

typedef EVP_RAND_CTX = evp_rand_ctx_st;

final class evp_keyexch_st extends ffi.Opaque {}

typedef EVP_KEYEXCH = evp_keyexch_st;

final class evp_signature_st extends ffi.Opaque {}

typedef EVP_SIGNATURE = evp_signature_st;

final class evp_skeymgmt_st extends ffi.Opaque {}

typedef EVP_SKEYMGMT = evp_skeymgmt_st;

final class evp_asym_cipher_st extends ffi.Opaque {}

typedef EVP_ASYM_CIPHER = evp_asym_cipher_st;

final class evp_kem_st extends ffi.Opaque {}

typedef EVP_KEM = evp_kem_st;

final class evp_Encode_Ctx_st extends ffi.Opaque {}

typedef EVP_ENCODE_CTX = evp_Encode_Ctx_st;

final class hmac_ctx_st extends ffi.Opaque {}

typedef HMAC_CTX = hmac_ctx_st;

final class dh_st extends ffi.Opaque {}

typedef DH = dh_st;

final class dh_method extends ffi.Opaque {}

typedef DH_METHOD = dh_method;

final class dsa_st extends ffi.Opaque {}

typedef DSA = dsa_st;

final class dsa_method extends ffi.Opaque {}

typedef DSA_METHOD = dsa_method;

final class rsa_st extends ffi.Opaque {}

typedef RSA = rsa_st;

final class rsa_meth_st extends ffi.Opaque {}

typedef RSA_METHOD = rsa_meth_st;

final class rsa_pss_params_st extends ffi.Opaque {}

typedef RSA_PSS_PARAMS = rsa_pss_params_st;

final class ec_key_st extends ffi.Opaque {}

typedef EC_KEY = ec_key_st;

final class ec_key_method_st extends ffi.Opaque {}

typedef EC_KEY_METHOD = ec_key_method_st;

final class rand_meth_st extends ffi.Opaque {}

typedef RAND_METHOD = rand_meth_st;

final class rand_drbg_st extends ffi.Opaque {}

typedef RAND_DRBG = rand_drbg_st;

final class ssl_dane_st extends ffi.Opaque {}

typedef SSL_DANE = ssl_dane_st;

final class x509_st extends ffi.Opaque {}

typedef X509 = x509_st;

final class X509_algor_st extends ffi.Opaque {}

typedef X509_ALGOR = X509_algor_st;

final class X509_crl_st extends ffi.Opaque {}

typedef X509_CRL = X509_crl_st;

final class x509_crl_method_st extends ffi.Opaque {}

typedef X509_CRL_METHOD = x509_crl_method_st;

final class x509_revoked_st extends ffi.Opaque {}

typedef X509_REVOKED = x509_revoked_st;

final class X509_name_st extends ffi.Opaque {}

typedef X509_NAME = X509_name_st;

final class X509_pubkey_st extends ffi.Opaque {}

typedef X509_PUBKEY = X509_pubkey_st;

final class x509_store_st extends ffi.Opaque {}

typedef X509_STORE = x509_store_st;

final class x509_store_ctx_st extends ffi.Opaque {}

typedef X509_STORE_CTX = x509_store_ctx_st;

final class x509_object_st extends ffi.Opaque {}

typedef X509_OBJECT = x509_object_st;

final class x509_lookup_st extends ffi.Opaque {}

typedef X509_LOOKUP = x509_lookup_st;

final class x509_lookup_method_st extends ffi.Opaque {}

typedef X509_LOOKUP_METHOD = x509_lookup_method_st;

final class X509_VERIFY_PARAM_st extends ffi.Opaque {}

typedef X509_VERIFY_PARAM = X509_VERIFY_PARAM_st;

final class x509_sig_info_st extends ffi.Opaque {}

typedef X509_SIG_INFO = x509_sig_info_st;

final class pkcs8_priv_key_info_st extends ffi.Opaque {}

typedef PKCS8_PRIV_KEY_INFO = pkcs8_priv_key_info_st;

final class v3_ext_ctx extends ffi.Opaque {}

typedef X509V3_CTX = v3_ext_ctx;

final class conf_st extends ffi.Opaque {}

typedef CONF = conf_st;

final class ossl_init_settings_st extends ffi.Opaque {}

typedef OPENSSL_INIT_SETTINGS = ossl_init_settings_st;

final class ui_st extends ffi.Opaque {}

typedef UI = ui_st;

final class ui_method_st extends ffi.Opaque {}

typedef UI_METHOD = ui_method_st;

final class engine_st extends ffi.Opaque {}

typedef ENGINE = engine_st;

final class ssl_st extends ffi.Opaque {}

typedef SSL = ssl_st;

final class ssl_ctx_st extends ffi.Opaque {}

typedef SSL_CTX = ssl_ctx_st;

final class comp_ctx_st extends ffi.Opaque {}

typedef COMP_CTX = comp_ctx_st;

final class comp_method_st extends ffi.Opaque {}

typedef COMP_METHOD = comp_method_st;

final class X509_POLICY_NODE_st extends ffi.Opaque {}

typedef X509_POLICY_NODE = X509_POLICY_NODE_st;

final class X509_POLICY_LEVEL_st extends ffi.Opaque {}

typedef X509_POLICY_LEVEL = X509_POLICY_LEVEL_st;

final class X509_POLICY_TREE_st extends ffi.Opaque {}

typedef X509_POLICY_TREE = X509_POLICY_TREE_st;

final class X509_POLICY_CACHE_st extends ffi.Opaque {}

typedef X509_POLICY_CACHE = X509_POLICY_CACHE_st;

final class AUTHORITY_KEYID_st extends ffi.Opaque {}

typedef AUTHORITY_KEYID = AUTHORITY_KEYID_st;

final class DIST_POINT_st extends ffi.Opaque {}

typedef DIST_POINT = DIST_POINT_st;

final class ISSUING_DIST_POINT_st extends ffi.Opaque {}

typedef ISSUING_DIST_POINT = ISSUING_DIST_POINT_st;

final class NAME_CONSTRAINTS_st extends ffi.Opaque {}

typedef NAME_CONSTRAINTS = NAME_CONSTRAINTS_st;

final class ossl_lib_ctx_st extends ffi.Opaque {}

typedef OSSL_LIB_CTX = ossl_lib_ctx_st;

final class stack_st_void extends ffi.Opaque {}

final class crypto_ex_data_st extends ffi.Struct {
  external ffi.Pointer<OSSL_LIB_CTX> ctx;

  external ffi.Pointer<stack_st_void> sk;
}

typedef CRYPTO_EX_DATA = crypto_ex_data_st;

final class ossl_http_req_ctx_st extends ffi.Opaque {}

typedef OSSL_HTTP_REQ_CTX = ossl_http_req_ctx_st;

final class ocsp_response_st extends ffi.Opaque {}

typedef OCSP_RESPONSE = ocsp_response_st;

final class ocsp_responder_id_st extends ffi.Opaque {}

typedef OCSP_RESPID = ocsp_responder_id_st;

final class sct_st extends ffi.Opaque {}

typedef SCT = sct_st;

final class sct_ctx_st extends ffi.Opaque {}

typedef SCT_CTX = sct_ctx_st;

final class ctlog_st extends ffi.Opaque {}

typedef CTLOG = ctlog_st;

final class ctlog_store_st extends ffi.Opaque {}

typedef CTLOG_STORE = ctlog_store_st;

final class ct_policy_eval_ctx_st extends ffi.Opaque {}

typedef CT_POLICY_EVAL_CTX = ct_policy_eval_ctx_st;

final class ossl_store_info_st extends ffi.Opaque {}

typedef OSSL_STORE_INFO = ossl_store_info_st;

final class ossl_store_search_st extends ffi.Opaque {}

typedef OSSL_STORE_SEARCH = ossl_store_search_st;

/// Dispatch table element.  function_id numbers and the functions are defined
/// in core_dispatch.h, see macros with 'OSSL_CORE_MAKE_FUNC' in their names.
///
/// An array of these is always terminated by function_id == 0
final class ossl_dispatch_st extends ffi.Struct {
  @ffi.Int()
  external int function_id;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> function;
}

typedef OSSL_DISPATCH = ossl_dispatch_st;

/// Other items, essentially an int<->pointer map element.
///
/// We make this type distinct from OSSL_DISPATCH to ensure that dispatch
/// tables remain tables with function pointers only.
///
/// This is used whenever we need to pass things like a table of error reason
/// codes <-> reason string maps, ...
///
/// Usage determines which field works as key if any, rather than field order.
///
/// An array of these is always terminated by id == 0 && ptr == NULL
final class ossl_item_st extends ffi.Struct {
  @ffi.UnsignedInt()
  external int id;

  external ffi.Pointer<ffi.Void> ptr;
}

typedef OSSL_ITEM = ossl_item_st;

/// Type to tie together algorithm names, property definition string and
/// the algorithm implementation in the form of a dispatch table.
///
/// An array of these is always terminated by algorithm_names == NULL
final class ossl_algorithm_st extends ffi.Struct {
  /// key
  external ffi.Pointer<ffi.Char> algorithm_names;

  /// key
  external ffi.Pointer<ffi.Char> property_definition;

  external ffi.Pointer<OSSL_DISPATCH> implementation;

  external ffi.Pointer<ffi.Char> algorithm_description;
}

typedef OSSL_ALGORITHM = ossl_algorithm_st;

/// Type to pass object data in a uniform way, without exposing the object
/// structure.
///
/// An array of these is always terminated by key == NULL
final class ossl_param_st extends ffi.Struct {
  /// the name of the parameter
  external ffi.Pointer<ffi.Char> key;

  /// declare what kind of content is in buffer
  @ffi.UnsignedInt()
  external int data_type;

  /// value being passed in or out
  external ffi.Pointer<ffi.Void> data;

  /// data size
  @ffi.Size()
  external int data_size;

  /// returned content size
  @ffi.Size()
  external int return_size;
}

typedef OSSL_PARAM = ossl_param_st;

final class ossl_param_bld_st extends ffi.Opaque {}

typedef OSSL_PARAM_BLD = ossl_param_bld_st;
typedef pem_password_cb =
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Char> buf,
        ffi.Int size,
        ffi.Int rwflag,
        ffi.Pointer<ffi.Void> userdata,
      )
    >;

final class ossl_encoder_st extends ffi.Opaque {}

typedef OSSL_ENCODER = ossl_encoder_st;

final class ossl_encoder_ctx_st extends ffi.Opaque {}

typedef OSSL_ENCODER_CTX = ossl_encoder_ctx_st;

final class ossl_decoder_st extends ffi.Opaque {}

typedef OSSL_DECODER = ossl_decoder_st;

final class ossl_decoder_ctx_st extends ffi.Opaque {}

typedef OSSL_DECODER_CTX = ossl_decoder_ctx_st;

final class ossl_self_test_st extends ffi.Opaque {}

typedef OSSL_SELF_TEST = ossl_self_test_st;
typedef __gnuc_va_list = __builtin_va_list;

final class timespec extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

final class tm extends ffi.Struct {
  /// seconds after the minute [0-60]
  @ffi.Int()
  external int tm_sec;

  /// minutes after the hour [0-59]
  @ffi.Int()
  external int tm_min;

  /// hours since midnight [0-23]
  @ffi.Int()
  external int tm_hour;

  /// day of the month [1-31]
  @ffi.Int()
  external int tm_mday;

  /// months since January [0-11]
  @ffi.Int()
  external int tm_mon;

  /// years since 1900
  @ffi.Int()
  external int tm_year;

  /// days since Sunday [0-6]
  @ffi.Int()
  external int tm_wday;

  /// days since January 1 [0-365]
  @ffi.Int()
  external int tm_yday;

  /// Daylight Savings Time flag
  @ffi.Int()
  external int tm_isdst;

  /// offset from UTC in seconds
  @ffi.Long()
  external int tm_gmtoff;

  /// timezone abbreviation
  external ffi.Pointer<ffi.Char> tm_zone;
}

enum clockid_t {
  _CLOCK_REALTIME(0),
  _CLOCK_MONOTONIC(6),
  _CLOCK_MONOTONIC_RAW(4),
  _CLOCK_MONOTONIC_RAW_APPROX(5),
  _CLOCK_UPTIME_RAW(8),
  _CLOCK_UPTIME_RAW_APPROX(9),
  _CLOCK_PROCESS_CPUTIME_ID(12),
  _CLOCK_THREAD_CPUTIME_ID(16);

  final int value;
  const clockid_t(this.value);

  static clockid_t fromValue(int value) => switch (value) {
    0 => _CLOCK_REALTIME,
    6 => _CLOCK_MONOTONIC,
    4 => _CLOCK_MONOTONIC_RAW,
    5 => _CLOCK_MONOTONIC_RAW_APPROX,
    8 => _CLOCK_UPTIME_RAW,
    9 => _CLOCK_UPTIME_RAW_APPROX,
    12 => _CLOCK_PROCESS_CPUTIME_ID,
    16 => _CLOCK_THREAD_CPUTIME_ID,
    _ => throw ArgumentError('Unknown value for clockid_t: $value'),
  };
}

typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef wint_t = __darwin_wint_t;

final class ossl_core_handle_st extends ffi.Opaque {}

/// Opaque handles to be used with core upcall functions from providers
typedef OSSL_CORE_HANDLE = ossl_core_handle_st;

final class openssl_core_ctx_st extends ffi.Opaque {}

typedef OPENSSL_CORE_CTX = openssl_core_ctx_st;

final class ossl_core_bio_st extends ffi.Opaque {}

typedef OSSL_CORE_BIO = ossl_core_bio_st;
typedef OSSL_thread_stop_handler_fnFunction =
    ffi.Void Function(ffi.Pointer<ffi.Void> arg);
typedef DartOSSL_thread_stop_handler_fnFunction =
    void Function(ffi.Pointer<ffi.Void> arg);

/// Typedef for the thread stop handling callback. Used both internally and by
/// providers.
///
/// Providers may register for notifications about threads stopping by
/// registering a callback to hear about such events. Providers register the
/// callback using the OSSL_FUNC_CORE_THREAD_START function in the |in| dispatch
/// table passed to OSSL_provider_init(). The arg passed back to a provider will
/// be the provider side context object.
typedef OSSL_thread_stop_handler_fn =
    ffi.Pointer<ffi.NativeFunction<OSSL_thread_stop_handler_fnFunction>>;

/// -
/// Provider entry point
/// --------------------
///
/// This function is expected to be present in any dynamically loadable
/// provider module.  By definition, if this function doesn't exist in a
/// module, that module is not an OpenSSL provider module.
/// /
/// /*-
/// |handle|     pointer to opaque type OSSL_CORE_HANDLE.  This can be used
/// together with some functions passed via |in| to query data.
/// |in|         is the array of functions that the Core passes to the provider.
/// |out|        will be the array of base functions that the provider passes
/// back to the Core.
/// |provctx|    a provider side context object, optionally created if the
/// provider needs it.  This value is passed to other provider
/// functions, notably other context constructors.
typedef OSSL_provider_init_fn =
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<OSSL_CORE_HANDLE> handle,
        ffi.Pointer<OSSL_DISPATCH> in$,
        ffi.Pointer<ffi.Pointer<OSSL_DISPATCH>> out,
        ffi.Pointer<ffi.Pointer<ffi.Void>> provctx,
      )
    >;

/// Generic callback function signature.
///
/// The expectation is that any provider function that wants to offer
/// a callback / hook can do so by taking an argument with this type,
/// as well as a pointer to caller-specific data.  When calling the
/// callback, the provider function can populate an OSSL_PARAM array
/// with data of its choice and pass that in the callback call, along
/// with the caller data argument.
///
/// libcrypto may use the OSSL_PARAM array to create arguments for an
/// application callback it knows about.
typedef OSSL_CALLBACK =
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<OSSL_PARAM> params,
        ffi.Pointer<ffi.Void> arg,
      )
    >;
typedef OSSL_INOUT_CALLBACK =
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<OSSL_PARAM> in_params,
        ffi.Pointer<OSSL_PARAM> out_params,
        ffi.Pointer<ffi.Void> arg,
      )
    >;

/// Passphrase callback function signature
///
/// This is similar to the generic callback function above, but adds a
/// result parameter.
typedef OSSL_PASSPHRASE_CALLBACK =
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Char> pass,
        ffi.Size pass_size,
        ffi.Pointer<ffi.Size> pass_len,
        ffi.Pointer<OSSL_PARAM> params,
        ffi.Pointer<ffi.Void> arg,
      )
    >;

/// Old type for allocating dynamic locks. No longer used. Use the new thread
/// API instead.
final class CRYPTO_dynlock extends ffi.Struct {
  @ffi.Int()
  external int dummy;
}

typedef CRYPTO_RWLOCK = ffi.Void;
typedef DartCRYPTO_RWLOCK = void;
typedef sk_void_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<ffi.Void>> a,
      ffi.Pointer<ffi.Pointer<ffi.Void>> b,
    );
typedef Dartsk_void_compfuncFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<ffi.Void>> a,
      ffi.Pointer<ffi.Pointer<ffi.Void>> b,
    );
typedef sk_void_compfunc =
    ffi.Pointer<ffi.NativeFunction<sk_void_compfuncFunction>>;
typedef sk_void_freefuncFunction = ffi.Void Function(ffi.Pointer<ffi.Void> a);
typedef Dartsk_void_freefuncFunction = void Function(ffi.Pointer<ffi.Void> a);
typedef sk_void_freefunc =
    ffi.Pointer<ffi.NativeFunction<sk_void_freefuncFunction>>;
typedef sk_void_copyfuncFunction =
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> a);
typedef sk_void_copyfunc =
    ffi.Pointer<ffi.NativeFunction<sk_void_copyfuncFunction>>;
typedef CRYPTO_EX_new =
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Void> parent,
        ffi.Pointer<ffi.Void> ptr,
        ffi.Pointer<CRYPTO_EX_DATA> ad,
        ffi.Int idx,
        ffi.Long argl,
        ffi.Pointer<ffi.Void> argp,
      )
    >;
typedef CRYPTO_EX_free =
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Void> parent,
        ffi.Pointer<ffi.Void> ptr,
        ffi.Pointer<CRYPTO_EX_DATA> ad,
        ffi.Int idx,
        ffi.Long argl,
        ffi.Pointer<ffi.Void> argp,
      )
    >;
typedef CRYPTO_EX_dup =
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<CRYPTO_EX_DATA> to,
        ffi.Pointer<CRYPTO_EX_DATA> from,
        ffi.Pointer<ffi.Pointer<ffi.Void>> from_d,
        ffi.Int idx,
        ffi.Long argl,
        ffi.Pointer<ffi.Void> argp,
      )
    >;

/// This structure is no longer used
final class crypto_threadid_st extends ffi.Struct {
  @ffi.Int()
  external int dummy;
}

/// This structure is no longer used
typedef CRYPTO_THREADID = crypto_threadid_st;
typedef CRYPTO_malloc_fnFunction =
    ffi.Pointer<ffi.Void> Function(
      ffi.Size num,
      ffi.Pointer<ffi.Char> file,
      ffi.Int line,
    );
typedef DartCRYPTO_malloc_fnFunction =
    ffi.Pointer<ffi.Void> Function(
      int num,
      ffi.Pointer<ffi.Char> file,
      int line,
    );
typedef CRYPTO_malloc_fn =
    ffi.Pointer<ffi.NativeFunction<CRYPTO_malloc_fnFunction>>;
typedef CRYPTO_realloc_fnFunction =
    ffi.Pointer<ffi.Void> Function(
      ffi.Pointer<ffi.Void> addr,
      ffi.Size num,
      ffi.Pointer<ffi.Char> file,
      ffi.Int line,
    );
typedef DartCRYPTO_realloc_fnFunction =
    ffi.Pointer<ffi.Void> Function(
      ffi.Pointer<ffi.Void> addr,
      int num,
      ffi.Pointer<ffi.Char> file,
      int line,
    );
typedef CRYPTO_realloc_fn =
    ffi.Pointer<ffi.NativeFunction<CRYPTO_realloc_fnFunction>>;
typedef CRYPTO_free_fnFunction =
    ffi.Void Function(
      ffi.Pointer<ffi.Void> addr,
      ffi.Pointer<ffi.Char> file,
      ffi.Int line,
    );
typedef DartCRYPTO_free_fnFunction =
    void Function(
      ffi.Pointer<ffi.Void> addr,
      ffi.Pointer<ffi.Char> file,
      int line,
    );
typedef CRYPTO_free_fn =
    ffi.Pointer<ffi.NativeFunction<CRYPTO_free_fnFunction>>;

final class sched_param extends ffi.Struct {
  @ffi.Int()
  external int sched_priority;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __opaque;
}

typedef qos_class_t = ffi.UnsignedInt;
typedef Dartqos_class_t = int;

final class pthread_override_s extends ffi.Opaque {}

/// !
/// @typedef pthread_override_t
///
/// @abstract
/// An opaque object representing a QOS class override of a thread.
///
/// @discussion
/// A QOS class override of a target thread expresses that an item of pending
/// work classified with a specific QOS class and relative priority depends on
/// the completion of the work currently being executed by the thread (e.g. due
/// to ordering requirements).
///
/// While overrides are in effect, the target thread will execute at the maximum
/// QOS class and relative priority of all overrides and of the QOS class
/// requested by the thread itself.
///
/// A QOS class override does not modify the target thread's requested QOS class
/// value and the effect of an override is not visible to the qos_class_self()
/// and pthread_get_qos_class_np() interfaces.
typedef pthread_override_t = ffi.Pointer<pthread_override_s>;
typedef mach_port_t = __darwin_mach_port_t;
typedef pthread_jit_write_callback_tFunction =
    ffi.Int Function(ffi.Pointer<ffi.Void> ctx);
typedef Dartpthread_jit_write_callback_tFunction =
    int Function(ffi.Pointer<ffi.Void> ctx);

/// !
/// @typedef pthread_jit_write_callback_t
/// The type of a function that can be supplied to {@link
/// pthread_jit_write_with_callback_np} to write to the MAP_JIT region while it
/// is writeable.
///
/// @param ctx
/// A pointer to context that will be passed through to the callback function.
///
/// @result
/// A result code to be returned to the caller of @{link
/// pthread_jit_write_with_callback_np}.  The system does not interpret/act on
/// the value of this result.
typedef pthread_jit_write_callback_t =
    ffi.Pointer<ffi.NativeFunction<pthread_jit_write_callback_tFunction>>;
typedef CRYPTO_ONCE = pthread_once_t;
typedef CRYPTO_THREAD_LOCAL = pthread_key_t;
typedef CRYPTO_THREAD_ID = pthread_t;

final class bio_addr_st extends ffi.Opaque {}

/// the BIO FLAGS values 0x1000 to 0x8000 are reserved for internal KTLS flags
typedef BIO_ADDR = bio_addr_st;

final class bio_addrinfo_st extends ffi.Opaque {}

typedef BIO_ADDRINFO = bio_addrinfo_st;
typedef BIO_callback_fnFunction =
    ffi.Long Function(
      ffi.Pointer<BIO> b,
      ffi.Int oper,
      ffi.Pointer<ffi.Char> argp,
      ffi.Int argi,
      ffi.Long argl,
      ffi.Long ret,
    );
typedef DartBIO_callback_fnFunction =
    int Function(
      ffi.Pointer<BIO> b,
      int oper,
      ffi.Pointer<ffi.Char> argp,
      int argi,
      int argl,
      int ret,
    );
typedef BIO_callback_fn =
    ffi.Pointer<ffi.NativeFunction<BIO_callback_fnFunction>>;
typedef BIO_callback_fn_exFunction =
    ffi.Long Function(
      ffi.Pointer<BIO> b,
      ffi.Int oper,
      ffi.Pointer<ffi.Char> argp,
      ffi.Size len,
      ffi.Int argi,
      ffi.Long argl,
      ffi.Int ret,
      ffi.Pointer<ffi.Size> processed,
    );
typedef DartBIO_callback_fn_exFunction =
    int Function(
      ffi.Pointer<BIO> b,
      int oper,
      ffi.Pointer<ffi.Char> argp,
      int len,
      int argi,
      int argl,
      int ret,
      ffi.Pointer<ffi.Size> processed,
    );
typedef BIO_callback_fn_ex =
    ffi.Pointer<ffi.NativeFunction<BIO_callback_fn_exFunction>>;

final class bio_method_st extends ffi.Opaque {}

typedef BIO_METHOD = bio_method_st;
typedef BIO_info_cb =
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Int)>;
typedef bio_info_cb = BIO_info_cb;

final class stack_st_BIO extends ffi.Opaque {}

typedef sk_BIO_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<BIO>> a,
      ffi.Pointer<ffi.Pointer<BIO>> b,
    );
typedef Dartsk_BIO_compfuncFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<BIO>> a,
      ffi.Pointer<ffi.Pointer<BIO>> b,
    );
typedef sk_BIO_compfunc =
    ffi.Pointer<ffi.NativeFunction<sk_BIO_compfuncFunction>>;
typedef sk_BIO_freefuncFunction = ffi.Void Function(ffi.Pointer<BIO> a);
typedef Dartsk_BIO_freefuncFunction = void Function(ffi.Pointer<BIO> a);
typedef sk_BIO_freefunc =
    ffi.Pointer<ffi.NativeFunction<sk_BIO_freefuncFunction>>;
typedef sk_BIO_copyfuncFunction = ffi.Pointer<BIO> Function(ffi.Pointer<BIO> a);
typedef sk_BIO_copyfunc =
    ffi.Pointer<ffi.NativeFunction<sk_BIO_copyfuncFunction>>;

/// Prefix and suffix callback in ASN1 BIO
typedef asn1_ps_func =
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<BIO> b,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pbuf,
        ffi.Pointer<ffi.Int> plen,
        ffi.Pointer<ffi.Void> parg,
      )
    >;
typedef BIO_dgram_sctp_notification_handler_fnFunction =
    ffi.Void Function(
      ffi.Pointer<BIO> b,
      ffi.Pointer<ffi.Void> context,
      ffi.Pointer<ffi.Void> buf,
    );
typedef DartBIO_dgram_sctp_notification_handler_fnFunction =
    void Function(
      ffi.Pointer<BIO> b,
      ffi.Pointer<ffi.Void> context,
      ffi.Pointer<ffi.Void> buf,
    );
typedef BIO_dgram_sctp_notification_handler_fn =
    ffi.Pointer<
      ffi.NativeFunction<BIO_dgram_sctp_notification_handler_fnFunction>
    >;

/// BIO_sendmmsg/BIO_recvmmsg-related definitions
final class bio_msg_st extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Size()
  external int data_len;

  external ffi.Pointer<BIO_ADDR> peer;

  external ffi.Pointer<BIO_ADDR> local;

  @ffi.Uint64()
  external int flags;
}

/// BIO_sendmmsg/BIO_recvmmsg-related definitions
typedef BIO_MSG = bio_msg_st;

final class bio_mmsg_cb_args_st extends ffi.Struct {
  external ffi.Pointer<BIO_MSG> msg;

  @ffi.Size()
  external int stride;

  @ffi.Size()
  external int num_msg;

  @ffi.Uint64()
  external int flags;

  external ffi.Pointer<ffi.Size> msgs_processed;
}

typedef BIO_MMSG_CB_ARGS = bio_mmsg_cb_args_st;

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Int()
  external int fd;

  external ffi.Pointer<ffi.Void> custom;

  @ffi.UintPtr()
  external int custom_ui;

  external ffi.Pointer<SSL> ssl;
}

final class bio_poll_descriptor_st extends ffi.Struct {
  @ffi.Uint32()
  external int type;

  external UnnamedUnion2 value;
}

typedef BIO_POLL_DESCRIPTOR = bio_poll_descriptor_st;

enum BIO_hostserv_priorities {
  BIO_PARSE_PRIO_HOST(0),
  BIO_PARSE_PRIO_SERV(1);

  final int value;
  const BIO_hostserv_priorities(this.value);

  static BIO_hostserv_priorities fromValue(int value) => switch (value) {
    0 => BIO_PARSE_PRIO_HOST,
    1 => BIO_PARSE_PRIO_SERV,
    _ => throw ArgumentError(
      'Unknown value for BIO_hostserv_priorities: $value',
    ),
  };
}

enum BIO_lookup_type {
  BIO_LOOKUP_CLIENT(0),
  BIO_LOOKUP_SERVER(1);

  final int value;
  const BIO_lookup_type(this.value);

  static BIO_lookup_type fromValue(int value) => switch (value) {
    0 => BIO_LOOKUP_CLIENT,
    1 => BIO_LOOKUP_SERVER,
    _ => throw ArgumentError('Unknown value for BIO_lookup_type: $value'),
  };
}

final class hostent extends ffi.Opaque {}

final class BIO_sock_info_u extends ffi.Union {
  external ffi.Pointer<BIO_ADDR> addr;
}

enum BIO_sock_info_type {
  BIO_SOCK_INFO_ADDRESS(0);

  final int value;
  const BIO_sock_info_type(this.value);

  static BIO_sock_info_type fromValue(int value) => switch (value) {
    0 => BIO_SOCK_INFO_ADDRESS,
    _ => throw ArgumentError('Unknown value for BIO_sock_info_type: $value'),
  };
}

final class lhash_node_st extends ffi.Opaque {}

typedef OPENSSL_LH_NODE = lhash_node_st;
typedef OPENSSL_LH_COMPFUNCFunction =
    ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef DartOPENSSL_LH_COMPFUNCFunction =
    int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef OPENSSL_LH_COMPFUNC =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_LH_COMPFUNCFunction>>;
typedef OPENSSL_LH_COMPFUNCTHUNKFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<ffi.Void>,
      OPENSSL_LH_COMPFUNC,
    );
typedef DartOPENSSL_LH_COMPFUNCTHUNKFunction =
    int Function(
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<ffi.Void>,
      OPENSSL_LH_COMPFUNC,
    );
typedef OPENSSL_LH_COMPFUNCTHUNK =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_LH_COMPFUNCTHUNKFunction>>;
typedef OPENSSL_LH_HASHFUNCFunction =
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>);
typedef DartOPENSSL_LH_HASHFUNCFunction = int Function(ffi.Pointer<ffi.Void>);
typedef OPENSSL_LH_HASHFUNC =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_LH_HASHFUNCFunction>>;
typedef OPENSSL_LH_HASHFUNCTHUNKFunction =
    ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, OPENSSL_LH_HASHFUNC);
typedef DartOPENSSL_LH_HASHFUNCTHUNKFunction =
    int Function(ffi.Pointer<ffi.Void>, OPENSSL_LH_HASHFUNC);
typedef OPENSSL_LH_HASHFUNCTHUNK =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_LH_HASHFUNCTHUNKFunction>>;
typedef OPENSSL_LH_DOALL_FUNCFunction =
    ffi.Void Function(ffi.Pointer<ffi.Void>);
typedef DartOPENSSL_LH_DOALL_FUNCFunction =
    void Function(ffi.Pointer<ffi.Void>);
typedef OPENSSL_LH_DOALL_FUNC =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_LH_DOALL_FUNCFunction>>;
typedef OPENSSL_LH_DOALL_FUNC_THUNKFunction =
    ffi.Void Function(ffi.Pointer<ffi.Void>, OPENSSL_LH_DOALL_FUNC);
typedef DartOPENSSL_LH_DOALL_FUNC_THUNKFunction =
    void Function(ffi.Pointer<ffi.Void>, OPENSSL_LH_DOALL_FUNC);
typedef OPENSSL_LH_DOALL_FUNC_THUNK =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_LH_DOALL_FUNC_THUNKFunction>>;
typedef OPENSSL_LH_DOALL_FUNCARGFunction =
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef DartOPENSSL_LH_DOALL_FUNCARGFunction =
    void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef OPENSSL_LH_DOALL_FUNCARG =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_LH_DOALL_FUNCARGFunction>>;
typedef OPENSSL_LH_DOALL_FUNCARG_THUNKFunction =
    ffi.Void Function(
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<ffi.Void>,
      OPENSSL_LH_DOALL_FUNCARG,
    );
typedef DartOPENSSL_LH_DOALL_FUNCARG_THUNKFunction =
    void Function(
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<ffi.Void>,
      OPENSSL_LH_DOALL_FUNCARG,
    );
typedef OPENSSL_LH_DOALL_FUNCARG_THUNK =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_LH_DOALL_FUNCARG_THUNKFunction>>;

final class lhash_st extends ffi.Opaque {}

typedef OPENSSL_LHASH = lhash_st;

final class lh_OPENSSL_STRING_dummy extends ffi.Union {
  external ffi.Pointer<ffi.Void> d1;

  @ffi.UnsignedLong()
  external int d2;

  @ffi.Int()
  external int d3;
}

final class lhash_st_OPENSSL_STRING extends ffi.Struct {
  external lh_OPENSSL_STRING_dummy dummy;
}

typedef lh_OPENSSL_STRING_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<OPENSSL_STRING> a,
      ffi.Pointer<OPENSSL_STRING> b,
    );
typedef Dartlh_OPENSSL_STRING_compfuncFunction =
    int Function(ffi.Pointer<OPENSSL_STRING> a, ffi.Pointer<OPENSSL_STRING> b);
typedef lh_OPENSSL_STRING_compfunc =
    ffi.Pointer<ffi.NativeFunction<lh_OPENSSL_STRING_compfuncFunction>>;
typedef lh_OPENSSL_STRING_hashfuncFunction =
    ffi.UnsignedLong Function(ffi.Pointer<OPENSSL_STRING> a);
typedef Dartlh_OPENSSL_STRING_hashfuncFunction =
    int Function(ffi.Pointer<OPENSSL_STRING> a);
typedef lh_OPENSSL_STRING_hashfunc =
    ffi.Pointer<ffi.NativeFunction<lh_OPENSSL_STRING_hashfuncFunction>>;
typedef lh_OPENSSL_STRING_doallfuncFunction =
    ffi.Void Function(ffi.Pointer<OPENSSL_STRING> a);
typedef Dartlh_OPENSSL_STRING_doallfuncFunction =
    void Function(ffi.Pointer<OPENSSL_STRING> a);
typedef lh_OPENSSL_STRING_doallfunc =
    ffi.Pointer<ffi.NativeFunction<lh_OPENSSL_STRING_doallfuncFunction>>;

final class lh_OPENSSL_CSTRING_dummy extends ffi.Union {
  external ffi.Pointer<ffi.Void> d1;

  @ffi.UnsignedLong()
  external int d2;

  @ffi.Int()
  external int d3;
}

final class lhash_st_OPENSSL_CSTRING extends ffi.Struct {
  external lh_OPENSSL_CSTRING_dummy dummy;
}

typedef lh_OPENSSL_CSTRING_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<OPENSSL_CSTRING> a,
      ffi.Pointer<OPENSSL_CSTRING> b,
    );
typedef Dartlh_OPENSSL_CSTRING_compfuncFunction =
    int Function(
      ffi.Pointer<OPENSSL_CSTRING> a,
      ffi.Pointer<OPENSSL_CSTRING> b,
    );
typedef lh_OPENSSL_CSTRING_compfunc =
    ffi.Pointer<ffi.NativeFunction<lh_OPENSSL_CSTRING_compfuncFunction>>;
typedef lh_OPENSSL_CSTRING_hashfuncFunction =
    ffi.UnsignedLong Function(ffi.Pointer<OPENSSL_CSTRING> a);
typedef Dartlh_OPENSSL_CSTRING_hashfuncFunction =
    int Function(ffi.Pointer<OPENSSL_CSTRING> a);
typedef lh_OPENSSL_CSTRING_hashfunc =
    ffi.Pointer<ffi.NativeFunction<lh_OPENSSL_CSTRING_hashfuncFunction>>;
typedef lh_OPENSSL_CSTRING_doallfuncFunction =
    ffi.Void Function(ffi.Pointer<OPENSSL_CSTRING> a);
typedef Dartlh_OPENSSL_CSTRING_doallfuncFunction =
    void Function(ffi.Pointer<OPENSSL_CSTRING> a);
typedef lh_OPENSSL_CSTRING_doallfunc =
    ffi.Pointer<ffi.NativeFunction<lh_OPENSSL_CSTRING_doallfuncFunction>>;

final class ERR_string_data_st extends ffi.Struct {
  @ffi.UnsignedLong()
  external int error;

  external ffi.Pointer<ffi.Char> string;
}

typedef ERR_STRING_DATA = ERR_string_data_st;

final class lh_ERR_STRING_DATA_dummy extends ffi.Union {
  external ffi.Pointer<ffi.Void> d1;

  @ffi.UnsignedLong()
  external int d2;

  @ffi.Int()
  external int d3;
}

final class lhash_st_ERR_STRING_DATA extends ffi.Struct {
  external lh_ERR_STRING_DATA_dummy dummy;
}

typedef lh_ERR_STRING_DATA_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ERR_STRING_DATA> a,
      ffi.Pointer<ERR_STRING_DATA> b,
    );
typedef Dartlh_ERR_STRING_DATA_compfuncFunction =
    int Function(
      ffi.Pointer<ERR_STRING_DATA> a,
      ffi.Pointer<ERR_STRING_DATA> b,
    );
typedef lh_ERR_STRING_DATA_compfunc =
    ffi.Pointer<ffi.NativeFunction<lh_ERR_STRING_DATA_compfuncFunction>>;
typedef lh_ERR_STRING_DATA_hashfuncFunction =
    ffi.UnsignedLong Function(ffi.Pointer<ERR_STRING_DATA> a);
typedef Dartlh_ERR_STRING_DATA_hashfuncFunction =
    int Function(ffi.Pointer<ERR_STRING_DATA> a);
typedef lh_ERR_STRING_DATA_hashfunc =
    ffi.Pointer<ffi.NativeFunction<lh_ERR_STRING_DATA_hashfuncFunction>>;
typedef lh_ERR_STRING_DATA_doallfuncFunction =
    ffi.Void Function(ffi.Pointer<ERR_STRING_DATA> a);
typedef Dartlh_ERR_STRING_DATA_doallfuncFunction =
    void Function(ffi.Pointer<ERR_STRING_DATA> a);
typedef lh_ERR_STRING_DATA_doallfunc =
    ffi.Pointer<ffi.NativeFunction<lh_ERR_STRING_DATA_doallfuncFunction>>;

final class SHAstate_st extends ffi.Struct {
  @ffi.UnsignedInt()
  external int h0;

  @ffi.UnsignedInt()
  external int h1;

  @ffi.UnsignedInt()
  external int h2;

  @ffi.UnsignedInt()
  external int h3;

  @ffi.UnsignedInt()
  external int h4;

  @ffi.UnsignedInt()
  external int Nl;

  @ffi.UnsignedInt()
  external int Nh;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedInt> data;

  @ffi.UnsignedInt()
  external int num;
}

typedef SHA_CTX = SHAstate_st;

final class SHA256state_st extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedInt> h;

  @ffi.UnsignedInt()
  external int Nl;

  @ffi.UnsignedInt()
  external int Nh;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedInt> data;

  @ffi.UnsignedInt()
  external int num;

  @ffi.UnsignedInt()
  external int md_len;
}

typedef SHA256_CTX = SHA256state_st;

final class UnnamedUnion3 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLongLong> d;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.UnsignedChar> p;
}

final class SHA512state_st extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedLongLong> h;

  @ffi.UnsignedLongLong()
  external int Nl;

  @ffi.UnsignedLongLong()
  external int Nh;

  external UnnamedUnion3 u;

  @ffi.UnsignedInt()
  external int num;

  @ffi.UnsignedInt()
  external int md_len;
}

typedef SHA512_CTX = SHA512state_st;

/// Enum for the point conversion form as defined in X9.62 (ECDSA)
/// for the encoding of a elliptic curve point (x,y)
enum point_conversion_form_t {
  /// the point is encoded as z||x, where the octet z specifies
  /// which solution of the quadratic equation y is
  POINT_CONVERSION_COMPRESSED(2),

  /// the point is encoded as z||x||y, where z is the octet 0x04
  POINT_CONVERSION_UNCOMPRESSED(4),

  /// the point is encoded as z||x||y, where the octet z specifies
  /// which solution of the quadratic equation y is
  POINT_CONVERSION_HYBRID(6);

  final int value;
  const point_conversion_form_t(this.value);

  static point_conversion_form_t fromValue(int value) => switch (value) {
    2 => POINT_CONVERSION_COMPRESSED,
    4 => POINT_CONVERSION_UNCOMPRESSED,
    6 => POINT_CONVERSION_HYBRID,
    _ => throw ArgumentError(
      'Unknown value for point_conversion_form_t: $value',
    ),
  };
}

/// Stacks for types not otherwise defined in this header
final class stack_st_X509_ALGOR extends ffi.Opaque {}

typedef sk_X509_ALGOR_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<X509_ALGOR>> a,
      ffi.Pointer<ffi.Pointer<X509_ALGOR>> b,
    );
typedef Dartsk_X509_ALGOR_compfuncFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<X509_ALGOR>> a,
      ffi.Pointer<ffi.Pointer<X509_ALGOR>> b,
    );
typedef sk_X509_ALGOR_compfunc =
    ffi.Pointer<ffi.NativeFunction<sk_X509_ALGOR_compfuncFunction>>;
typedef sk_X509_ALGOR_freefuncFunction =
    ffi.Void Function(ffi.Pointer<X509_ALGOR> a);
typedef Dartsk_X509_ALGOR_freefuncFunction =
    void Function(ffi.Pointer<X509_ALGOR> a);
typedef sk_X509_ALGOR_freefunc =
    ffi.Pointer<ffi.NativeFunction<sk_X509_ALGOR_freefuncFunction>>;
typedef sk_X509_ALGOR_copyfuncFunction =
    ffi.Pointer<X509_ALGOR> Function(ffi.Pointer<X509_ALGOR> a);
typedef sk_X509_ALGOR_copyfunc =
    ffi.Pointer<ffi.NativeFunction<sk_X509_ALGOR_copyfuncFunction>>;

/// ASN1_ENCODING structure: this is used to save the received encoding of an
/// ASN1 type. This is useful to get round problems with invalid encodings
/// which can break signatures.
final class ASN1_ENCODING_st extends ffi.Struct {
  /// DER encoding
  external ffi.Pointer<ffi.UnsignedChar> enc;

  /// Length of encoding
  @ffi.Long()
  external int len;

  /// set to 1 if 'enc' is invalid
  @ffi.Int()
  external int modified;
}

/// ASN1_ENCODING structure: this is used to save the received encoding of an
/// ASN1 type. This is useful to get round problems with invalid encodings
/// which can break signatures.
typedef ASN1_ENCODING = ASN1_ENCODING_st;

final class stack_st_ASN1_STRING_TABLE extends ffi.Opaque {}

typedef sk_ASN1_STRING_TABLE_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<ASN1_STRING_TABLE>> a,
      ffi.Pointer<ffi.Pointer<ASN1_STRING_TABLE>> b,
    );
typedef Dartsk_ASN1_STRING_TABLE_compfuncFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<ASN1_STRING_TABLE>> a,
      ffi.Pointer<ffi.Pointer<ASN1_STRING_TABLE>> b,
    );
typedef sk_ASN1_STRING_TABLE_compfunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_STRING_TABLE_compfuncFunction>>;
typedef sk_ASN1_STRING_TABLE_freefuncFunction =
    ffi.Void Function(ffi.Pointer<ASN1_STRING_TABLE> a);
typedef Dartsk_ASN1_STRING_TABLE_freefuncFunction =
    void Function(ffi.Pointer<ASN1_STRING_TABLE> a);
typedef sk_ASN1_STRING_TABLE_freefunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_STRING_TABLE_freefuncFunction>>;
typedef sk_ASN1_STRING_TABLE_copyfuncFunction =
    ffi.Pointer<ASN1_STRING_TABLE> Function(ffi.Pointer<ASN1_STRING_TABLE> a);
typedef sk_ASN1_STRING_TABLE_copyfunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_STRING_TABLE_copyfuncFunction>>;

final class ASN1_TEMPLATE_st extends ffi.Opaque {}

/// Declarations for template structures: for full definitions see asn1t.h
typedef ASN1_TEMPLATE = ASN1_TEMPLATE_st;

final class ASN1_TLC_st extends ffi.Opaque {}

typedef ASN1_TLC = ASN1_TLC_st;
typedef d2i_of_void =
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Pointer<ffi.Void>>,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
        ffi.Long,
      )
    >;
typedef i2d_of_void =
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
      )
    >;
typedef OSSL_i2d_of_void_ctx =
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
        ffi.Pointer<ffi.Void>,
      )
    >;

/// ASN1_ITEM pointer exported type
typedef ASN1_ITEM_EXP = ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function()>;

final class stack_st_ASN1_TYPE extends ffi.Opaque {}

typedef sk_ASN1_TYPE_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<ASN1_TYPE>> a,
      ffi.Pointer<ffi.Pointer<ASN1_TYPE>> b,
    );
typedef Dartsk_ASN1_TYPE_compfuncFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<ASN1_TYPE>> a,
      ffi.Pointer<ffi.Pointer<ASN1_TYPE>> b,
    );
typedef sk_ASN1_TYPE_compfunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_TYPE_compfuncFunction>>;
typedef sk_ASN1_TYPE_freefuncFunction =
    ffi.Void Function(ffi.Pointer<ASN1_TYPE> a);
typedef Dartsk_ASN1_TYPE_freefuncFunction =
    void Function(ffi.Pointer<ASN1_TYPE> a);
typedef sk_ASN1_TYPE_freefunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_TYPE_freefuncFunction>>;
typedef sk_ASN1_TYPE_copyfuncFunction =
    ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ASN1_TYPE> a);
typedef sk_ASN1_TYPE_copyfunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_TYPE_copyfuncFunction>>;
typedef ASN1_SEQUENCE_ANY = stack_st_ASN1_TYPE;

/// This is used to contain a list of bit names
final class BIT_STRING_BITNAME_st extends ffi.Struct {
  @ffi.Int()
  external int bitnum;

  external ffi.Pointer<ffi.Char> lname;

  external ffi.Pointer<ffi.Char> sname;
}

/// This is used to contain a list of bit names
typedef BIT_STRING_BITNAME = BIT_STRING_BITNAME_st;

final class stack_st_ASN1_OBJECT extends ffi.Opaque {}

typedef sk_ASN1_OBJECT_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> a,
      ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> b,
    );
typedef Dartsk_ASN1_OBJECT_compfuncFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> a,
      ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> b,
    );
typedef sk_ASN1_OBJECT_compfunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_OBJECT_compfuncFunction>>;
typedef sk_ASN1_OBJECT_freefuncFunction =
    ffi.Void Function(ffi.Pointer<ASN1_OBJECT> a);
typedef Dartsk_ASN1_OBJECT_freefuncFunction =
    void Function(ffi.Pointer<ASN1_OBJECT> a);
typedef sk_ASN1_OBJECT_freefunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_OBJECT_freefuncFunction>>;
typedef sk_ASN1_OBJECT_copyfuncFunction =
    ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ASN1_OBJECT> a);
typedef sk_ASN1_OBJECT_copyfunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_OBJECT_copyfuncFunction>>;

final class stack_st_ASN1_INTEGER extends ffi.Opaque {}

typedef sk_ASN1_INTEGER_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<ASN1_INTEGER>> a,
      ffi.Pointer<ffi.Pointer<ASN1_INTEGER>> b,
    );
typedef Dartsk_ASN1_INTEGER_compfuncFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<ASN1_INTEGER>> a,
      ffi.Pointer<ffi.Pointer<ASN1_INTEGER>> b,
    );
typedef sk_ASN1_INTEGER_compfunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_INTEGER_compfuncFunction>>;
typedef sk_ASN1_INTEGER_freefuncFunction =
    ffi.Void Function(ffi.Pointer<ASN1_INTEGER> a);
typedef Dartsk_ASN1_INTEGER_freefuncFunction =
    void Function(ffi.Pointer<ASN1_INTEGER> a);
typedef sk_ASN1_INTEGER_freefunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_INTEGER_freefuncFunction>>;
typedef sk_ASN1_INTEGER_copyfuncFunction =
    ffi.Pointer<ASN1_INTEGER> Function(ffi.Pointer<ASN1_INTEGER> a);
typedef sk_ASN1_INTEGER_copyfunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_INTEGER_copyfuncFunction>>;

final class stack_st_ASN1_UTF8STRING extends ffi.Opaque {}

typedef sk_ASN1_UTF8STRING_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>> a,
      ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>> b,
    );
typedef Dartsk_ASN1_UTF8STRING_compfuncFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>> a,
      ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>> b,
    );
typedef sk_ASN1_UTF8STRING_compfunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_UTF8STRING_compfuncFunction>>;
typedef sk_ASN1_UTF8STRING_freefuncFunction =
    ffi.Void Function(ffi.Pointer<ASN1_UTF8STRING> a);
typedef Dartsk_ASN1_UTF8STRING_freefuncFunction =
    void Function(ffi.Pointer<ASN1_UTF8STRING> a);
typedef sk_ASN1_UTF8STRING_freefunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_UTF8STRING_freefuncFunction>>;
typedef sk_ASN1_UTF8STRING_copyfuncFunction =
    ffi.Pointer<ASN1_UTF8STRING> Function(ffi.Pointer<ASN1_UTF8STRING> a);
typedef sk_ASN1_UTF8STRING_copyfunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_UTF8STRING_copyfuncFunction>>;

final class stack_st_ASN1_GENERALSTRING extends ffi.Opaque {}

typedef sk_ASN1_GENERALSTRING_compfuncFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>> a,
      ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>> b,
    );
typedef Dartsk_ASN1_GENERALSTRING_compfuncFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>> a,
      ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>> b,
    );
typedef sk_ASN1_GENERALSTRING_compfunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_GENERALSTRING_compfuncFunction>>;
typedef sk_ASN1_GENERALSTRING_freefuncFunction =
    ffi.Void Function(ffi.Pointer<ASN1_GENERALSTRING> a);
typedef Dartsk_ASN1_GENERALSTRING_freefuncFunction =
    void Function(ffi.Pointer<ASN1_GENERALSTRING> a);
typedef sk_ASN1_GENERALSTRING_freefunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_GENERALSTRING_freefuncFunction>>;
typedef sk_ASN1_GENERALSTRING_copyfuncFunction =
    ffi.Pointer<ASN1_GENERALSTRING> Function(ffi.Pointer<ASN1_GENERALSTRING> a);
typedef sk_ASN1_GENERALSTRING_copyfunc =
    ffi.Pointer<ffi.NativeFunction<sk_ASN1_GENERALSTRING_copyfuncFunction>>;

final class ec_method_st extends ffi.Opaque {}

typedef EC_METHOD = ec_method_st;

final class ec_group_st extends ffi.Opaque {}

typedef EC_GROUP = ec_group_st;

final class ec_point_st extends ffi.Opaque {}

typedef EC_POINT = ec_point_st;

final class ecpk_parameters_st extends ffi.Opaque {}

typedef ECPKPARAMETERS = ecpk_parameters_st;

final class ec_parameters_st extends ffi.Opaque {}

typedef ECPARAMETERS = ec_parameters_st;

/// /
/// /*               handling of internal curves                        */
/// /
final class EC_builtin_curve extends ffi.Struct {
  @ffi.Int()
  external int nid;

  external ffi.Pointer<ffi.Char> comment;
}

final class ECDSA_SIG_st extends ffi.Opaque {}

typedef ECDSA_SIG = ECDSA_SIG_st;

const int QOS_CLASS_USER_INTERACTIVE = 33;

const int QOS_CLASS_USER_INITIATED = 25;

const int QOS_CLASS_DEFAULT = 21;

const int QOS_CLASS_UTILITY = 17;

const int QOS_CLASS_BACKGROUND = 9;

const int QOS_CLASS_UNSPECIFIED = 0;

const int QOS_CLASS_USER_INTERACTIVE$1 = 33;

const int QOS_CLASS_USER_INITIATED$1 = 25;

const int QOS_CLASS_DEFAULT$1 = 21;

const int QOS_CLASS_UTILITY$1 = 17;

const int QOS_CLASS_BACKGROUND$1 = 9;

const int QOS_CLASS_UNSPECIFIED$1 = 0;

const int QOS_CLASS_USER_INTERACTIVE$2 = 33;

const int QOS_CLASS_USER_INITIATED$2 = 25;

const int QOS_CLASS_DEFAULT$2 = 21;

const int QOS_CLASS_UTILITY$2 = 17;

const int QOS_CLASS_BACKGROUND$2 = 9;

const int QOS_CLASS_UNSPECIFIED$2 = 0;

const int QOS_CLASS_USER_INTERACTIVE$3 = 33;

const int QOS_CLASS_USER_INITIATED$3 = 25;

const int QOS_CLASS_DEFAULT$3 = 21;

const int QOS_CLASS_UTILITY$3 = 17;

const int QOS_CLASS_BACKGROUND$3 = 9;

const int QOS_CLASS_UNSPECIFIED$3 = 0;

const int OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = 1;

const int OPENSSL_INIT_LOAD_CRYPTO_STRINGS = 2;

const int OPENSSL_INIT_ADD_ALL_CIPHERS = 4;

const int OPENSSL_INIT_ADD_ALL_DIGESTS = 8;

const int OPENSSL_INIT_NO_ADD_ALL_CIPHERS = 16;

const int OPENSSL_INIT_NO_ADD_ALL_DIGESTS = 32;

const int OPENSSL_INIT_LOAD_CONFIG = 64;

const int OPENSSL_INIT_NO_LOAD_CONFIG = 128;

const int OPENSSL_INIT_ASYNC = 256;

const int OPENSSL_INIT_ENGINE_RDRAND = 512;

const int OPENSSL_INIT_ENGINE_DYNAMIC = 1024;

const int OPENSSL_INIT_ENGINE_OPENSSL = 2048;

const int OPENSSL_INIT_ENGINE_CRYPTODEV = 4096;

const int OPENSSL_INIT_ENGINE_CAPI = 8192;

const int OPENSSL_INIT_ENGINE_PADLOCK = 16384;

const int OPENSSL_INIT_ENGINE_AFALG = 32768;

const int OPENSSL_INIT_ATFORK = 131072;

const int OPENSSL_INIT_NO_ATEXIT = 524288;

const int OPENSSL_INIT_ENGINE_ALL_BUILTIN = 30208;

const int SHA256_DIGEST_LENGTH = 32;

const int NID_undef = 0;

const int NID_itu_t = 645;

const int NID_ccitt = 404;

const int NID_iso = 181;

const int NID_joint_iso_itu_t = 646;

const int NID_joint_iso_ccitt = 393;

const int NID_member_body = 182;

const int NID_identified_organization = 676;

const int NID_gmac = 1195;

const int NID_hmac_md5 = 780;

const int NID_hmac_sha1 = 781;

const int NID_x509ExtAdmission = 1093;

const int NID_certicom_arc = 677;

const int NID_ieee = 1170;

const int NID_ieee_siswg = 1171;

const int NID_international_organizations = 647;

const int NID_wap = 678;

const int NID_wap_wsg = 679;

const int NID_selected_attribute_types = 394;

const int NID_clearance = 395;

const int NID_ISO_US = 183;

const int NID_X9_57 = 184;

const int NID_X9cm = 185;

const int NID_ISO_CN = 1140;

const int NID_oscca = 1141;

const int NID_sm_scheme = 1142;

const int NID_dsa = 116;

const int NID_dsaWithSHA1 = 113;

const int NID_ansi_X9_62 = 405;

const int NID_X9_62_prime_field = 406;

const int NID_X9_62_characteristic_two_field = 407;

const int NID_X9_62_id_characteristic_two_basis = 680;

const int NID_X9_62_onBasis = 681;

const int NID_X9_62_tpBasis = 682;

const int NID_X9_62_ppBasis = 683;

const int NID_X9_62_id_ecPublicKey = 408;

const int NID_X9_62_c2pnb163v1 = 684;

const int NID_X9_62_c2pnb163v2 = 685;

const int NID_X9_62_c2pnb163v3 = 686;

const int NID_X9_62_c2pnb176v1 = 687;

const int NID_X9_62_c2tnb191v1 = 688;

const int NID_X9_62_c2tnb191v2 = 689;

const int NID_X9_62_c2tnb191v3 = 690;

const int NID_X9_62_c2onb191v4 = 691;

const int NID_X9_62_c2onb191v5 = 692;

const int NID_X9_62_c2pnb208w1 = 693;

const int NID_X9_62_c2tnb239v1 = 694;

const int NID_X9_62_c2tnb239v2 = 695;

const int NID_X9_62_c2tnb239v3 = 696;

const int NID_X9_62_c2onb239v4 = 697;

const int NID_X9_62_c2onb239v5 = 698;

const int NID_X9_62_c2pnb272w1 = 699;

const int NID_X9_62_c2pnb304w1 = 700;

const int NID_X9_62_c2tnb359v1 = 701;

const int NID_X9_62_c2pnb368w1 = 702;

const int NID_X9_62_c2tnb431r1 = 703;

const int NID_X9_62_prime192v1 = 409;

const int NID_X9_62_prime192v2 = 410;

const int NID_X9_62_prime192v3 = 411;

const int NID_X9_62_prime239v1 = 412;

const int NID_X9_62_prime239v2 = 413;

const int NID_X9_62_prime239v3 = 414;

const int NID_X9_62_prime256v1 = 415;

const int NID_ecdsa_with_SHA1 = 416;

const int NID_ecdsa_with_Recommended = 791;

const int NID_ecdsa_with_Specified = 792;

const int NID_ecdsa_with_SHA224 = 793;

const int NID_ecdsa_with_SHA256 = 794;

const int NID_ecdsa_with_SHA384 = 795;

const int NID_ecdsa_with_SHA512 = 796;

const int NID_secp112r1 = 704;

const int NID_secp112r2 = 705;

const int NID_secp128r1 = 706;

const int NID_secp128r2 = 707;

const int NID_secp160k1 = 708;

const int NID_secp160r1 = 709;

const int NID_secp160r2 = 710;

const int NID_secp192k1 = 711;

const int NID_secp224k1 = 712;

const int NID_secp224r1 = 713;

const int NID_secp256k1 = 714;

const int NID_secp384r1 = 715;

const int NID_secp521r1 = 716;

const int NID_sect113r1 = 717;

const int NID_sect113r2 = 718;

const int NID_sect131r1 = 719;

const int NID_sect131r2 = 720;

const int NID_sect163k1 = 721;

const int NID_sect163r1 = 722;

const int NID_sect163r2 = 723;

const int NID_sect193r1 = 724;

const int NID_sect193r2 = 725;

const int NID_sect233k1 = 726;

const int NID_sect233r1 = 727;

const int NID_sect239k1 = 728;

const int NID_sect283k1 = 729;

const int NID_sect283r1 = 730;

const int NID_sect409k1 = 731;

const int NID_sect409r1 = 732;

const int NID_sect571k1 = 733;

const int NID_sect571r1 = 734;

const int NID_wap_wsg_idm_ecid_wtls1 = 735;

const int NID_wap_wsg_idm_ecid_wtls3 = 736;

const int NID_wap_wsg_idm_ecid_wtls4 = 737;

const int NID_wap_wsg_idm_ecid_wtls5 = 738;

const int NID_wap_wsg_idm_ecid_wtls6 = 739;

const int NID_wap_wsg_idm_ecid_wtls7 = 740;

const int NID_wap_wsg_idm_ecid_wtls8 = 741;

const int NID_wap_wsg_idm_ecid_wtls9 = 742;

const int NID_wap_wsg_idm_ecid_wtls10 = 743;

const int NID_wap_wsg_idm_ecid_wtls11 = 744;

const int NID_wap_wsg_idm_ecid_wtls12 = 745;

const int NID_cast5_cbc = 108;

const int NID_cast5_ecb = 109;

const int NID_cast5_cfb64 = 110;

const int NID_cast5_ofb64 = 111;

const int NID_pbeWithMD5AndCast5_CBC = 112;

const int NID_id_PasswordBasedMAC = 782;

const int NID_id_DHBasedMac = 783;

const int NID_rsadsi = 1;

const int NID_pkcs = 2;

const int NID_pkcs1 = 186;

const int NID_rsaEncryption = 6;

const int NID_md2WithRSAEncryption = 7;

const int NID_md4WithRSAEncryption = 396;

const int NID_md5WithRSAEncryption = 8;

const int NID_sha1WithRSAEncryption = 65;

const int NID_rsaesOaep = 919;

const int NID_mgf1 = 911;

const int NID_pSpecified = 935;

const int NID_rsassaPss = 912;

const int NID_sha256WithRSAEncryption = 668;

const int NID_sha384WithRSAEncryption = 669;

const int NID_sha512WithRSAEncryption = 670;

const int NID_sha224WithRSAEncryption = 671;

const int NID_sha512_224WithRSAEncryption = 1145;

const int NID_sha512_256WithRSAEncryption = 1146;

const int NID_pkcs3 = 27;

const int NID_dhKeyAgreement = 28;

const int NID_pkcs5 = 187;

const int NID_pbeWithMD2AndDES_CBC = 9;

const int NID_pbeWithMD5AndDES_CBC = 10;

const int NID_pbeWithMD2AndRC2_CBC = 168;

const int NID_pbeWithMD5AndRC2_CBC = 169;

const int NID_pbeWithSHA1AndDES_CBC = 170;

const int NID_pbeWithSHA1AndRC2_CBC = 68;

const int NID_id_pbkdf2 = 69;

const int NID_pbes2 = 161;

const int NID_pbmac1 = 162;

const int NID_pkcs7 = 20;

const int NID_pkcs7_data = 21;

const int NID_pkcs7_signed = 22;

const int NID_pkcs7_enveloped = 23;

const int NID_pkcs7_signedAndEnveloped = 24;

const int NID_pkcs7_digest = 25;

const int NID_pkcs7_encrypted = 26;

const int NID_pkcs9 = 47;

const int NID_pkcs9_emailAddress = 48;

const int NID_pkcs9_unstructuredName = 49;

const int NID_pkcs9_contentType = 50;

const int NID_pkcs9_messageDigest = 51;

const int NID_pkcs9_signingTime = 52;

const int NID_pkcs9_countersignature = 53;

const int NID_pkcs9_challengePassword = 54;

const int NID_pkcs9_unstructuredAddress = 55;

const int NID_pkcs9_extCertAttributes = 56;

const int NID_ext_req = 172;

const int NID_SMIMECapabilities = 167;

const int NID_SMIME = 188;

const int NID_id_smime_mod = 189;

const int NID_id_smime_ct = 190;

const int NID_id_smime_aa = 191;

const int NID_id_smime_alg = 192;

const int NID_id_smime_cd = 193;

const int NID_id_smime_spq = 194;

const int NID_id_smime_cti = 195;

const int NID_id_smime_mod_cms = 196;

const int NID_id_smime_mod_ess = 197;

const int NID_id_smime_mod_oid = 198;

const int NID_id_smime_mod_msg_v3 = 199;

const int NID_id_smime_mod_ets_eSignature_88 = 200;

const int NID_id_smime_mod_ets_eSignature_97 = 201;

const int NID_id_smime_mod_ets_eSigPolicy_88 = 202;

const int NID_id_smime_mod_ets_eSigPolicy_97 = 203;

const int NID_id_smime_ct_receipt = 204;

const int NID_id_smime_ct_authData = 205;

const int NID_id_smime_ct_publishCert = 206;

const int NID_id_smime_ct_TSTInfo = 207;

const int NID_id_smime_ct_TDTInfo = 208;

const int NID_id_smime_ct_contentInfo = 209;

const int NID_id_smime_ct_DVCSRequestData = 210;

const int NID_id_smime_ct_DVCSResponseData = 211;

const int NID_id_smime_ct_compressedData = 786;

const int NID_id_smime_ct_contentCollection = 1058;

const int NID_id_smime_ct_authEnvelopedData = 1059;

const int NID_id_ct_routeOriginAuthz = 1234;

const int NID_id_ct_rpkiManifest = 1235;

const int NID_id_ct_asciiTextWithCRLF = 787;

const int NID_id_ct_xml = 1060;

const int NID_id_ct_rpkiGhostbusters = 1236;

const int NID_id_ct_resourceTaggedAttest = 1237;

const int NID_id_ct_geofeedCSVwithCRLF = 1246;

const int NID_id_ct_signedChecklist = 1247;

const int NID_id_smime_aa_receiptRequest = 212;

const int NID_id_smime_aa_securityLabel = 213;

const int NID_id_smime_aa_mlExpandHistory = 214;

const int NID_id_smime_aa_contentHint = 215;

const int NID_id_smime_aa_msgSigDigest = 216;

const int NID_id_smime_aa_encapContentType = 217;

const int NID_id_smime_aa_contentIdentifier = 218;

const int NID_id_smime_aa_macValue = 219;

const int NID_id_smime_aa_equivalentLabels = 220;

const int NID_id_smime_aa_contentReference = 221;

const int NID_id_smime_aa_encrypKeyPref = 222;

const int NID_id_smime_aa_signingCertificate = 223;

const int NID_id_smime_aa_smimeEncryptCerts = 224;

const int NID_id_smime_aa_timeStampToken = 225;

const int NID_id_smime_aa_ets_sigPolicyId = 226;

const int NID_id_smime_aa_ets_commitmentType = 227;

const int NID_id_smime_aa_ets_signerLocation = 228;

const int NID_id_smime_aa_ets_signerAttr = 229;

const int NID_id_smime_aa_ets_otherSigCert = 230;

const int NID_id_smime_aa_ets_contentTimestamp = 231;

const int NID_id_smime_aa_ets_CertificateRefs = 232;

const int NID_id_smime_aa_ets_RevocationRefs = 233;

const int NID_id_smime_aa_ets_certValues = 234;

const int NID_id_smime_aa_ets_revocationValues = 235;

const int NID_id_smime_aa_ets_escTimeStamp = 236;

const int NID_id_smime_aa_ets_certCRLTimestamp = 237;

const int NID_id_smime_aa_ets_archiveTimeStamp = 238;

const int NID_id_smime_aa_signatureType = 239;

const int NID_id_smime_aa_dvcs_dvc = 240;

const int NID_id_smime_aa_signingCertificateV2 = 1086;

const int NID_id_smime_alg_ESDHwith3DES = 241;

const int NID_id_smime_alg_ESDHwithRC2 = 242;

const int NID_id_smime_alg_3DESwrap = 243;

const int NID_id_smime_alg_RC2wrap = 244;

const int NID_id_smime_alg_ESDH = 245;

const int NID_id_smime_alg_CMS3DESwrap = 246;

const int NID_id_smime_alg_CMSRC2wrap = 247;

const int NID_id_alg_PWRI_KEK = 893;

const int NID_id_smime_cd_ldap = 248;

const int NID_id_smime_spq_ets_sqt_uri = 249;

const int NID_id_smime_spq_ets_sqt_unotice = 250;

const int NID_id_smime_cti_ets_proofOfOrigin = 251;

const int NID_id_smime_cti_ets_proofOfReceipt = 252;

const int NID_id_smime_cti_ets_proofOfDelivery = 253;

const int NID_id_smime_cti_ets_proofOfSender = 254;

const int NID_id_smime_cti_ets_proofOfApproval = 255;

const int NID_id_smime_cti_ets_proofOfCreation = 256;

const int NID_friendlyName = 156;

const int NID_localKeyID = 157;

const int NID_ms_csp_name = 417;

const int NID_LocalKeySet = 856;

const int NID_x509Certificate = 158;

const int NID_sdsiCertificate = 159;

const int NID_x509Crl = 160;

const int NID_pbe_WithSHA1And128BitRC4 = 144;

const int NID_pbe_WithSHA1And40BitRC4 = 145;

const int NID_pbe_WithSHA1And3_Key_TripleDES_CBC = 146;

const int NID_pbe_WithSHA1And2_Key_TripleDES_CBC = 147;

const int NID_pbe_WithSHA1And128BitRC2_CBC = 148;

const int NID_pbe_WithSHA1And40BitRC2_CBC = 149;

const int NID_keyBag = 150;

const int NID_pkcs8ShroudedKeyBag = 151;

const int NID_certBag = 152;

const int NID_crlBag = 153;

const int NID_secretBag = 154;

const int NID_safeContentsBag = 155;

const int NID_md2 = 3;

const int NID_md4 = 257;

const int NID_md5 = 4;

const int NID_md5_sha1 = 114;

const int NID_hmacWithMD5 = 797;

const int NID_hmacWithSHA1 = 163;

const int NID_sm2 = 1172;

const int NID_sm3 = 1143;

const int NID_sm3WithRSAEncryption = 1144;

const int NID_SM2_with_SM3 = 1204;

const int NID_hmacWithSHA224 = 798;

const int NID_hmacWithSHA256 = 799;

const int NID_hmacWithSHA384 = 800;

const int NID_hmacWithSHA512 = 801;

const int NID_hmacWithSHA512_224 = 1193;

const int NID_hmacWithSHA512_256 = 1194;

const int NID_rc2_cbc = 37;

const int NID_rc2_ecb = 38;

const int NID_rc2_cfb64 = 39;

const int NID_rc2_ofb64 = 40;

const int NID_rc2_40_cbc = 98;

const int NID_rc2_64_cbc = 166;

const int NID_rc4 = 5;

const int NID_rc4_40 = 97;

const int NID_des_ede3_cbc = 44;

const int NID_rc5_cbc = 120;

const int NID_rc5_ecb = 121;

const int NID_rc5_cfb64 = 122;

const int NID_rc5_ofb64 = 123;

const int NID_ms_ext_req = 171;

const int NID_ms_code_ind = 134;

const int NID_ms_code_com = 135;

const int NID_ms_ctl_sign = 136;

const int NID_ms_sgc = 137;

const int NID_ms_efs = 138;

const int NID_ms_smartcard_login = 648;

const int NID_ms_upn = 649;

const int NID_idea_cbc = 34;

const int NID_idea_ecb = 36;

const int NID_idea_cfb64 = 35;

const int NID_idea_ofb64 = 46;

const int NID_bf_cbc = 91;

const int NID_bf_ecb = 92;

const int NID_bf_cfb64 = 93;

const int NID_bf_ofb64 = 94;

const int NID_id_pkix = 127;

const int NID_id_pkix_mod = 258;

const int NID_id_pe = 175;

const int NID_id_qt = 259;

const int NID_id_kp = 128;

const int NID_id_it = 260;

const int NID_id_pkip = 261;

const int NID_id_alg = 262;

const int NID_id_cmc = 263;

const int NID_id_on = 264;

const int NID_id_pda = 265;

const int NID_id_aca = 266;

const int NID_id_qcs = 267;

const int NID_id_cp = 1238;

const int NID_id_cct = 268;

const int NID_id_ppl = 662;

const int NID_id_ad = 176;

const int NID_id_pkix1_explicit_88 = 269;

const int NID_id_pkix1_implicit_88 = 270;

const int NID_id_pkix1_explicit_93 = 271;

const int NID_id_pkix1_implicit_93 = 272;

const int NID_id_mod_crmf = 273;

const int NID_id_mod_cmc = 274;

const int NID_id_mod_kea_profile_88 = 275;

const int NID_id_mod_kea_profile_93 = 276;

const int NID_id_mod_cmp = 277;

const int NID_id_mod_qualified_cert_88 = 278;

const int NID_id_mod_qualified_cert_93 = 279;

const int NID_id_mod_attribute_cert = 280;

const int NID_id_mod_timestamp_protocol = 281;

const int NID_id_mod_ocsp = 282;

const int NID_id_mod_dvcs = 283;

const int NID_id_mod_cmp2000 = 284;

const int NID_info_access = 177;

const int NID_biometricInfo = 285;

const int NID_qcStatements = 286;

const int NID_ac_auditEntity = 287;

const int NID_ac_targeting = 288;

const int NID_aaControls = 289;

const int NID_sbgp_ipAddrBlock = 290;

const int NID_sbgp_autonomousSysNum = 291;

const int NID_sbgp_routerIdentifier = 292;

const int NID_ac_proxying = 397;

const int NID_sinfo_access = 398;

const int NID_proxyCertInfo = 663;

const int NID_tlsfeature = 1020;

const int NID_sbgp_ipAddrBlockv2 = 1239;

const int NID_sbgp_autonomousSysNumv2 = 1240;

const int NID_id_qt_cps = 164;

const int NID_id_qt_unotice = 165;

const int NID_textNotice = 293;

const int NID_server_auth = 129;

const int NID_client_auth = 130;

const int NID_code_sign = 131;

const int NID_email_protect = 132;

const int NID_ipsecEndSystem = 294;

const int NID_ipsecTunnel = 295;

const int NID_ipsecUser = 296;

const int NID_time_stamp = 133;

const int NID_OCSP_sign = 180;

const int NID_dvcs = 297;

const int NID_ipsec_IKE = 1022;

const int NID_capwapAC = 1023;

const int NID_capwapWTP = 1024;

const int NID_sshClient = 1025;

const int NID_sshServer = 1026;

const int NID_sendRouter = 1027;

const int NID_sendProxiedRouter = 1028;

const int NID_sendOwner = 1029;

const int NID_sendProxiedOwner = 1030;

const int NID_cmcCA = 1131;

const int NID_cmcRA = 1132;

const int NID_cmcArchive = 1219;

const int NID_id_kp_bgpsec_router = 1220;

const int NID_id_kp_BrandIndicatorforMessageIdentification = 1221;

const int NID_cmKGA = 1222;

const int NID_id_it_caProtEncCert = 298;

const int NID_id_it_signKeyPairTypes = 299;

const int NID_id_it_encKeyPairTypes = 300;

const int NID_id_it_preferredSymmAlg = 301;

const int NID_id_it_caKeyUpdateInfo = 302;

const int NID_id_it_currentCRL = 303;

const int NID_id_it_unsupportedOIDs = 304;

const int NID_id_it_subscriptionRequest = 305;

const int NID_id_it_subscriptionResponse = 306;

const int NID_id_it_keyPairParamReq = 307;

const int NID_id_it_keyPairParamRep = 308;

const int NID_id_it_revPassphrase = 309;

const int NID_id_it_implicitConfirm = 310;

const int NID_id_it_confirmWaitTime = 311;

const int NID_id_it_origPKIMessage = 312;

const int NID_id_it_suppLangTags = 784;

const int NID_id_it_caCerts = 1223;

const int NID_id_it_rootCaKeyUpdate = 1224;

const int NID_id_it_certReqTemplate = 1225;

const int NID_id_regCtrl = 313;

const int NID_id_regInfo = 314;

const int NID_id_regCtrl_regToken = 315;

const int NID_id_regCtrl_authenticator = 316;

const int NID_id_regCtrl_pkiPublicationInfo = 317;

const int NID_id_regCtrl_pkiArchiveOptions = 318;

const int NID_id_regCtrl_oldCertID = 319;

const int NID_id_regCtrl_protocolEncrKey = 320;

const int NID_id_regInfo_utf8Pairs = 321;

const int NID_id_regInfo_certReq = 322;

const int NID_id_alg_des40 = 323;

const int NID_id_alg_noSignature = 324;

const int NID_id_alg_dh_sig_hmac_sha1 = 325;

const int NID_id_alg_dh_pop = 326;

const int NID_id_cmc_statusInfo = 327;

const int NID_id_cmc_identification = 328;

const int NID_id_cmc_identityProof = 329;

const int NID_id_cmc_dataReturn = 330;

const int NID_id_cmc_transactionId = 331;

const int NID_id_cmc_senderNonce = 332;

const int NID_id_cmc_recipientNonce = 333;

const int NID_id_cmc_addExtensions = 334;

const int NID_id_cmc_encryptedPOP = 335;

const int NID_id_cmc_decryptedPOP = 336;

const int NID_id_cmc_lraPOPWitness = 337;

const int NID_id_cmc_getCert = 338;

const int NID_id_cmc_getCRL = 339;

const int NID_id_cmc_revokeRequest = 340;

const int NID_id_cmc_regInfo = 341;

const int NID_id_cmc_responseInfo = 342;

const int NID_id_cmc_queryPending = 343;

const int NID_id_cmc_popLinkRandom = 344;

const int NID_id_cmc_popLinkWitness = 345;

const int NID_id_cmc_confirmCertAcceptance = 346;

const int NID_id_on_personalData = 347;

const int NID_id_on_permanentIdentifier = 858;

const int NID_XmppAddr = 1209;

const int NID_SRVName = 1210;

const int NID_NAIRealm = 1211;

const int NID_id_on_SmtpUTF8Mailbox = 1208;

const int NID_id_pda_dateOfBirth = 348;

const int NID_id_pda_placeOfBirth = 349;

const int NID_id_pda_gender = 351;

const int NID_id_pda_countryOfCitizenship = 352;

const int NID_id_pda_countryOfResidence = 353;

const int NID_id_aca_authenticationInfo = 354;

const int NID_id_aca_accessIdentity = 355;

const int NID_id_aca_chargingIdentity = 356;

const int NID_id_aca_group = 357;

const int NID_id_aca_role = 358;

const int NID_id_aca_encAttrs = 399;

const int NID_id_qcs_pkixQCSyntax_v1 = 359;

const int NID_ipAddr_asNumber = 1241;

const int NID_ipAddr_asNumberv2 = 1242;

const int NID_id_cct_crs = 360;

const int NID_id_cct_PKIData = 361;

const int NID_id_cct_PKIResponse = 362;

const int NID_id_ppl_anyLanguage = 664;

const int NID_id_ppl_inheritAll = 665;

const int NID_Independent = 667;

const int NID_ad_OCSP = 178;

const int NID_ad_ca_issuers = 179;

const int NID_ad_timeStamping = 363;

const int NID_ad_dvcs = 364;

const int NID_caRepository = 785;

const int NID_rpkiManifest = 1243;

const int NID_signedObject = 1244;

const int NID_rpkiNotify = 1245;

const int NID_id_pkix_OCSP_basic = 365;

const int NID_id_pkix_OCSP_Nonce = 366;

const int NID_id_pkix_OCSP_CrlID = 367;

const int NID_id_pkix_OCSP_acceptableResponses = 368;

const int NID_id_pkix_OCSP_noCheck = 369;

const int NID_id_pkix_OCSP_archiveCutoff = 370;

const int NID_id_pkix_OCSP_serviceLocator = 371;

const int NID_id_pkix_OCSP_extendedStatus = 372;

const int NID_id_pkix_OCSP_valid = 373;

const int NID_id_pkix_OCSP_path = 374;

const int NID_id_pkix_OCSP_trustRoot = 375;

const int NID_algorithm = 376;

const int NID_md5WithRSA = 104;

const int NID_des_ecb = 29;

const int NID_des_cbc = 31;

const int NID_des_ofb64 = 45;

const int NID_des_cfb64 = 30;

const int NID_rsaSignature = 377;

const int NID_dsa_2 = 67;

const int NID_dsaWithSHA = 66;

const int NID_shaWithRSAEncryption = 42;

const int NID_des_ede_ecb = 32;

const int NID_des_ede3_ecb = 33;

const int NID_des_ede_cbc = 43;

const int NID_des_ede_cfb64 = 60;

const int NID_des_ede3_cfb64 = 61;

const int NID_des_ede_ofb64 = 62;

const int NID_des_ede3_ofb64 = 63;

const int NID_desx_cbc = 80;

const int NID_sha = 41;

const int NID_sha1 = 64;

const int NID_dsaWithSHA1_2 = 70;

const int NID_sha1WithRSA = 115;

const int NID_ripemd160 = 117;

const int NID_ripemd160WithRSA = 119;

const int NID_blake2bmac = 1201;

const int NID_blake2smac = 1202;

const int NID_blake2b512 = 1056;

const int NID_blake2s256 = 1057;

const int NID_sxnet = 143;

const int NID_X500 = 11;

const int NID_X509 = 12;

const int NID_commonName = 13;

const int NID_surname = 100;

const int NID_serialNumber = 105;

const int NID_countryName = 14;

const int NID_localityName = 15;

const int NID_stateOrProvinceName = 16;

const int NID_streetAddress = 660;

const int NID_organizationName = 17;

const int NID_organizationalUnitName = 18;

const int NID_title = 106;

const int NID_description = 107;

const int NID_searchGuide = 859;

const int NID_businessCategory = 860;

const int NID_postalAddress = 861;

const int NID_postalCode = 661;

const int NID_postOfficeBox = 862;

const int NID_physicalDeliveryOfficeName = 863;

const int NID_telephoneNumber = 864;

const int NID_telexNumber = 865;

const int NID_teletexTerminalIdentifier = 866;

const int NID_facsimileTelephoneNumber = 867;

const int NID_x121Address = 868;

const int NID_internationaliSDNNumber = 869;

const int NID_registeredAddress = 870;

const int NID_destinationIndicator = 871;

const int NID_preferredDeliveryMethod = 872;

const int NID_presentationAddress = 873;

const int NID_supportedApplicationContext = 874;

const int NID_member = 875;

const int NID_owner = 876;

const int NID_roleOccupant = 877;

const int NID_seeAlso = 878;

const int NID_userPassword = 879;

const int NID_userCertificate = 880;

const int NID_cACertificate = 881;

const int NID_authorityRevocationList = 882;

const int NID_certificateRevocationList = 883;

const int NID_crossCertificatePair = 884;

const int NID_name = 173;

const int NID_givenName = 99;

const int NID_initials = 101;

const int NID_generationQualifier = 509;

const int NID_x500UniqueIdentifier = 503;

const int NID_dnQualifier = 174;

const int NID_enhancedSearchGuide = 885;

const int NID_protocolInformation = 886;

const int NID_distinguishedName = 887;

const int NID_uniqueMember = 888;

const int NID_houseIdentifier = 889;

const int NID_supportedAlgorithms = 890;

const int NID_deltaRevocationList = 891;

const int NID_dmdName = 892;

const int NID_pseudonym = 510;

const int NID_role = 400;

const int NID_organizationIdentifier = 1089;

const int NID_countryCode3c = 1090;

const int NID_countryCode3n = 1091;

const int NID_dnsName = 1092;

const int NID_X500algorithms = 378;

const int NID_rsa = 19;

const int NID_mdc2WithRSA = 96;

const int NID_mdc2 = 95;

const int NID_id_ce = 81;

const int NID_subject_directory_attributes = 769;

const int NID_subject_key_identifier = 82;

const int NID_key_usage = 83;

const int NID_private_key_usage_period = 84;

const int NID_subject_alt_name = 85;

const int NID_issuer_alt_name = 86;

const int NID_basic_constraints = 87;

const int NID_crl_number = 88;

const int NID_crl_reason = 141;

const int NID_invalidity_date = 142;

const int NID_delta_crl = 140;

const int NID_issuing_distribution_point = 770;

const int NID_certificate_issuer = 771;

const int NID_name_constraints = 666;

const int NID_crl_distribution_points = 103;

const int NID_certificate_policies = 89;

const int NID_any_policy = 746;

const int NID_policy_mappings = 747;

const int NID_authority_key_identifier = 90;

const int NID_policy_constraints = 401;

const int NID_ext_key_usage = 126;

const int NID_freshest_crl = 857;

const int NID_inhibit_any_policy = 748;

const int NID_target_information = 402;

const int NID_no_rev_avail = 403;

const int NID_anyExtendedKeyUsage = 910;

const int NID_netscape = 57;

const int NID_netscape_cert_extension = 58;

const int NID_netscape_data_type = 59;

const int NID_netscape_cert_type = 71;

const int NID_netscape_base_url = 72;

const int NID_netscape_revocation_url = 73;

const int NID_netscape_ca_revocation_url = 74;

const int NID_netscape_renewal_url = 75;

const int NID_netscape_ca_policy_url = 76;

const int NID_netscape_ssl_server_name = 77;

const int NID_netscape_comment = 78;

const int NID_netscape_cert_sequence = 79;

const int NID_ns_sgc = 139;

const int NID_org = 379;

const int NID_dod = 380;

const int NID_iana = 381;

const int NID_Directory = 382;

const int NID_Management = 383;

const int NID_Experimental = 384;

const int NID_Private = 385;

const int NID_Security = 386;

const int NID_SNMPv2 = 387;

const int NID_Mail = 388;

const int NID_Enterprises = 389;

const int NID_dcObject = 390;

const int NID_mime_mhs = 504;

const int NID_mime_mhs_headings = 505;

const int NID_mime_mhs_bodies = 506;

const int NID_id_hex_partial_message = 507;

const int NID_id_hex_multipart_message = 508;

const int NID_zlib_compression = 125;

const int NID_aes_128_ecb = 418;

const int NID_aes_128_cbc = 419;

const int NID_aes_128_ofb128 = 420;

const int NID_aes_128_cfb128 = 421;

const int NID_id_aes128_wrap = 788;

const int NID_aes_128_gcm = 895;

const int NID_aes_128_ccm = 896;

const int NID_id_aes128_wrap_pad = 897;

const int NID_aes_192_ecb = 422;

const int NID_aes_192_cbc = 423;

const int NID_aes_192_ofb128 = 424;

const int NID_aes_192_cfb128 = 425;

const int NID_id_aes192_wrap = 789;

const int NID_aes_192_gcm = 898;

const int NID_aes_192_ccm = 899;

const int NID_id_aes192_wrap_pad = 900;

const int NID_aes_256_ecb = 426;

const int NID_aes_256_cbc = 427;

const int NID_aes_256_ofb128 = 428;

const int NID_aes_256_cfb128 = 429;

const int NID_id_aes256_wrap = 790;

const int NID_aes_256_gcm = 901;

const int NID_aes_256_ccm = 902;

const int NID_id_aes256_wrap_pad = 903;

const int NID_aes_128_xts = 913;

const int NID_aes_256_xts = 914;

const int NID_aes_128_cfb1 = 650;

const int NID_aes_192_cfb1 = 651;

const int NID_aes_256_cfb1 = 652;

const int NID_aes_128_cfb8 = 653;

const int NID_aes_192_cfb8 = 654;

const int NID_aes_256_cfb8 = 655;

const int NID_aes_128_ctr = 904;

const int NID_aes_192_ctr = 905;

const int NID_aes_256_ctr = 906;

const int NID_aes_128_ocb = 958;

const int NID_aes_192_ocb = 959;

const int NID_aes_256_ocb = 960;

const int NID_des_cfb1 = 656;

const int NID_des_cfb8 = 657;

const int NID_des_ede3_cfb1 = 658;

const int NID_des_ede3_cfb8 = 659;

const int NID_sha256 = 672;

const int NID_sha384 = 673;

const int NID_sha512 = 674;

const int NID_sha224 = 675;

const int NID_sha512_224 = 1094;

const int NID_sha512_256 = 1095;

const int NID_sha3_224 = 1096;

const int NID_sha3_256 = 1097;

const int NID_sha3_384 = 1098;

const int NID_sha3_512 = 1099;

const int NID_shake128 = 1100;

const int NID_shake256 = 1101;

const int NID_hmac_sha3_224 = 1102;

const int NID_hmac_sha3_256 = 1103;

const int NID_hmac_sha3_384 = 1104;

const int NID_hmac_sha3_512 = 1105;

const int NID_kmac128 = 1196;

const int NID_kmac256 = 1197;

const int NID_dsa_with_SHA224 = 802;

const int NID_dsa_with_SHA256 = 803;

const int NID_dsa_with_SHA384 = 1106;

const int NID_dsa_with_SHA512 = 1107;

const int NID_dsa_with_SHA3_224 = 1108;

const int NID_dsa_with_SHA3_256 = 1109;

const int NID_dsa_with_SHA3_384 = 1110;

const int NID_dsa_with_SHA3_512 = 1111;

const int NID_ecdsa_with_SHA3_224 = 1112;

const int NID_ecdsa_with_SHA3_256 = 1113;

const int NID_ecdsa_with_SHA3_384 = 1114;

const int NID_ecdsa_with_SHA3_512 = 1115;

const int NID_RSA_SHA3_224 = 1116;

const int NID_RSA_SHA3_256 = 1117;

const int NID_RSA_SHA3_384 = 1118;

const int NID_RSA_SHA3_512 = 1119;

const int NID_hold_instruction_code = 430;

const int NID_hold_instruction_none = 431;

const int NID_hold_instruction_call_issuer = 432;

const int NID_hold_instruction_reject = 433;

const int NID_data = 434;

const int NID_pss = 435;

const int NID_ucl = 436;

const int NID_pilot = 437;

const int NID_pilotAttributeType = 438;

const int NID_pilotAttributeSyntax = 439;

const int NID_pilotObjectClass = 440;

const int NID_pilotGroups = 441;

const int NID_iA5StringSyntax = 442;

const int NID_caseIgnoreIA5StringSyntax = 443;

const int NID_pilotObject = 444;

const int NID_pilotPerson = 445;

const int NID_account = 446;

const int NID_document = 447;

const int NID_room = 448;

const int NID_documentSeries = 449;

const int NID_Domain = 392;

const int NID_rFC822localPart = 450;

const int NID_dNSDomain = 451;

const int NID_domainRelatedObject = 452;

const int NID_friendlyCountry = 453;

const int NID_simpleSecurityObject = 454;

const int NID_pilotOrganization = 455;

const int NID_pilotDSA = 456;

const int NID_qualityLabelledData = 457;

const int NID_userId = 458;

const int NID_textEncodedORAddress = 459;

const int NID_rfc822Mailbox = 460;

const int NID_info = 461;

const int NID_favouriteDrink = 462;

const int NID_roomNumber = 463;

const int NID_photo = 464;

const int NID_userClass = 465;

const int NID_host = 466;

const int NID_manager = 467;

const int NID_documentIdentifier = 468;

const int NID_documentTitle = 469;

const int NID_documentVersion = 470;

const int NID_documentAuthor = 471;

const int NID_documentLocation = 472;

const int NID_homeTelephoneNumber = 473;

const int NID_secretary = 474;

const int NID_otherMailbox = 475;

const int NID_lastModifiedTime = 476;

const int NID_lastModifiedBy = 477;

const int NID_domainComponent = 391;

const int NID_aRecord = 478;

const int NID_pilotAttributeType27 = 479;

const int NID_mXRecord = 480;

const int NID_nSRecord = 481;

const int NID_sOARecord = 482;

const int NID_cNAMERecord = 483;

const int NID_associatedDomain = 484;

const int NID_associatedName = 485;

const int NID_homePostalAddress = 486;

const int NID_personalTitle = 487;

const int NID_mobileTelephoneNumber = 488;

const int NID_pagerTelephoneNumber = 489;

const int NID_friendlyCountryName = 490;

const int NID_uniqueIdentifier = 102;

const int NID_organizationalStatus = 491;

const int NID_janetMailbox = 492;

const int NID_mailPreferenceOption = 493;

const int NID_buildingName = 494;

const int NID_dSAQuality = 495;

const int NID_singleLevelQuality = 496;

const int NID_subtreeMinimumQuality = 497;

const int NID_subtreeMaximumQuality = 498;

const int NID_personalSignature = 499;

const int NID_dITRedirect = 500;

const int NID_audio = 501;

const int NID_documentPublisher = 502;

const int NID_id_set = 512;

const int NID_set_ctype = 513;

const int NID_set_msgExt = 514;

const int NID_set_attr = 515;

const int NID_set_policy = 516;

const int NID_set_certExt = 517;

const int NID_set_brand = 518;

const int NID_setct_PANData = 519;

const int NID_setct_PANToken = 520;

const int NID_setct_PANOnly = 521;

const int NID_setct_OIData = 522;

const int NID_setct_PI = 523;

const int NID_setct_PIData = 524;

const int NID_setct_PIDataUnsigned = 525;

const int NID_setct_HODInput = 526;

const int NID_setct_AuthResBaggage = 527;

const int NID_setct_AuthRevReqBaggage = 528;

const int NID_setct_AuthRevResBaggage = 529;

const int NID_setct_CapTokenSeq = 530;

const int NID_setct_PInitResData = 531;

const int NID_setct_PI_TBS = 532;

const int NID_setct_PResData = 533;

const int NID_setct_AuthReqTBS = 534;

const int NID_setct_AuthResTBS = 535;

const int NID_setct_AuthResTBSX = 536;

const int NID_setct_AuthTokenTBS = 537;

const int NID_setct_CapTokenData = 538;

const int NID_setct_CapTokenTBS = 539;

const int NID_setct_AcqCardCodeMsg = 540;

const int NID_setct_AuthRevReqTBS = 541;

const int NID_setct_AuthRevResData = 542;

const int NID_setct_AuthRevResTBS = 543;

const int NID_setct_CapReqTBS = 544;

const int NID_setct_CapReqTBSX = 545;

const int NID_setct_CapResData = 546;

const int NID_setct_CapRevReqTBS = 547;

const int NID_setct_CapRevReqTBSX = 548;

const int NID_setct_CapRevResData = 549;

const int NID_setct_CredReqTBS = 550;

const int NID_setct_CredReqTBSX = 551;

const int NID_setct_CredResData = 552;

const int NID_setct_CredRevReqTBS = 553;

const int NID_setct_CredRevReqTBSX = 554;

const int NID_setct_CredRevResData = 555;

const int NID_setct_PCertReqData = 556;

const int NID_setct_PCertResTBS = 557;

const int NID_setct_BatchAdminReqData = 558;

const int NID_setct_BatchAdminResData = 559;

const int NID_setct_CardCInitResTBS = 560;

const int NID_setct_MeAqCInitResTBS = 561;

const int NID_setct_RegFormResTBS = 562;

const int NID_setct_CertReqData = 563;

const int NID_setct_CertReqTBS = 564;

const int NID_setct_CertResData = 565;

const int NID_setct_CertInqReqTBS = 566;

const int NID_setct_ErrorTBS = 567;

const int NID_setct_PIDualSignedTBE = 568;

const int NID_setct_PIUnsignedTBE = 569;

const int NID_setct_AuthReqTBE = 570;

const int NID_setct_AuthResTBE = 571;

const int NID_setct_AuthResTBEX = 572;

const int NID_setct_AuthTokenTBE = 573;

const int NID_setct_CapTokenTBE = 574;

const int NID_setct_CapTokenTBEX = 575;

const int NID_setct_AcqCardCodeMsgTBE = 576;

const int NID_setct_AuthRevReqTBE = 577;

const int NID_setct_AuthRevResTBE = 578;

const int NID_setct_AuthRevResTBEB = 579;

const int NID_setct_CapReqTBE = 580;

const int NID_setct_CapReqTBEX = 581;

const int NID_setct_CapResTBE = 582;

const int NID_setct_CapRevReqTBE = 583;

const int NID_setct_CapRevReqTBEX = 584;

const int NID_setct_CapRevResTBE = 585;

const int NID_setct_CredReqTBE = 586;

const int NID_setct_CredReqTBEX = 587;

const int NID_setct_CredResTBE = 588;

const int NID_setct_CredRevReqTBE = 589;

const int NID_setct_CredRevReqTBEX = 590;

const int NID_setct_CredRevResTBE = 591;

const int NID_setct_BatchAdminReqTBE = 592;

const int NID_setct_BatchAdminResTBE = 593;

const int NID_setct_RegFormReqTBE = 594;

const int NID_setct_CertReqTBE = 595;

const int NID_setct_CertReqTBEX = 596;

const int NID_setct_CertResTBE = 597;

const int NID_setct_CRLNotificationTBS = 598;

const int NID_setct_CRLNotificationResTBS = 599;

const int NID_setct_BCIDistributionTBS = 600;

const int NID_setext_genCrypt = 601;

const int NID_setext_miAuth = 602;

const int NID_setext_pinSecure = 603;

const int NID_setext_pinAny = 604;

const int NID_setext_track2 = 605;

const int NID_setext_cv = 606;

const int NID_set_policy_root = 607;

const int NID_setCext_hashedRoot = 608;

const int NID_setCext_certType = 609;

const int NID_setCext_merchData = 610;

const int NID_setCext_cCertRequired = 611;

const int NID_setCext_tunneling = 612;

const int NID_setCext_setExt = 613;

const int NID_setCext_setQualf = 614;

const int NID_setCext_PGWYcapabilities = 615;

const int NID_setCext_TokenIdentifier = 616;

const int NID_setCext_Track2Data = 617;

const int NID_setCext_TokenType = 618;

const int NID_setCext_IssuerCapabilities = 619;

const int NID_setAttr_Cert = 620;

const int NID_setAttr_PGWYcap = 621;

const int NID_setAttr_TokenType = 622;

const int NID_setAttr_IssCap = 623;

const int NID_set_rootKeyThumb = 624;

const int NID_set_addPolicy = 625;

const int NID_setAttr_Token_EMV = 626;

const int NID_setAttr_Token_B0Prime = 627;

const int NID_setAttr_IssCap_CVM = 628;

const int NID_setAttr_IssCap_T2 = 629;

const int NID_setAttr_IssCap_Sig = 630;

const int NID_setAttr_GenCryptgrm = 631;

const int NID_setAttr_T2Enc = 632;

const int NID_setAttr_T2cleartxt = 633;

const int NID_setAttr_TokICCsig = 634;

const int NID_setAttr_SecDevSig = 635;

const int NID_set_brand_IATA_ATA = 636;

const int NID_set_brand_Diners = 637;

const int NID_set_brand_AmericanExpress = 638;

const int NID_set_brand_JCB = 639;

const int NID_set_brand_Visa = 640;

const int NID_set_brand_MasterCard = 641;

const int NID_set_brand_Novus = 642;

const int NID_des_cdmf = 643;

const int NID_rsaOAEPEncryptionSET = 644;

const int NID_ipsec3 = 749;

const int NID_ipsec4 = 750;

const int NID_whirlpool = 804;

const int NID_cryptopro = 805;

const int NID_cryptocom = 806;

const int NID_id_tc26 = 974;

const int NID_id_GostR3411_94_with_GostR3410_2001 = 807;

const int NID_id_GostR3411_94_with_GostR3410_94 = 808;

const int NID_id_GostR3411_94 = 809;

const int NID_id_HMACGostR3411_94 = 810;

const int NID_id_GostR3410_2001 = 811;

const int NID_id_GostR3410_94 = 812;

const int NID_id_Gost28147_89 = 813;

const int NID_gost89_cnt = 814;

const int NID_gost89_cnt_12 = 975;

const int NID_gost89_cbc = 1009;

const int NID_gost89_ecb = 1010;

const int NID_gost89_ctr = 1011;

const int NID_id_Gost28147_89_MAC = 815;

const int NID_gost_mac_12 = 976;

const int NID_id_GostR3411_94_prf = 816;

const int NID_id_GostR3410_2001DH = 817;

const int NID_id_GostR3410_94DH = 818;

const int NID_id_Gost28147_89_CryptoPro_KeyMeshing = 819;

const int NID_id_Gost28147_89_None_KeyMeshing = 820;

const int NID_id_GostR3411_94_TestParamSet = 821;

const int NID_id_GostR3411_94_CryptoProParamSet = 822;

const int NID_id_Gost28147_89_TestParamSet = 823;

const int NID_id_Gost28147_89_CryptoPro_A_ParamSet = 824;

const int NID_id_Gost28147_89_CryptoPro_B_ParamSet = 825;

const int NID_id_Gost28147_89_CryptoPro_C_ParamSet = 826;

const int NID_id_Gost28147_89_CryptoPro_D_ParamSet = 827;

const int NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 828;

const int NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 829;

const int NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 830;

const int NID_id_GostR3410_94_TestParamSet = 831;

const int NID_id_GostR3410_94_CryptoPro_A_ParamSet = 832;

const int NID_id_GostR3410_94_CryptoPro_B_ParamSet = 833;

const int NID_id_GostR3410_94_CryptoPro_C_ParamSet = 834;

const int NID_id_GostR3410_94_CryptoPro_D_ParamSet = 835;

const int NID_id_GostR3410_94_CryptoPro_XchA_ParamSet = 836;

const int NID_id_GostR3410_94_CryptoPro_XchB_ParamSet = 837;

const int NID_id_GostR3410_94_CryptoPro_XchC_ParamSet = 838;

const int NID_id_GostR3410_2001_TestParamSet = 839;

const int NID_id_GostR3410_2001_CryptoPro_A_ParamSet = 840;

const int NID_id_GostR3410_2001_CryptoPro_B_ParamSet = 841;

const int NID_id_GostR3410_2001_CryptoPro_C_ParamSet = 842;

const int NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 843;

const int NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 844;

const int NID_id_GostR3410_94_a = 845;

const int NID_id_GostR3410_94_aBis = 846;

const int NID_id_GostR3410_94_b = 847;

const int NID_id_GostR3410_94_bBis = 848;

const int NID_id_Gost28147_89_cc = 849;

const int NID_id_GostR3410_94_cc = 850;

const int NID_id_GostR3410_2001_cc = 851;

const int NID_id_GostR3411_94_with_GostR3410_94_cc = 852;

const int NID_id_GostR3411_94_with_GostR3410_2001_cc = 853;

const int NID_id_GostR3410_2001_ParamSet_cc = 854;

const int NID_id_tc26_algorithms = 977;

const int NID_id_tc26_sign = 978;

const int NID_id_GostR3410_2012_256 = 979;

const int NID_id_GostR3410_2012_512 = 980;

const int NID_id_tc26_digest = 981;

const int NID_id_GostR3411_2012_256 = 982;

const int NID_id_GostR3411_2012_512 = 983;

const int NID_id_tc26_signwithdigest = 984;

const int NID_id_tc26_signwithdigest_gost3410_2012_256 = 985;

const int NID_id_tc26_signwithdigest_gost3410_2012_512 = 986;

const int NID_id_tc26_mac = 987;

const int NID_id_tc26_hmac_gost_3411_2012_256 = 988;

const int NID_id_tc26_hmac_gost_3411_2012_512 = 989;

const int NID_id_tc26_cipher = 990;

const int NID_id_tc26_cipher_gostr3412_2015_magma = 1173;

const int NID_magma_ctr_acpkm = 1174;

const int NID_magma_ctr_acpkm_omac = 1175;

const int NID_id_tc26_cipher_gostr3412_2015_kuznyechik = 1176;

const int NID_kuznyechik_ctr_acpkm = 1177;

const int NID_kuznyechik_ctr_acpkm_omac = 1178;

const int NID_id_tc26_agreement = 991;

const int NID_id_tc26_agreement_gost_3410_2012_256 = 992;

const int NID_id_tc26_agreement_gost_3410_2012_512 = 993;

const int NID_id_tc26_wrap = 1179;

const int NID_id_tc26_wrap_gostr3412_2015_magma = 1180;

const int NID_magma_kexp15 = 1181;

const int NID_id_tc26_wrap_gostr3412_2015_kuznyechik = 1182;

const int NID_kuznyechik_kexp15 = 1183;

const int NID_id_tc26_constants = 994;

const int NID_id_tc26_sign_constants = 995;

const int NID_id_tc26_gost_3410_2012_256_constants = 1147;

const int NID_id_tc26_gost_3410_2012_256_paramSetA = 1148;

const int NID_id_tc26_gost_3410_2012_256_paramSetB = 1184;

const int NID_id_tc26_gost_3410_2012_256_paramSetC = 1185;

const int NID_id_tc26_gost_3410_2012_256_paramSetD = 1186;

const int NID_id_tc26_gost_3410_2012_512_constants = 996;

const int NID_id_tc26_gost_3410_2012_512_paramSetTest = 997;

const int NID_id_tc26_gost_3410_2012_512_paramSetA = 998;

const int NID_id_tc26_gost_3410_2012_512_paramSetB = 999;

const int NID_id_tc26_gost_3410_2012_512_paramSetC = 1149;

const int NID_id_tc26_digest_constants = 1000;

const int NID_id_tc26_cipher_constants = 1001;

const int NID_id_tc26_gost_28147_constants = 1002;

const int NID_id_tc26_gost_28147_param_Z = 1003;

const int NID_INN = 1004;

const int NID_OGRN = 1005;

const int NID_SNILS = 1006;

const int NID_OGRNIP = 1226;

const int NID_subjectSignTool = 1007;

const int NID_issuerSignTool = 1008;

const int NID_classSignTool = 1227;

const int NID_classSignToolKC1 = 1228;

const int NID_classSignToolKC2 = 1229;

const int NID_classSignToolKC3 = 1230;

const int NID_classSignToolKB1 = 1231;

const int NID_classSignToolKB2 = 1232;

const int NID_classSignToolKA1 = 1233;

const int NID_kuznyechik_ecb = 1012;

const int NID_kuznyechik_ctr = 1013;

const int NID_kuznyechik_ofb = 1014;

const int NID_kuznyechik_cbc = 1015;

const int NID_kuznyechik_cfb = 1016;

const int NID_kuznyechik_mac = 1017;

const int NID_magma_ecb = 1187;

const int NID_magma_ctr = 1188;

const int NID_magma_ofb = 1189;

const int NID_magma_cbc = 1190;

const int NID_magma_cfb = 1191;

const int NID_magma_mac = 1192;

const int NID_camellia_128_cbc = 751;

const int NID_camellia_192_cbc = 752;

const int NID_camellia_256_cbc = 753;

const int NID_id_camellia128_wrap = 907;

const int NID_id_camellia192_wrap = 908;

const int NID_id_camellia256_wrap = 909;

const int NID_camellia_128_ecb = 754;

const int NID_camellia_128_ofb128 = 766;

const int NID_camellia_128_cfb128 = 757;

const int NID_camellia_128_gcm = 961;

const int NID_camellia_128_ccm = 962;

const int NID_camellia_128_ctr = 963;

const int NID_camellia_128_cmac = 964;

const int NID_camellia_192_ecb = 755;

const int NID_camellia_192_ofb128 = 767;

const int NID_camellia_192_cfb128 = 758;

const int NID_camellia_192_gcm = 965;

const int NID_camellia_192_ccm = 966;

const int NID_camellia_192_ctr = 967;

const int NID_camellia_192_cmac = 968;

const int NID_camellia_256_ecb = 756;

const int NID_camellia_256_ofb128 = 768;

const int NID_camellia_256_cfb128 = 759;

const int NID_camellia_256_gcm = 969;

const int NID_camellia_256_ccm = 970;

const int NID_camellia_256_ctr = 971;

const int NID_camellia_256_cmac = 972;

const int NID_camellia_128_cfb1 = 760;

const int NID_camellia_192_cfb1 = 761;

const int NID_camellia_256_cfb1 = 762;

const int NID_camellia_128_cfb8 = 763;

const int NID_camellia_192_cfb8 = 764;

const int NID_camellia_256_cfb8 = 765;

const int NID_aria_128_ecb = 1065;

const int NID_aria_128_cbc = 1066;

const int NID_aria_128_cfb128 = 1067;

const int NID_aria_128_ofb128 = 1068;

const int NID_aria_128_ctr = 1069;

const int NID_aria_192_ecb = 1070;

const int NID_aria_192_cbc = 1071;

const int NID_aria_192_cfb128 = 1072;

const int NID_aria_192_ofb128 = 1073;

const int NID_aria_192_ctr = 1074;

const int NID_aria_256_ecb = 1075;

const int NID_aria_256_cbc = 1076;

const int NID_aria_256_cfb128 = 1077;

const int NID_aria_256_ofb128 = 1078;

const int NID_aria_256_ctr = 1079;

const int NID_aria_128_cfb1 = 1080;

const int NID_aria_192_cfb1 = 1081;

const int NID_aria_256_cfb1 = 1082;

const int NID_aria_128_cfb8 = 1083;

const int NID_aria_192_cfb8 = 1084;

const int NID_aria_256_cfb8 = 1085;

const int NID_aria_128_ccm = 1120;

const int NID_aria_192_ccm = 1121;

const int NID_aria_256_ccm = 1122;

const int NID_aria_128_gcm = 1123;

const int NID_aria_192_gcm = 1124;

const int NID_aria_256_gcm = 1125;

const int NID_kisa = 773;

const int NID_seed_ecb = 776;

const int NID_seed_cbc = 777;

const int NID_seed_cfb128 = 779;

const int NID_seed_ofb128 = 778;

const int NID_sm4_ecb = 1133;

const int NID_sm4_cbc = 1134;

const int NID_sm4_ofb128 = 1135;

const int NID_sm4_cfb128 = 1137;

const int NID_sm4_cfb1 = 1136;

const int NID_sm4_cfb8 = 1138;

const int NID_sm4_ctr = 1139;

const int NID_hmac = 855;

const int NID_cmac = 894;

const int NID_rc4_hmac_md5 = 915;

const int NID_aes_128_cbc_hmac_sha1 = 916;

const int NID_aes_192_cbc_hmac_sha1 = 917;

const int NID_aes_256_cbc_hmac_sha1 = 918;

const int NID_aes_128_cbc_hmac_sha256 = 948;

const int NID_aes_192_cbc_hmac_sha256 = 949;

const int NID_aes_256_cbc_hmac_sha256 = 950;

const int NID_chacha20_poly1305 = 1018;

const int NID_chacha20 = 1019;

const int NID_dhpublicnumber = 920;

const int NID_brainpoolP160r1 = 921;

const int NID_brainpoolP160t1 = 922;

const int NID_brainpoolP192r1 = 923;

const int NID_brainpoolP192t1 = 924;

const int NID_brainpoolP224r1 = 925;

const int NID_brainpoolP224t1 = 926;

const int NID_brainpoolP256r1 = 927;

const int NID_brainpoolP256t1 = 928;

const int NID_brainpoolP320r1 = 929;

const int NID_brainpoolP320t1 = 930;

const int NID_brainpoolP384r1 = 931;

const int NID_brainpoolP384t1 = 932;

const int NID_brainpoolP512r1 = 933;

const int NID_brainpoolP512t1 = 934;

const int NID_dhSinglePass_stdDH_sha1kdf_scheme = 936;

const int NID_dhSinglePass_stdDH_sha224kdf_scheme = 937;

const int NID_dhSinglePass_stdDH_sha256kdf_scheme = 938;

const int NID_dhSinglePass_stdDH_sha384kdf_scheme = 939;

const int NID_dhSinglePass_stdDH_sha512kdf_scheme = 940;

const int NID_dhSinglePass_cofactorDH_sha1kdf_scheme = 941;

const int NID_dhSinglePass_cofactorDH_sha224kdf_scheme = 942;

const int NID_dhSinglePass_cofactorDH_sha256kdf_scheme = 943;

const int NID_dhSinglePass_cofactorDH_sha384kdf_scheme = 944;

const int NID_dhSinglePass_cofactorDH_sha512kdf_scheme = 945;

const int NID_dh_std_kdf = 946;

const int NID_dh_cofactor_kdf = 947;

const int NID_ct_precert_scts = 951;

const int NID_ct_precert_poison = 952;

const int NID_ct_precert_signer = 953;

const int NID_ct_cert_scts = 954;

const int NID_jurisdictionLocalityName = 955;

const int NID_jurisdictionStateOrProvinceName = 956;

const int NID_jurisdictionCountryName = 957;

const int NID_id_scrypt = 973;

const int NID_tls1_prf = 1021;

const int NID_hkdf = 1036;

const int NID_sshkdf = 1203;

const int NID_sskdf = 1205;

const int NID_x942kdf = 1207;

const int NID_x963kdf = 1206;

const int NID_id_pkinit = 1031;

const int NID_pkInitClientAuth = 1032;

const int NID_pkInitKDC = 1033;

const int NID_X25519 = 1034;

const int NID_X448 = 1035;

const int NID_ED25519 = 1087;

const int NID_ED448 = 1088;

const int NID_kx_rsa = 1037;

const int NID_kx_ecdhe = 1038;

const int NID_kx_dhe = 1039;

const int NID_kx_ecdhe_psk = 1040;

const int NID_kx_dhe_psk = 1041;

const int NID_kx_rsa_psk = 1042;

const int NID_kx_psk = 1043;

const int NID_kx_srp = 1044;

const int NID_kx_gost = 1045;

const int NID_kx_gost18 = 1218;

const int NID_kx_any = 1063;

const int NID_auth_rsa = 1046;

const int NID_auth_ecdsa = 1047;

const int NID_auth_psk = 1048;

const int NID_auth_dss = 1049;

const int NID_auth_gost01 = 1050;

const int NID_auth_gost12 = 1051;

const int NID_auth_srp = 1052;

const int NID_auth_null = 1053;

const int NID_auth_any = 1064;

const int NID_poly1305 = 1061;

const int NID_siphash = 1062;

const int NID_ffdhe2048 = 1126;

const int NID_ffdhe3072 = 1127;

const int NID_ffdhe4096 = 1128;

const int NID_ffdhe6144 = 1129;

const int NID_ffdhe8192 = 1130;

const int NID_modp_1536 = 1212;

const int NID_modp_2048 = 1213;

const int NID_modp_3072 = 1214;

const int NID_modp_4096 = 1215;

const int NID_modp_6144 = 1216;

const int NID_modp_8192 = 1217;

const int NID_ISO_UA = 1150;

const int NID_ua_pki = 1151;

const int NID_dstu28147 = 1152;

const int NID_dstu28147_ofb = 1153;

const int NID_dstu28147_cfb = 1154;

const int NID_dstu28147_wrap = 1155;

const int NID_hmacWithDstu34311 = 1156;

const int NID_dstu34311 = 1157;

const int NID_dstu4145le = 1158;

const int NID_dstu4145be = 1159;

const int NID_uacurve0 = 1160;

const int NID_uacurve1 = 1161;

const int NID_uacurve2 = 1162;

const int NID_uacurve3 = 1163;

const int NID_uacurve4 = 1164;

const int NID_uacurve5 = 1165;

const int NID_uacurve6 = 1166;

const int NID_uacurve7 = 1167;

const int NID_uacurve8 = 1168;

const int NID_uacurve9 = 1169;

const int NID_aes_128_siv = 1198;

const int NID_aes_192_siv = 1199;

const int NID_aes_256_siv = 1200;

const int NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = 1174;

const int NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = 1175;

const int NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = 1177;

const int NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = 1178;

const int NID_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 1181;

const int NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = 1183;

const int NID_grasshopper_ecb = 1012;

const int NID_grasshopper_ctr = 1013;

const int NID_grasshopper_ofb = 1014;

const int NID_grasshopper_cbc = 1015;

const int NID_grasshopper_cfb = 1016;

const int NID_grasshopper_mac = 1017;
